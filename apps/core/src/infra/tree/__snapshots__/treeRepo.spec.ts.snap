// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TreeRepo AddElement Should add an element to the root 1`] = `
"INSERT {
                        @value0: @value1,
                        @value2: @value3
                    } IN @@value4 RETURN NEW"
`;

exports[`TreeRepo AddElement Should add an element to the root 2`] = `
Object {
  "@value4": "core_nodes_test_tree",
  "value0": "libraryId",
  "value1": "test_lib",
  "value2": "recordId",
  "value3": "13445",
}
`;

exports[`TreeRepo AddElement Should add an element to the root 3`] = `
"INSERT {
                        _from: @value0,
                        _to: @value1,
                        order: @value2
                    } IN @@value3 RETURN NEW"
`;

exports[`TreeRepo AddElement Should add an element to the root 4`] = `
Object {
  "@value3": "core_edge_tree_test_tree",
  "value0": "core_trees/test_tree",
  "value1": "core_nodes_my_tree/19610667",
  "value2": 0,
}
`;

exports[`TreeRepo AddElement Should add an element under another 1`] = `
"INSERT {
                        @value0: @value1,
                        @value2: @value3
                    } IN @@value4 RETURN NEW"
`;

exports[`TreeRepo AddElement Should add an element under another 2`] = `
Object {
  "@value4": "core_nodes_test_tree",
  "value0": "libraryId",
  "value1": "test_lib",
  "value2": "recordId",
  "value3": "13445",
}
`;

exports[`TreeRepo AddElement Should add an element under another 3`] = `
"INSERT {
                        _from: @value0,
                        _to: @value1,
                        order: @value2
                    } IN @@value3 RETURN NEW"
`;

exports[`TreeRepo AddElement Should add an element under another 4`] = `
Object {
  "@value3": "core_edge_tree_test_tree",
  "value0": "core_nodes_test_tree/6789",
  "value1": "core_nodes_my_tree/19610667",
  "value2": 1,
}
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 1`] = `
"
                        LET edges = (
                            FOR v, e IN 0..@value0 OUTBOUND @value1
                            @@value2
                            RETURN e
                        )
                        FOR ed IN edges
                            FILTER ed != null
                            REMOVE ed IN @@value2
                            RETURN OLD
                    "
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_nodes_test_tree/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 3`] = `
"
                    FOR e IN @@value0
                        FILTER e._to == @value1 OR e._from == @value1
                        REMOVE e IN @@value0
                        RETURN OLD
                "
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 4`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "core_nodes_test_tree/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 5`] = `"REMOVE {_id: @value0, _key: @value1} IN @@value2 RETURN OLD"`;

exports[`TreeRepo DeleteElement Should delete an element and its children 6`] = `
Object {
  "@value2": "core_nodes_test_tree",
  "value0": "core_nodes_test_tree/13445",
  "value1": "13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 1`] = `
"
                        FOR v IN 1 OUTBOUND @value0
                        @@value1
                        RETURN v
                    "
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 2`] = `
Object {
  "@value1": "core_edge_tree_test_tree",
  "value0": "core_nodes_test_tree/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 3`] = `
"
                    FOR e IN @@value0
                        FILTER e._to == @value1 OR e._from == @value1
                        REMOVE e IN @@value0
                        RETURN OLD
                "
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 4`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "core_nodes_test_tree/13445",
}
`;

exports[`TreeRepo MoveElement Should move an element 1`] = `
"
                    FOR e IN @@value0
                        FILTER e._to == @value1
                        UPDATE e WITH {_from: @value2, _to: @value1, order: @value3}
                        IN @@value0
                        RETURN NEW
                "
`;

exports[`TreeRepo MoveElement Should move an element 2`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "core_nodes_test_tree/13445",
  "value2": "core_nodes_test_tree/6789",
  "value3": 1,
}
`;

exports[`TreeRepo createTree Should create a tree 1`] = `"INSERT @value0 IN @@value1 RETURN NEW"`;

exports[`TreeRepo createTree Should create a tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
    "label": Object {
      "en": "test",
      "fr": "test",
    },
    "libraries": Array [
      "test_lib",
    ],
    "system": false,
  },
}
`;

exports[`TreeRepo deleteTree Should delete tree 1`] = `"REMOVE @value0 IN @@value1 RETURN OLD"`;

exports[`TreeRepo deleteTree Should delete tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
  },
}
`;

exports[`TreeRepo getDefaultElement Should return the first element of a tree 1`] = `
"
                    FOR v, e, p IN 1..@value0 OUTBOUND @value1
                    @@value2
                    LET record = DOCUMENT(v.@value3, v.@value4)
                    LET path = (
                        FOR pv IN p.vertices
                        FILTER pv._id != v._id
                        RETURN pv._key
                    )
                    LET nodeOrder = TO_NUMBER(p.edges[-1].order)
                 
                SORT LENGTH(path), nodeOrder ASC
                RETURN {
                    id: v._key,
                    record: MERGE(record, {path}),
                    order: nodeOrder,
                    
                }
            "
`;

exports[`TreeRepo getDefaultElement Should return the first element of a tree 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_trees/test_tree",
  "value3": "libraryId",
  "value4": "recordId",
}
`;

exports[`TreeRepo getElementAncestors Should return element ancestors 1`] = `
"
                FOR v,e,p IN 0..@value0 INBOUND @value1
                    @@value2
                    FILTER v._id != @value3
                    LET record = DOCUMENT(v.@value4, v.@value5)
                    RETURN {id: v._key, order: TO_NUMBER(e.order), record}
            "
`;

exports[`TreeRepo getElementAncestors Should return element ancestors 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_nodes_test_tree/123458",
  "value3": "core_trees/test_tree",
  "value4": "libraryId",
  "value5": "recordId",
}
`;

exports[`TreeRepo getElementChildren Should return element children 1`] = `
"
                FOR v, e, p IN 1 OUTBOUND @value0
                    @@value1
                    LET order = TO_NUMBER(p.edges[0].order)
                    LET key = p.edges[0]._key
                    SORT order ASC, key ASC
                    

                    

                    LET record = DOCUMENT(v.@value2, v.@value3)

                    RETURN {
                        id: v._key,
                        order,
                        
                        record
                    }
            "
`;

exports[`TreeRepo getElementChildren Should return element children 2`] = `
Object {
  "@value1": "core_edge_tree_test_tree",
  "value0": "core_nodes_test_tree/123458",
  "value2": "libraryId",
  "value3": "recordId",
}
`;

exports[`TreeRepo getLinkedRecords Should return linked records 1`] = `
"
                FOR v,e,p
                    IN 1 INBOUND @value0
                    @@value1
                    FILTER e.attribute == @value2
                    RETURN v
            "
`;

exports[`TreeRepo getLinkedRecords Should return linked records 2`] = `
Object {
  "@value1": "core_edge_values_links",
  "value0": "core_nodes_test_tree/123458",
  "value2": "test_attr",
}
`;

exports[`TreeRepo getNodesByRecord Return nodes linked to record 1`] = `
"
                FOR n IN @@value0
                    FILTER n.@value1 == @value2 && n.@value3 == @value4
                    RETURN n._key
            "
`;

exports[`TreeRepo getNodesByRecord Return nodes linked to record 2`] = `
Object {
  "@value0": "core_nodes_test_tree",
  "value1": "libraryId",
  "value2": "mylib",
  "value3": "recordId",
  "value4": "123456",
}
`;

exports[`TreeRepo getRecordByNodeId Return record linked to node 1`] = `
"
                FOR n IN @@value0
                    FILTER n._key == @value1
                    LET record = DOCUMENT(n.@value2, n.@value3)
                    RETURN record
            "
`;

exports[`TreeRepo getRecordByNodeId Return record linked to node 2`] = `
Object {
  "@value0": "core_nodes_test_tree",
  "value1": "123458",
  "value2": "libraryId",
  "value3": "recordId",
}
`;

exports[`TreeRepo getTreeContent Should return children count of elements 1`] = `
"
                    FOR v, e, p IN 1..@value0 OUTBOUND @value1
                    @@value2
                    LET record = DOCUMENT(v.@value3, v.@value4)
                    LET path = (
                        FOR pv IN p.vertices
                        FILTER pv._id != v._id
                        RETURN pv._key
                    )
                    LET nodeOrder = TO_NUMBER(p.edges[-1].order)
                 
                    LET childrenCount = COUNT(
                        FOR vChildren IN 1 outbound v
                        @@value2
                        return vChildren
                    )
                 
                SORT LENGTH(path), nodeOrder ASC
                RETURN {
                    id: v._key,
                    record: MERGE(record, {path}),
                    order: nodeOrder,
                    childrenCount
                }
            "
`;

exports[`TreeRepo getTreeContent Should return children count of elements 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_trees/test_tree",
  "value3": "libraryId",
  "value4": "recordId",
}
`;

exports[`TreeRepo getTreeContent Should return content of a tree starting from a given node 1`] = `
"
                    FOR v, e, p IN 1..@value0 OUTBOUND @value1
                    @@value2
                    LET record = DOCUMENT(v.@value3, v.@value4)
                    LET path = (
                        FOR pv IN p.vertices
                        FILTER pv._id != v._id
                        RETURN pv._key
                    )
                    LET nodeOrder = TO_NUMBER(p.edges[-1].order)
                 
                SORT LENGTH(path), nodeOrder ASC
                RETURN {
                    id: v._key,
                    record: MERGE(record, {path}),
                    order: nodeOrder,
                    
                }
            "
`;

exports[`TreeRepo getTreeContent Should return content of a tree starting from a given node 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_nodes_test_tree/223588185",
  "value3": "libraryId",
  "value4": "recordId",
}
`;

exports[`TreeRepo getTreeContent Should return full content of a tree 1`] = `
"
                    FOR v, e, p IN 1..@value0 OUTBOUND @value1
                    @@value2
                    LET record = DOCUMENT(v.@value3, v.@value4)
                    LET path = (
                        FOR pv IN p.vertices
                        FILTER pv._id != v._id
                        RETURN pv._key
                    )
                    LET nodeOrder = TO_NUMBER(p.edges[-1].order)
                 
                SORT LENGTH(path), nodeOrder ASC
                RETURN {
                    id: v._key,
                    record: MERGE(record, {path}),
                    order: nodeOrder,
                    
                }
            "
`;

exports[`TreeRepo getTreeContent Should return full content of a tree 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_trees/test_tree",
  "value3": "libraryId",
  "value4": "recordId",
}
`;

exports[`TreeRepo isElementPresent Should check if an element is present in the tree 1`] = `
"
                FOR e IN @@value0
                    FILTER e._to == @value1
                    RETURN e
            "
`;

exports[`TreeRepo isElementPresent Should check if an element is present in the tree 2`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "core_nodes_test_tree/13445",
}
`;

exports[`TreeRepo isRecordPresent Should check if a record is present in the tree 1`] = `
"
                FOR n IN @@value0
                    FILTER n.libraryId == @value1
                        AND n.recordId == @value2
                    RETURN n
            "
`;

exports[`TreeRepo isRecordPresent Should check if a record is present in the tree 2`] = `
Object {
  "@value0": "core_nodes_test_tree",
  "value1": "users",
  "value2": "223536900",
}
`;

exports[`TreeRepo isRecordPresent Should check if an element is present in the tree 1`] = `
"
                FOR n IN @@value0
                    FILTER n.libraryId == @value1
                        AND n.recordId == @value2
                    RETURN n
            "
`;

exports[`TreeRepo isRecordPresent Should check if an element is present in the tree 2`] = `
Object {
  "@value0": "core_nodes_test_tree",
  "value1": "users",
  "value2": "223536900",
}
`;

exports[`TreeRepo updateTree Should update a tree 1`] = `"UPDATE @value0 IN @@value1 OPTIONS { mergeObjects: false } RETURN NEW"`;

exports[`TreeRepo updateTree Should update a tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
    "label": Object {
      "en": "test",
      "fr": "test",
    },
    "libraries": Array [
      "test_lib",
    ],
    "system": false,
  },
}
`;

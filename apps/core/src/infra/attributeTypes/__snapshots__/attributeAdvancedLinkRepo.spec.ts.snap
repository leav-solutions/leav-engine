// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AttributeAdvancedLinkRepo createValue Should create a new advanced link value 1`] = `
"
                    LET linkedRecord = DOCUMENT(@value0)
                    INSERT @value1 IN @@value2
                    RETURN {edge: NEW, linkedRecord}"
`;

exports[`AttributeAdvancedLinkRepo createValue Should create a new advanced link value 2`] = `
{
  "@value2": "core_edge_values_links",
  "value0": "test_linked_lib/987654",
  "value1": {
    "_from": "test_lib/12345",
    "_to": "test_linked_lib/987654",
    "attribute": "test_adv_link_attr",
    "created_at": 400999999,
    "created_by": "0",
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

exports[`AttributeAdvancedLinkRepo createValue Should create a new reverse advanced link value 1`] = `
"
                    LET linkedRecord = DOCUMENT(@value0)
                    INSERT @value1 IN @@value2
                    RETURN {edge: NEW, linkedRecord}"
`;

exports[`AttributeAdvancedLinkRepo createValue Should create a new reverse advanced link value 2`] = `
{
  "@value2": "core_edge_values_links",
  "value0": "test_lib/12345",
  "value1": {
    "_from": "test_linked_lib/987654",
    "_to": "test_lib/12345",
    "attribute": "test",
    "created_at": 400999999,
    "created_by": "0",
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

exports[`AttributeAdvancedLinkRepo deleteValue Should delete a value 1`] = `
"
                    REMOVE @value0 IN @@value1
                    RETURN OLD"
`;

exports[`AttributeAdvancedLinkRepo deleteValue Should delete a value 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": {
    "_key": "445566",
  },
}
`;

exports[`AttributeAdvancedLinkRepo filterValueQueryPart Should return query to retrieve value to filter on 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "label",
  },
  "query": "FLATTEN( 
                        FOR rv, re IN 1 OUTBOUND r._id
                            @@value0
                            FILTER re.attribute == @value1
                         LET rlinkVal = (<VALUE QUERY PART>) RETURN rlinkVal )",
}
`;

exports[`AttributeAdvancedLinkRepo filterValueQueryPart Should return query to retrieve value to filter on for "count" filter 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "linked_from",
  },
  "query": "
                    COUNT(
                        FOR rv IN @@value0
                            FILTER rv._from == r._id
                                AND rv.attribute == @value1
                            RETURN true
                    )
                ",
}
`;

exports[`AttributeAdvancedLinkRepo filterValueQueryPart Should return query to retrieve value to filter on for reverse link 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "adv_link_attribute",
  },
  "query": "FLATTEN( 
                        FOR rv, re IN 1 INBOUND r._id
                            @@value0
                            FILTER re.attribute == @value1
                         LET rlinkVal = (<VALUE QUERY PART>) RETURN rlinkVal )",
}
`;

exports[`AttributeAdvancedLinkRepo getValueByID Should return value for advanced link attribute 1`] = `
" FOR linkedRecord, edge
                    IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge._key == @value2
                    FILTER edge.attribute == @value3
                    LIMIT 1
                    RETURN {linkedRecord, edge}"
`;

exports[`AttributeAdvancedLinkRepo getValueByID Should return value for advanced link attribute 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/987654",
  "value2": "112233",
  "value3": "test_adv_link_attr",
}
`;

exports[`AttributeAdvancedLinkRepo getValueByID Should return value for reverse advanced link attribute 1`] = `
" FOR linkedRecord, edge
                    IN 1 INBOUND @value0
                    @@value1
                    FILTER edge._key == @value2
                    FILTER edge.attribute == @value3
                    LIMIT 1
                    RETURN {linkedRecord, edge}"
`;

exports[`AttributeAdvancedLinkRepo getValueByID Should return value for reverse advanced link attribute 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/987654",
  "value2": "112233",
  "value3": "test",
}
`;

exports[`AttributeAdvancedLinkRepo getValues Should return all values if forced 1`] = `
"
                FOR linkedRecord, edge
                    IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge.attribute == @value2
                 
                
                RETURN {linkedRecord, edge}
            "
`;

exports[`AttributeAdvancedLinkRepo getValues Should return only first value if not multiple attribute 1`] = `
"
                FOR linkedRecord, edge
                    IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge.attribute == @value2
                 
                LIMIT 1
                RETURN {linkedRecord, edge}
            "
`;

exports[`AttributeAdvancedLinkRepo getValues Should return only first value if not multiple attribute 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/123456",
  "value2": "test_adv_link_attr",
}
`;

exports[`AttributeAdvancedLinkRepo getValues Should return values filtered by version 1`] = `
"
                FOR linkedRecord, edge
                    IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge.attribute == @value2
                 FILTER edge.version == @value3 
                
                RETURN {linkedRecord, edge}
            "
`;

exports[`AttributeAdvancedLinkRepo getValues Should return values for advanced link attribute 1`] = `
"
                FOR linkedRecord, edge
                    IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge.attribute == @value2
                 
                
                RETURN {linkedRecord, edge}
            "
`;

exports[`AttributeAdvancedLinkRepo getValues Should return values for advanced link attribute 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/123456",
  "value2": "test_adv_link_attr",
}
`;

exports[`AttributeAdvancedLinkRepo getValues Should return values for reverse advanced link attribute 1`] = `
"
                FOR linkedRecord, edge
                    IN 1 INBOUND @value0
                    @@value1
                    FILTER edge.attribute == @value2
                 
                
                RETURN {linkedRecord, edge}
            "
`;

exports[`AttributeAdvancedLinkRepo getValues Should return values for reverse advanced link attribute 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/123456",
  "value2": "test",
}
`;

exports[`AttributeAdvancedLinkRepo sortQueryPart Should return advanced link sort 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "label",
    "value2": "linked",
    "value3": "ASC",
  },
  "query": "SORT FIRST(
                FOR v, e IN 1 OUTBOUND r._id
                @@value0
                FILTER e.attribute == @value1 RETURN v.@value2
            ) @value3",
}
`;

exports[`AttributeAdvancedLinkRepo updateValue Should update a advanced link value 1`] = `
"
                    LET linkedRecord = DOCUMENT(@value0)
                    UPDATE @value1
                        WITH @value2
                        IN @@value3
                    RETURN {edge: NEW, linkedRecord}"
`;

exports[`AttributeAdvancedLinkRepo updateValue Should update a advanced link value 2`] = `
{
  "@value3": "core_edge_values_links",
  "value0": "test_linked_lib/987654",
  "value1": {
    "_key": "987654",
  },
  "value2": {
    "_from": "test_lib/12345",
    "_to": "test_linked_lib/987654",
    "attribute": "test_adv_link_attr",
    "created_by": undefined,
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

exports[`AttributeAdvancedLinkRepo updateValue Should update a reverse advanced link value 1`] = `
"
                    LET linkedRecord = DOCUMENT(@value0)
                    UPDATE @value1
                        WITH @value2
                        IN @@value3
                    RETURN {edge: NEW, linkedRecord}"
`;

exports[`AttributeAdvancedLinkRepo updateValue Should update a reverse advanced link value 2`] = `
{
  "@value3": "core_edge_values_links",
  "value0": "test_lib/12345",
  "value1": {
    "_key": "987654",
  },
  "value2": {
    "_from": "test_linked_lib/987654",
    "_to": "test_lib/12345",
    "attribute": "test",
    "created_by": undefined,
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AttributeTreeRepo createValue Should create a new advanced tree value 1`] = `
"
                    LET linkedNode = DOCUMENT(@value0, @value1)
                    LET linkedRecord = DOCUMENT(linkedNode.libraryId, linkedNode.recordId)
                    INSERT @value2 IN @@value3
                    RETURN {newEdge: NEW, linkedRecord}
                "
`;

exports[`AttributeTreeRepo createValue Should create a new advanced tree value 2`] = `
{
  "@value3": "core_edge_values_links",
  "value0": "categories",
  "value1": "123456",
  "value2": {
    "_from": "test_lib/12345",
    "_to": "core_nodes_test_tree/categories/123456",
    "attribute": "test_tree_attr",
    "created_at": 400999999,
    "created_by": "0",
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

exports[`AttributeTreeRepo deleteValue Should delete a value 1`] = `
"
                    FOR linkedNode, edge IN 1 OUTBOUND @value0
                        @@value1
                        FILTER edge._key == @value2
                        LET linkedRecord = DOCUMENT(linkedNode.libraryId, linkedNode.recordId)
                        REMOVE edge IN @@value1
                        RETURN {edge: OLD, linkedRecord}
                "
`;

exports[`AttributeTreeRepo deleteValue Should delete a value 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/12345",
  "value2": "445566",
}
`;

exports[`AttributeTreeRepo filterValueQueryPart Should return query to retrieve value to filter on 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "label",
  },
  "query": "FLATTEN( 
                FOR rv, re IN 1 OUTBOUND r._id
                    @@value0
                    FILTER re.attribute == @value1
                    LET rRecord = DOCUMENT(
                        rv.libraryId,
                        rv.recordId
                        )
                         LET rlinkVal = () RETURN rlinkVal )",
}
`;

exports[`AttributeTreeRepo filterValueQueryPart Should return query to retrieve value to filter on for "count" filter 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "value1": "tree_attr",
  },
  "query": "
                COUNT(
                    FOR rv IN @@value0
                    FILTER rv._from == r._id
                    AND rv.attribute == @value1
                    RETURN true
                    )
                    ",
}
`;

exports[`AttributeTreeRepo getValueByID Should return value 1`] = `
"
                FOR linkedNode, edge IN 1 OUTBOUND @value0
                    @@value1
                    FILTER edge._key == @value2
                    FILTER edge.attribute == @value3
                    LET linkedRecord = DOCUMENT(linkedNode.libraryId, linkedNode.recordId)
                    LIMIT 1
                    RETURN {linkedNode, edge, linkedRecord}
            "
`;

exports[`AttributeTreeRepo getValueByID Should return value 2`] = `
{
  "@value1": "core_edge_values_links",
  "value0": "test_lib/987654",
  "value2": "112233",
  "value3": "test_tree_attr",
}
`;

exports[`AttributeTreeRepo getValues Should return all values if forced 1`] = `
"FOR vertex, edge IN 1 OUTBOUND @value0
                    @@value1, @@value2
                    LET record = DOCUMENT(
                        vertex.libraryId,
                        vertex.recordId
                    )
                    FILTER edge.attribute == @value3
                 
                
                RETURN {id: vertex._key, record, edge}
            "
`;

exports[`AttributeTreeRepo getValues Should return linked tree element 1`] = `
"FOR vertex, edge IN 1 OUTBOUND @value0
                    @@value1, @@value2
                    LET record = DOCUMENT(
                        vertex.libraryId,
                        vertex.recordId
                    )
                    FILTER edge.attribute == @value3
                 
                
                RETURN {id: vertex._key, record, edge}
            "
`;

exports[`AttributeTreeRepo getValues Should return linked tree element 2`] = `
{
  "@value1": "core_edge_values_links",
  "@value2": "core_edge_tree_test_tree",
  "value0": "test_lib/123456",
  "value3": "test_tree_attr",
}
`;

exports[`AttributeTreeRepo getValues Should return linked tree element filtered by version 1`] = `
"FOR vertex, edge IN 1 OUTBOUND @value0
                    @@value1, @@value2
                    LET record = DOCUMENT(
                        vertex.libraryId,
                        vertex.recordId
                    )
                    FILTER edge.attribute == @value3
                 FILTER edge.version == @value4 
                LIMIT 1
                RETURN {id: vertex._key, record, edge}
            "
`;

exports[`AttributeTreeRepo sortQueryPart Should return tree filter 1`] = `
{
  "_source": [Function],
  "bindVars": {
    "@value0": "core_edge_values_links",
    "@value1": "core_edge_tree_undefined",
    "value2": "label",
    "value3": "linked",
    "value4": "ASC",
  },
  "query": "SORT FIRST(
                FOR v, e IN 1 OUTBOUND r._id
                @@value0, @@value1
                FILTER e.attribute == @value2
                LET record = DOCUMENT(
                    v.libraryId,
                    v.recordId
                )
                RETURN record.@value3
            ) @value4",
}
`;

exports[`AttributeTreeRepo updateValue Should update a advanced link value 1`] = `
"
                    LET linkedNode = DOCUMENT(@value0, @value1)
                    LET linkedRecord = DOCUMENT(linkedNode.libraryId, linkedNode.recordId)
                    UPDATE @value2 WITH @value3 IN @@value4
                    RETURN {newEdge: NEW, linkedRecord}
                "
`;

exports[`AttributeTreeRepo updateValue Should update a advanced link value 2`] = `
{
  "@value4": "core_edge_values_links",
  "value0": "categories",
  "value1": "123456",
  "value2": {
    "_key": "987654",
  },
  "value3": {
    "_from": "test_lib/12345",
    "_to": "core_nodes_test_tree/categories/123456",
    "attribute": "test_tree_attr",
    "created_by": undefined,
    "metadata": {
      "my_attribute": "metadata value",
    },
    "modified_at": 400999999,
    "modified_by": "0",
    "version": {
      "my_tree": "1",
    },
  },
}
`;

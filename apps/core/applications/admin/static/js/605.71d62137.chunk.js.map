{"version":3,"file":"static/js/605.71d62137.chunk.js","mappings":"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","sources":["components/attributes/AttributeSelector/AttributeSelectorField/AttributeSelectorField.tsx","components/attributes/AttributeSelector/AttributeSelectorField/index.ts","components/attributes/AttributeSelector/AttributeSelector.tsx","components/attributes/AttributeSelector/index.ts","components/attributes/AttributesSelectionModal/AttributesSelectionList/index.ts","components/attributes/AttributesSelectionModal/AttributesSelectionList/AttributesSelectionList.tsx","components/attributes/AttributesSelectionModal/AttributesSelectionModal.tsx","components/attributes/AttributesSelectionModal/index.ts","queries/attributes/getAvailableActionsQuery.ts","queries/attributes/getActionListQuery.ts","queries/attributes/saveAttributeActionsListMutation.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCConnectors/ALCConnectors.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCConnectors/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ItemTypes/index.js","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/stylesComps/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCCard/ActionContent/Param/Param.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCCard/ActionContent/Param/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCCard/ALCCard.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCCard/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCListSelector/ALCListSelector.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCListSelector/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/utils/doArrayIntersect.js","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCList/ALCList.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCList/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCTypeTag/ALCTypeTag.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCTypeTag/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCReserveCard/ALCReserveCard.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCReserveCard/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCReserve/ALCReserve.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCReserve/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/DragDrop/BinDragLayer.js","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/utils/actionsManipulations.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/utils/getColorRange.js","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCContainer/ALCContainer.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ALCContainer/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/ActionsListTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ActionsListTab/utils/generatingFunction.ts","queries/attributes/getAttributesEmbeddedFieldsQuery.ts","queries/attributes/saveAttributesEmbeddedFieldsQuery.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ModalCreateEmbeddedField/ModalCreateEmbeddedField.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ModalCreateEmbeddedField/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ModalRemoveEmbeddedField/ModalRemoveEmbeddedField.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ModalRemoveEmbeddedField/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EditButtons/EditButtons.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EditButtons/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsDisplay/EmbeddedFieldsDisplay.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsDisplay/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/LabelFields/LabelFields.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/LabelFields/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/SelectFormat/SelectFormat.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/SelectFormat/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/EmbeddedFieldsForm.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsForm/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsWrapper/EmbeddedFieldsWrapper.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ExpandButtons/ExpandButtons.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/ExpandButtons/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/EmbeddedFieldsTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/EmbeddedFieldsTab/index.ts","components/versionProfiles/VersionProfilesSelector/VersionProfilesSelectorField/VersionProfilesSelectorField.tsx","components/versionProfiles/VersionProfilesSelector/VersionProfilesSelectorField/index.ts","components/versionProfiles/VersionProfilesSelector/VersionProfilesSelector.tsx","components/versionProfiles/VersionProfilesSelector/index.ts","queries/libraries/getLibrariesWithAttributesQuery.ts","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/AttributeLibraries/AttributeLibrariesField/AttributeLibrariesField.tsx","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/AttributeLibraries/AttributeLibrariesField/index.ts","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/AttributeLibraries/AttributeLibraries.tsx","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/AttributeLibraries/index.ts","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/InfosForm.tsx","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosForm/index.ts","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/InfosTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/InfosTab/index.ts","components/attributes/AttributeCreationModal/AttributeCreationModal.tsx","components/attributes/AttributeCreationModal/index.ts","components/attributes/EditAttribute/EditAttributeTabs/MetadataTab/MetadataList/MetadataList.tsx","components/attributes/EditAttribute/EditAttributeTabs/MetadataTab/MetadataList/index.ts","components/attributes/EditAttribute/EditAttributeTabs/MetadataTab/MetadataTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/MetadataTab/index.ts","components/attributes/EditAttribute/EditAttributeTabs/PermissionsTab/PermissionsContent/PermissionsContent.tsx","components/attributes/EditAttribute/EditAttributeTabs/PermissionsTab/PermissionsContent/index.ts","components/attributes/EditAttribute/EditAttributeTabs/PermissionsTab/PermissionsTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/PermissionsTab/index.ts","queries/attributes/getAttributeValuesListQuery.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/LinkValuesList/LinkValuesList.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/LinkValuesList/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/StandardValuesList/DateRangeValue/DateRangeValue.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/StandardValuesList/DateRangeValue/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/StandardValuesList/StandardValuesList.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/StandardValuesList/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/TreeValuesList/TreeValuesList.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/TreeValuesList/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/ValuesListForm.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListForm/index.ts","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/ValuesListTab.tsx","components/attributes/EditAttribute/EditAttributeTabs/ValuesListTab/index.ts","components/attributes/EditAttribute/EditAttributeTabs/EditAttributeTabs.tsx","components/attributes/EditAttribute/EditAttributeTabs/index.ts","components/attributes/EditAttribute/EditAttribute.tsx","components/attributes/EditAttribute/index.ts","components/attributes/EditAttributeModal/EditAttributeModal.tsx","components/attributes/EditAttributeModal/index.ts","components/libraries/LibrariesSelectorField/LibrariesSelectorField.tsx","components/libraries/LibrariesSelectorField/index.ts","components/libraries/LibrariesSelector/LibrariesSelector.tsx","components/libraries/LibrariesSelector/index.ts","components/permissions/DefineTreePermissionsView/DefineTreePermissionsView.tsx","components/permissions/DefineTreePermissionsView/index.ts","components/shared/ConfirmedButton/index.ts","components/shared/ConfirmedButton/ConfirmedButton.tsx","components/shared/DeleteButton/DeleteButton.tsx","components/shared/DeleteButton/index.ts","components/shared/PermissionsSettings/PermissionsAttributeSelector/PermissionsAttributeSelectorList/PermissionsAttributeSelectorList.tsx","components/shared/PermissionsSettings/PermissionsAttributeSelector/PermissionsAttributeSelectorList/index.ts","components/shared/PermissionsSettings/PermissionsAttributeSelector/PermissionsAttributeSelector.tsx","components/shared/PermissionsSettings/PermissionsAttributeSelector/index.ts","components/shared/PermissionsSettings/PermissionsSettings.tsx","components/shared/PermissionsSettings/index.ts","components/trees/TreesSelectorField/index.ts","components/trees/TreesSelectorField/TreesSelectorField.tsx","components/trees/TreesSelector/TreesSelector.tsx","components/trees/TreesSelector/index.ts","queries/attributes/getAttributeById.ts","queries/attributes/getAttributesQuery.ts","queries/attributes/saveAttributeMutation.ts","queries/libraries/saveLibAttributesMutation.ts","queries/trees/getTreesQuery.ts","queries/versionProfiles/getVersionProfilesQuery.ts"],"sourcesContent":["// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {DropdownProps, Form} from 'semantic-ui-react';\nimport useLang from '../../../../hooks/useLang';\nimport {localizedLabel} from '../../../../utils';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../../_gqlTypes/GET_ATTRIBUTES';\n\ninterface IAttributeSelectorFieldProps extends DropdownProps {\n    attributes: GET_ATTRIBUTES_attributes_list[];\n}\n\nfunction AttributeSelectorField({attributes = [], ...fieldProps}: IAttributeSelectorFieldProps): JSX.Element {\n    const availableLanguages = useLang().lang;\n    const options = attributes.map(l => ({key: l.id, value: l.id, text: localizedLabel(l.label, availableLanguages)}));\n\n    if (!!fieldProps.clearable) {\n        options.unshift({key: '', value: '', text: ''});\n    }\n\n    return <Form.Dropdown {...{...fieldProps, clearable: undefined}} search options={options} />;\n}\n\nexport default AttributeSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeSelectorField from './AttributeSelectorField';\nexport default AttributeSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport React from 'react';\nimport {FormDropdownProps} from 'semantic-ui-react';\nimport {getAttributesQuery} from '../../../queries/attributes/getAttributesQuery';\nimport {\n    GET_ATTRIBUTES,\n    GET_ATTRIBUTESVariables,\n    GET_ATTRIBUTES_attributes_list_LinkAttribute\n} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport AttributeSelectorField from './AttributeSelectorField';\n\ninterface IAttributeSelectorProps extends FormDropdownProps {\n    filters?: GET_ATTRIBUTESVariables;\n    excludeReverseLinks?: boolean;\n}\n\nfunction AttributeSelector({\n    filters = {},\n    excludeReverseLinks = false,\n    ...fieldProps\n}: IAttributeSelectorProps): JSX.Element {\n    const {loading, error: queryError, data} = useQuery<GET_ATTRIBUTES, GET_ATTRIBUTESVariables>(getAttributesQuery, {\n        variables: filters\n    });\n\n    if (queryError) {\n        return <ErrorDisplay message={queryError.message} />;\n    }\n\n    let attributes = data?.attributes?.list || [];\n\n    // don't get reverse links if specified\n    if (excludeReverseLinks) {\n        attributes = attributes.filter(a => !(a as GET_ATTRIBUTES_attributes_list_LinkAttribute).reverse_link);\n    }\n\n    return <AttributeSelectorField {...fieldProps} loading={loading} attributes={attributes} />;\n}\n\nexport default AttributeSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeSelector from './AttributeSelector';\nexport default AttributeSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributesSelectionList from './AttributesSelectionList';\nexport default AttributesSelectionList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Checkbox, Table} from 'semantic-ui-react';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../../_gqlTypes/GET_ATTRIBUTES';\n\ninterface IAttributesSelectionListProps {\n    attributes: GET_ATTRIBUTES_attributes_list[];\n    selection: string[];\n    toggleSelection: (attribute: GET_ATTRIBUTES_attributes_list) => void;\n}\n\nconst AttributesSelectionList = (props: IAttributesSelectionListProps): JSX.Element => {\n    const {t} = useTranslation();\n    const {attributes, toggleSelection, selection} = props;\n\n    return (\n        <Table selectable striped>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell />\n                    <Table.HeaderCell>{t('attributes.label')}</Table.HeaderCell>\n                    <Table.HeaderCell>{t('attributes.ID')}</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {attributes.map(a => {\n                    const attrLabel = a.label !== null ? a.label.fr || a.label.en || a.id : a.id;\n                    const onClick = () => toggleSelection(a);\n                    const isSelected = selection.indexOf(a.id) !== -1;\n                    return (\n                        <Table.Row key={a.id} onClick={onClick} active={isSelected}>\n                            <Table.Cell>\n                                <Checkbox readOnly checked={isSelected} />\n                            </Table.Cell>\n                            <Table.Cell>{attrLabel}</Table.Cell>\n                            <Table.Cell>{a.id}</Table.Cell>\n                        </Table.Row>\n                    );\n                })}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default AttributesSelectionList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Modal} from 'semantic-ui-react';\nimport {getAttributesQuery} from '../../../queries/attributes/getAttributesQuery';\nimport {\n    GET_ATTRIBUTES,\n    GET_ATTRIBUTESVariables,\n    GET_ATTRIBUTES_attributes_list\n} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport Loading from '../../shared/Loading';\nimport AttributesSelectionList from './AttributesSelectionList';\n\ninterface IAttributesSelectionProps {\n    onSubmit: (selectedAttributes: string[]) => void;\n    openModal: boolean;\n    onClose: () => void;\n    selection: string[];\n    filter?: GET_ATTRIBUTESVariables;\n}\n\nconst AttributesSelectionModal = ({\n    openModal,\n    selection,\n    onClose,\n    onSubmit,\n    filter\n}: IAttributesSelectionProps): JSX.Element => {\n    const {t} = useTranslation();\n    const [pendingSelection, setPendingSelection] = useState<string[]>([]);\n    const [isSubmitPending, setIsSubmitPending] = useState(false);\n    const {loading, error, data} = useQuery<GET_ATTRIBUTES, GET_ATTRIBUTESVariables>(getAttributesQuery, {\n        variables: filter\n    });\n\n    const _handleclose = () => {\n        setPendingSelection([]);\n        onClose();\n    };\n\n    const _handleSubmit = async () => {\n        setIsSubmitPending(true);\n        await onSubmit(pendingSelection);\n        setIsSubmitPending(false);\n    };\n\n    const _toggleSelection = (selectedAttr: GET_ATTRIBUTES_attributes_list) => {\n        const newSelection =\n            pendingSelection.indexOf(selectedAttr.id) !== -1\n                ? pendingSelection.filter(aId => aId !== selectedAttr.id)\n                : [...pendingSelection, selectedAttr.id];\n\n        setPendingSelection(newSelection);\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (error) {\n        return <div className=\"error\">Error: {error.message}</div>;\n    }\n\n    if (!data || !data.attributes) {\n        return <></>;\n    }\n\n    return (\n        data.attributes && (\n            <Modal\n                size=\"small\"\n                open={openModal}\n                onClose={_handleclose}\n                centered\n                closeOnDimmerClick\n                closeOnEscape\n                closeIcon\n            >\n                <Modal.Header>{t('attributes.select_attributes')}</Modal.Header>\n                <Modal.Content scrolling>\n                    <AttributesSelectionList\n                        attributes={data.attributes.list.filter(a => selection.indexOf(a.id) === -1)}\n                        selection={pendingSelection}\n                        toggleSelection={_toggleSelection}\n                    />\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={_handleclose}>{t('admin.cancel')}</Button>\n                    <Button primary onClick={_handleSubmit} loading={isSubmitPending} disabled={isSubmitPending}>\n                        {t('admin.submit')}\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    );\n};\n\nexport default AttributesSelectionModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributesSelectionModal from './AttributesSelectionModal';\nexport default AttributesSelectionModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getAvailableActionsQuery = gql`\n    query GET_AVAILABLE_ACTIONS {\n        availableActions {\n            id\n            name\n            description\n            input_types\n            output_types\n            params {\n                name\n                type\n                description\n                required\n                default_value\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getActionListQuery = gql`\n    query GET_ACTIONS_LIST_QUERY($attId: ID!) {\n        attributes(filters: {id: $attId}) {\n            list {\n                id\n                format\n                input_types {\n                    saveValue\n                    getValue\n                    deleteValue\n                }\n                output_types {\n                    saveValue\n                    getValue\n                    deleteValue\n                }\n                actions_list {\n                    saveValue {\n                        id\n                        is_system\n                        params {\n                            name\n                            value\n                        }\n                    }\n                    getValue {\n                        id\n                        is_system\n                        params {\n                            name\n                            value\n                        }\n                    }\n                    deleteValue {\n                        id\n                        is_system\n                        params {\n                            name\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const saveAttributeActionsListMutation = gql`\n    mutation SAVE_ATTRIBUTE_ACTION_LIST($att: AttributeInput!) {\n        saveAttribute(attribute: $att) {\n            id\n            actions_list {\n                saveValue {\n                    id\n                    params {\n                        name\n                        value\n                    }\n                }\n                getValue {\n                    id\n                    params {\n                        name\n                        value\n                    }\n                }\n                deleteValue {\n                    id\n                    params {\n                        name\n                        value\n                    }\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport styled from 'styled-components';\nimport {IColorDic} from '../interfaces/interfaces';\n\ninterface IALCConnectorsProps {\n    inputs: Array<string | null>;\n    dictionnary: IColorDic;\n    isDragging?: boolean;\n}\n\ninterface IConnectorContainer {\n    isDragging: boolean;\n}\n\ninterface IConnector {\n    iColor: number[];\n}\n\nconst ConnectorsContainer = styled.div<IConnectorContainer>`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    border-radius: 3px;\n    overflow: hidden;\n    height: 5px;\n`;\n\nconst Connector = styled.div<IConnector>`\n    color: ${props => (props.iColor[2] > 200 && props.iColor[1] < 170 ? '#ffffff' : '#000000')};\n    background-color: ${props => 'rgb(' + props.iColor[0] + ',' + props.iColor[1] + ',' + props.iColor[2] + ')'};\n    flex-grow: 1;\n    text-align: center;\n`;\n\nfunction ALCConnectors({inputs, dictionnary, isDragging}: IALCConnectorsProps): JSX.Element {\n    const allInputs = Object.keys(dictionnary);\n\n    const renderInput = (input: string, i: number) => {\n        if (inputs) {\n            const color = inputs.includes(input) ? dictionnary[input] : [205, 205, 205];\n            return <Connector key={i} iColor={color} title={input} />;\n        }\n        return undefined;\n    };\n\n    return (\n        <ConnectorsContainer isDragging={!!isDragging}>\n            {allInputs && allInputs.map((input, i) => renderInput(input, i))}\n        </ConnectorsContainer>\n    );\n}\n\nexport default ALCConnectors;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCConnectors from './ALCConnectors';\nexport default ALCConnectors;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nexport default {\n    ACTION: 'action'\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport styled from 'styled-components';\n\ninterface IHiddenDiv {\n    extend: boolean;\n    hover: boolean;\n}\n\ninterface IActionRow {\n    opacity: number;\n    marginTop: string | undefined;\n    index: number | undefined;\n    isDragging: boolean | undefined;\n}\n\n//////////////////// ALCContainer\n\nexport const ExternalContainer = styled.div`\n    height: 100%;\n    display: grid;\n    grid-template-columns: 50% 50%;\n    justify-items: stretch;\n    overflow: hidden;\n`;\n\nexport const ReserveContainer = styled.div`\n    position: relative;\n    height: 100%;\n    align-self: stretch;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-right: 5px;\n`;\n\nexport const ListsContainer = styled.div`\n    position: relative;\n    max-height: 100%;\n    align-self: stretch;\n    display: flex;\n    width: calc(100% - 5px);\n    margin-left: 5px;\n`;\n\n//////////////////// ALCReserve\n\nexport const AvailableActionsContainer = styled.div`\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    padding: 2px;\n    padding-right: 5px;\n    flex: 1 1 0;\n`;\n\n//////////////////// ALCList\n\nexport const ListContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    width: 100%;\n`;\n\nexport const ListContent = styled.div`\n    padding: 0 5px;\n    position: relative;\n    flex: 1 0 0;\n    cursor: move;\n    border: 1px solid #bcbec0;\n    border-radius: 3px;\n    display: flex;\n    flex-direction: column;\n    overflow-y: auto;\n`;\n\nexport const HiddenDiv = styled.div<IHiddenDiv>`\n    min-height: ${props => (props.extend && props.hover ? '50px' : '0px')};\n    flex-grow: 1;\n    height: 'auto';\n`;\n\nexport const ALCPlaceholder = styled.div`\n    color: #c8c8c8;\n    font-size: 1.2em;\n    text-align: center;\n    padding-top: 30px;\n    margin: 3px;\n    height: 90px;\n    background: #ececec;\n    border: 2px dashed #c8c8c8;\n    border-radius: 3px;\n    box-shadow: inset 0px 0px 3px 0px #00000038;\n`;\n\n//////////////////// ALCCard\n\nexport const ActionRow = styled.div<IActionRow>`\n    background-color: ${props => (props.isDragging ? '#dddddd' : '#f9fafb')};\n    border-style: solid;\n    border-color: #dddddd;\n    border-width: 0 2px 0 2px;\n    border-radius: 3px;\n    opacity: ${props => props.opacity};\n    margin-top: ${props => props.marginTop};\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {Form, Input, Label, Segment, TextArea, TextAreaProps} from 'semantic-ui-react';\nimport {IParam, IParamInput} from '../../../interfaces/interfaces';\n\n//////////////////// INTERFACES\n\ninterface IParamProps {\n    index: number | undefined;\n    param: IParam | null;\n    actionId: number;\n    changeParam?: (param: IParamInput) => void;\n    setBlockCard: (to: boolean) => void;\n}\n\ninterface ICorrespondences {\n    [key: string]: string;\n}\n\n//////////////////// COMPONENT\n\nfunction Param({param, actionId, changeParam, setBlockCard, index}: IParamProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(param ? (param.value ? param.value : param.default_value) : null);\n\n    //////////////////// COMPONENT CONSTANTS\n\n    const correspondences: ICorrespondences = {\n        float: 'number',\n        integer: 'number',\n        boolean: 'checkbox',\n        string: 'text',\n        date: 'date'\n    };\n\n    //////////////////// SETTING VALUES ON CHANGE\n\n    const _onChange = (event: React.SyntheticEvent<HTMLInputElement>|React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        const value =\n            param && correspondences[param.type] === 'checkbox' ? target.checked.toString() : target.value.toString();\n        setCurrentValue(value);\n        if (param && changeParam) {\n            changeParam({actionId, paramName: param.name, value});\n        }\n        // e.preventDefault(); // prevent checkbox from functionning\n        event.stopPropagation();\n    };\n\n    const _onFocus = e => {\n        setBlockCard(true);\n    };\n\n    const _onBlur = () => {\n        setBlockCard(false);\n    };\n\n    const _getRenderedElement = () => {\n        if (param.type === 'textarea') {\n            return <Form>\n                <Label attached=\"top\" basic size=\"large\">{param.name}:</Label>\n                <TextArea\n                style={{marginBottom: '3px'}}\n                name={param.name}\n                placeholder={param.default_value}\n                value={currentValue ? currentValue : ''}\n                onChange={_onChange}\n                onFocus={_onFocus}\n                onBlur={_onBlur}\n                />\n            </Form>;\n        } else {\n            return <Input\n                style={{marginBottom: '3px'}}\n                fluid\n                label={{basic: true, content: `${param.name}:`}}\n                labelPosition=\"left\"\n                type={correspondences[param.type]}\n                name={param.name}\n                placeholder={param.default_value}\n                value={currentValue ? currentValue : ''}\n                checked={\n                    correspondences[param.type] === 'checkbox' && currentValue\n                        ? JSON.parse(currentValue)\n                        : false\n                }\n                onChange={_onChange}\n                onFocus={_onFocus}\n                onBlur={_onBlur}\n            />;\n        }\n    };\n\n    //////////////////// RENDER\n\n    return (\n        <div>\n            {param && (\n                <>\n                    {_getRenderedElement()}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Param;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport Param from './Param';\nexport default Param;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useEffect, useRef, useState} from 'react';\nimport {useDrag, useDrop} from 'react-dnd';\nimport {getEmptyImage} from 'react-dnd-html5-backend';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Card, Icon} from 'semantic-ui-react';\nimport Connector from '../ALCConnectors';\nimport {IAction, IColorDic, IParamInput} from '../interfaces/interfaces';\nimport itemTypes from '../ItemTypes';\nimport {ActionRow} from '../stylesComps';\nimport Param from './ActionContent/Param';\n\n//////////////////// INTERFACES\n\nexport interface ICardProps {\n    id: string;\n    action: IAction;\n    moveCard?: (id: string, isOver: boolean, to: number) => void;\n    findCard?: (id: string) => number | undefined;\n    origin: string;\n    addActionToList: (actionName: string, atIndex: number) => void;\n    removeActionFromList?: (id: string) => void;\n    marginTop?: string;\n    currentIndex?: number;\n    setCurrentIndex?: (idx: number) => void;\n    getConnectorStatus?: (indx: number, action: {}) => boolean | undefined;\n    colorTypeDictionnary: IColorDic;\n    changeParam?: (input: IParamInput) => void;\n    index?: number;\n    dragging?: boolean;\n}\n\n//////////////////// COMPONENT\n\nfunction ALCCard({\n    id,\n    action,\n    moveCard,\n    findCard,\n    origin,\n    removeActionFromList,\n    marginTop,\n    setCurrentIndex,\n    colorTypeDictionnary,\n    changeParam,\n    index,\n    dragging\n}: ICardProps) {\n    const {t} = useTranslation();\n    const container = useRef(null);\n    const [internalWidth, setWidth] = useState(null);\n    const [paramOpen, toggleParams] = useState(false);\n    const [blockedCard, setBlockCard] = useState(false);\n\n    //////////////////// DRAG AND DROP\n\n    const [{isDragging}, drag, preview] = useDrag({\n        item: {\n            type: itemTypes.ACTION,\n            id,\n            originalIndex: findCard && findCard(id),\n            origin,\n            action,\n            colorTypeDictionnary,\n            width: internalWidth\n        },\n        end(item: any, monitor) {\n            if (setCurrentIndex) {\n                setCurrentIndex(-1);\n            }\n            if (!monitor.didDrop()) {\n                if (removeActionFromList && !item.action.isSystem) {\n                    removeActionFromList(id);\n                }\n            }\n        },\n        collect: monitor => ({\n            isDragging: !!monitor.isDragging()\n        }),\n        canDrag: monitor => {\n            return !blockedCard;\n        }\n    });\n\n    const [{isOver}, drop] = useDrop({\n        accept: itemTypes.ACTION,\n        canDrop: () => false,\n        hover(item, monitor) {\n            monitor.isOver({shallow: true});\n            if (findCard && moveCard) {\n                const overIndex = findCard(id);\n                const itemCopy = JSON.parse(JSON.stringify(item));\n                if (itemCopy.origin === 'ALCReserve') {\n                    if (origin === 'ALCList') {\n                        if (setCurrentIndex) {\n                            setCurrentIndex(Number(overIndex));\n                        }\n                    }\n                    return;\n                }\n                if (overIndex !== undefined) {\n                    moveCard(itemCopy.id, isOver, overIndex);\n                }\n            }\n        },\n        collect: monitor => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    //////////////////// COMPONENT FUNCTIONS\n\n    const onRemoveButtonClicked = () => {\n        tryAndRemove(action.list_id);\n    };\n\n    const handleToggleParams = () => {\n        toggleParams(!paramOpen);\n    };\n\n    const tryAndRemove = (actId: number) => {\n        if (removeActionFromList) {\n            removeActionFromList(String(actId));\n        }\n    };\n\n    //////////////////// SETTING THE COMPONENT\n\n    useEffect(() => {\n        preview(getEmptyImage(), {captureDraggingState: false});\n        // @ts-ignore\n        setWidth(container && container.current && container.current.offsetWidth);\n    }, [preview]);\n\n    //////////////////// COMPONENT CONSTANTS (CALCULATED)\n\n    const opacity = isDragging ? 0 : 1;\n    const inputs = action.input_types;\n    const outputs = action.output_types;\n\n    //////////////////// RENDER\n\n    function renderListCard(listAction: IAction) {\n        return (\n            <ActionRow\n                ref={node => {\n                    // if the card is blocked, meaning an input field is being focused on,\n                    // return the node without crag and drop context to allow\n                    // text selection in Firefox\n                    if (blockedCard) {\n                        return node;\n                    }\n                    return drag(drop(node));\n                }}\n                opacity={opacity}\n                marginTop={marginTop}\n                index={index}\n                isDragging={dragging}\n            >\n                <Card fluid>\n                    <Connector inputs={inputs} dictionnary={colorTypeDictionnary} isDragging={dragging} />\n                    <Card.Content>\n                        <h3>{listAction.name}</h3>\n                        <p>{listAction.description}</p>\n                        {listAction.isSystem ? (\n                            <Icon\n                                style={{\n                                    position: 'absolute',\n                                    right: '6px',\n                                    top: '15px',\n                                    color: '#383939'\n                                }}\n                                name=\"lock\"\n                                title=\"action is system\"\n                            />\n                        ) : (\n                            <Button\n                                style={{\n                                    position: 'absolute',\n                                    right: '2px',\n                                    top: '10px',\n                                    fontSize: '0.8em'\n                                }}\n                                circular\n                                icon=\"trash\"\n                                onClick={onRemoveButtonClicked}\n                            />\n                        )}\n                        {listAction.params && listAction.params.length > 0 && (\n                            <div style={{textAlign: 'right'}} onClick={handleToggleParams}>\n                                <Card.Meta>\n                                    {paramOpen ? t('attributes.hide_params') : t('attributes.display_params')}\n                                    <Icon name={paramOpen ? 'triangle down' : 'triangle right'} />\n                                </Card.Meta>\n                            </div>\n                        )}\n                    </Card.Content>\n                    {paramOpen && (\n                        <Card.Content>\n                            <div style={{margin: '5px 0'}}>\n                                {listAction.params &&\n                                    listAction.params.length &&\n                                    listAction.params.map((param, i) => (\n                                        <Param\n                                            index={index}\n                                            key={i}\n                                            actionId={listAction.list_id !== undefined ? listAction.list_id : -1}\n                                            param={param}\n                                            changeParam={changeParam}\n                                            setBlockCard={setBlockCard}\n                                        />\n                                    ))}\n                            </div>\n                        </Card.Content>\n                    )}\n                    <Connector inputs={outputs} dictionnary={colorTypeDictionnary} isDragging={dragging} />\n                </Card>\n            </ActionRow>\n        );\n    }\n\n    return <div ref={container}>{renderListCard(action)}</div>;\n}\n\nexport default ALCCard;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCCard from './ALCCard';\nexport default ALCCard;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Menu} from 'semantic-ui-react';\n\ninterface IALCListSelectorProps {\n    changeSelectorTo: any;\n    currentActionListName: any;\n    connectionFailures: any;\n}\n\nfunction ALCListSelector({\n    changeSelectorTo,\n    currentActionListName,\n    connectionFailures\n}: IALCListSelectorProps): JSX.Element {\n    const disconnectedStyle = {\n        background: '#ffcccc'\n    };\n\n    const listsWithConnectionsFailures: string[] = [];\n\n    if (connectionFailures && connectionFailures.length) {\n        connectionFailures.forEach(connectionFailure => {\n            if (!listsWithConnectionsFailures.includes(connectionFailure.list)) {\n                listsWithConnectionsFailures.push(connectionFailure.list);\n            }\n        });\n    }\n\n    const changeSelectorToSaveValue = () => {\n        changeSelectorTo('saveValue');\n    };\n\n    const changeSelectorToGetValue = () => {\n        changeSelectorTo('getValue');\n    };\n\n    const changeSelectorToDeleteValue = () => {\n        changeSelectorTo('deleteValue');\n    };\n\n    return (\n        <Menu pointing secondary>\n            <Menu.Item\n                name=\"saveValue\"\n                style={listsWithConnectionsFailures.includes('saveValue') ? disconnectedStyle : {}}\n                active={currentActionListName === 'saveValue'}\n                onClick={changeSelectorToSaveValue}\n            />\n            <Menu.Item\n                name=\"getValue\"\n                style={listsWithConnectionsFailures.includes('getValue') ? disconnectedStyle : {}}\n                active={currentActionListName === 'getValue'}\n                onClick={changeSelectorToGetValue}\n            />\n            <Menu.Item\n                name=\"deleteValue\"\n                style={listsWithConnectionsFailures.includes('deleteValue') ? disconnectedStyle : {}}\n                active={currentActionListName === 'deleteValue'}\n                onClick={changeSelectorToDeleteValue}\n            />\n        </Menu>\n    );\n}\n\nexport default ALCListSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCListSelector from './ALCListSelector';\nexport default ALCListSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nexport const doArrayIntersect = (includingArr, includedArr) => {\n    let response = false;\n    includedArr.forEach(elm => {\n        if (includingArr.includes(elm)) {\n            response = true;\n        }\n    });\n    return response;\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {useDrop} from 'react-dnd';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Header} from 'semantic-ui-react';\nimport ALCCard from '../ALCCard';\nimport Connector from '../ALCConnectors';\nimport ALCListSelector from '../ALCListSelector';\nimport {IAllActionLists, IColorDic, IDragObject, IParamInput} from '../interfaces/interfaces';\nimport ItemTypes from '../ItemTypes';\nimport {ALCPlaceholder, HiddenDiv, ListContainer, ListContent} from '../stylesComps';\nimport {doArrayIntersect} from '../utils/doArrayIntersect';\n\n//////////////////// INTERFACES\n\ninterface IALCListProps {\n    actions: IAllActionLists;\n    moveCard: (id: string, isOver: boolean, to: number) => void;\n    findCard: (id: string) => number;\n    addActionToList: (actionName: string, atIndex?: number) => void;\n    removeActionFromList: (id: string) => void;\n    getNewId: () => number;\n    currentIndex: number;\n    setCurrentIndex: (index: number) => void;\n    inType: {saveValue: Array<string | null>; getValue: Array<string | null>; deleteValue: Array<string | null>};\n    outType: {saveValue: Array<string | null>; getValue: Array<string | null>; deleteValue: Array<string | null>};\n    colorTypeDictionnary: IColorDic;\n    onSelectorChange: (event: any) => void;\n    currentActionListName: string;\n    changeParam?: (input: IParamInput) => void;\n    cardOrder: any;\n    onSave: () => void;\n}\n\n//////////////////// COMPONENT\n\nfunction ALCList({\n    actions,\n    moveCard,\n    findCard,\n    addActionToList,\n    removeActionFromList,\n    getNewId,\n    currentIndex,\n    setCurrentIndex,\n    inType,\n    outType,\n    colorTypeDictionnary,\n    changeParam,\n    cardOrder,\n    onSelectorChange,\n    currentActionListName,\n    onSave\n}: IALCListProps) {\n    const {t} = useTranslation();\n    const specificCardOrder = cardOrder[currentActionListName];\n    const cards = actions[currentActionListName];\n\n    const [connectionFailures, setConnectionFailures] = useState<any[]>([]);\n\n    //////////////////// DRAG AND DROP\n\n    const [collectedProps, drop] = useDrop({\n        accept: ItemTypes.ACTION,\n        canDrop: () => {\n            return true;\n        },\n        drop: (dragObject: IDragObject) => {\n            if (dragObject.origin === 'ALCReserve') {\n                if (currentIndex >= 0) {\n                    addActionToList(dragObject.action.id, currentIndex);\n                } else {\n                    addActionToList(dragObject.action.id);\n                }\n                setCurrentIndex(-1);\n            }\n        },\n        hover: item => {\n            if (item.origin === 'ALCReserve' && !item.id) {\n                const higherId = getNewId();\n                item.id = `${higherId}`;\n            }\n        },\n        collect: monitor => {\n            return {\n                hovered: monitor.isOver(),\n                canDrop: !!monitor.canDrop()\n            };\n        }\n    });\n\n    /////// DRAG / DROP FOR THE HIDDEN DIV\n\n    const [, dropOut] = useDrop({\n        accept: ItemTypes.ACTION,\n        canDrop() {\n            return false;\n        },\n        hover(item, monitor) {\n            setCurrentIndex(-1);\n            return;\n        }\n    });\n\n    //////////////////// TYPES COMPATIBILITY FUNCTIONS\n\n    const checkConnections = useCallback(() => {\n        const connFailures: any[] = [];\n        const actionListNames = Object.keys(actions);\n        actionListNames.forEach(listName => {\n            const actionIdList = cardOrder[listName];\n            const list = actions[listName];\n            if (actionIdList && actionIdList.length) {\n                for (let i = 0; i < actionIdList.length; i++) {\n                    const actionId = actionIdList[i];\n                    const action = list[actionId];\n                    if (!action) {\n                        return;\n                    }\n                    const preceedingConnector = i === 0 ? inType[listName] : list[actionIdList[i - 1]].output_types;\n                    const followingConnector =\n                        i >= actionIdList.length - 1 ? outType[listName] : list[actionIdList[i + 1]].input_types;\n                    const topConnection = doArrayIntersect(preceedingConnector, action.input_types);\n                    const bottomConnection = doArrayIntersect(followingConnector, action.output_types);\n\n                    if (!topConnection || !bottomConnection) {\n                        connFailures.push({list: listName, id: actionId});\n                    }\n                }\n            }\n            setConnectionFailures(connFailures);\n        });\n    }, [actions, cardOrder, inType, outType]);\n\n    //////////////////// SETTING THE COMPONENT\n\n    useEffect(() => {\n        checkConnections();\n        if (!collectedProps.hovered) {\n            setCurrentIndex(-1);\n        }\n    }, [collectedProps.hovered, setCurrentIndex, cardOrder, checkConnections]);\n\n    /////////////// EXPORT\n\n    const changeSelectorTo = listName => {\n        onSelectorChange(listName);\n    };\n\n    const setConfig = e => {\n        onSave();\n        e.preventDefault();\n        return true;\n    };\n\n    //////////////////// RENDER\n\n    const renderAction = (actionId: number, i: number) => {\n        const action = cards[actionId];\n\n        if (action) {\n            return (\n                <ALCCard\n                    key={actionId}\n                    index={i}\n                    id={`${action.list_id}`}\n                    action={action}\n                    moveCard={moveCard}\n                    findCard={findCard}\n                    origin=\"ALCList\"\n                    addActionToList={addActionToList}\n                    removeActionFromList={removeActionFromList}\n                    marginTop={currentIndex === i ? '100px' : '0'}\n                    currentIndex={currentIndex}\n                    setCurrentIndex={setCurrentIndex}\n                    colorTypeDictionnary={colorTypeDictionnary}\n                    changeParam={changeParam}\n                />\n            );\n        } else {\n            return <ALCPlaceholder key={`placeholder${i}`}>Slide Actions Here</ALCPlaceholder>;\n        }\n    };\n\n    return (\n        <ListContainer ref={drop}>\n            <Header as=\"h4\">{t('attributes.action_list')}</Header>\n            <ALCListSelector\n                changeSelectorTo={changeSelectorTo}\n                currentActionListName={currentActionListName}\n                connectionFailures={connectionFailures}\n            />\n            <ListContent>\n                <div style={{width: '100%', padding: '0 1px'}}>\n                    <Connector inputs={inType[currentActionListName]} dictionnary={colorTypeDictionnary} />\n                </div>\n                {specificCardOrder && specificCardOrder.length ? (\n                    specificCardOrder.map((actionId, i) => renderAction(actionId, i))\n                ) : (\n                    <ALCPlaceholder>Slide Actions Here</ALCPlaceholder>\n                )}\n                <HiddenDiv ref={dropOut} extend={currentIndex === -1} hover={collectedProps.hovered} />\n                <div style={{width: '100%', padding: '0 1px'}}>\n                    <Connector inputs={outType[currentActionListName]} dictionnary={colorTypeDictionnary} />\n                </div>\n            </ListContent>\n            <div style={{textAlign: 'right'}}>\n                <Button\n                    primary={!connectionFailures?.length}\n                    negative={!!connectionFailures?.length}\n                    disabled={connectionFailures && connectionFailures.length > 0 ? true : false}\n                    style={{marginTop: '8px'}}\n                    className=\"ui button\"\n                    onClick={setConfig}\n                >\n                    {connectionFailures && connectionFailures.length > 0\n                        ? t('attributes.connection_problem')\n                        : t('admin.submit')}\n                </Button>\n            </div>\n        </ListContainer>\n    );\n}\n\nexport default ALCList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCList from './ALCList';\nexport default ALCList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport styled from 'styled-components';\n\ninterface IALCTypeTagProps {\n    color: any;\n    input: string;\n}\n\ninterface IInputTag {\n    color: any;\n}\n\nconst TypeTag = styled.span<IInputTag>`\n    padding: 1px 2px;\n    margin: 1px 2px;\n    color: ${props => (props.color[2] > 200 && props.color[1] < 170 ? '#ffffff' : '#000000')};\n    background-color: ${props => 'rgb(' + props.color[0] + ',' + props.color[1] + ',' + props.color[2] + ')'};\n    border-radius: 3px;\n`;\n\nfunction ALCTypeTag({color, input}: IALCTypeTagProps): JSX.Element {\n    // console.log(color)\n    return <TypeTag color={color}>{input}</TypeTag>;\n}\n\nexport default ALCTypeTag;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCTypeTag from './ALCTypeTag';\nexport default ALCTypeTag;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useEffect, useRef, useState} from 'react';\nimport {useDrag} from 'react-dnd';\nimport {getEmptyImage} from 'react-dnd-html5-backend';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Card, Icon} from 'semantic-ui-react';\nimport TypeTag from '../ALCTypeTag';\nimport {IAction, IColorDic, IParamInput} from '../interfaces/interfaces';\nimport itemTypes from '../ItemTypes';\n\ninterface IALCReserveCardProps {\n    id: string;\n    action: IAction;\n    moveCard?: (id: string, isOver: boolean, to: number) => void;\n    findCard?: (id: string) => number | undefined;\n    origin: string;\n    addActionToList: (actionName: string, atIndex: number) => void;\n    removeActionFromList?: (id: string) => void;\n    marginTop?: string;\n    currentIndex?: number;\n    setCurrentIndex?: (idx: number) => void;\n    connectionState?: {top: boolean; bottom: boolean};\n    getConnectorStatus?: (indx: number, action: {}) => boolean | undefined;\n    colorTypeDictionnary: IColorDic;\n    changeParam?: (input: IParamInput) => void;\n    index?: number;\n    dragging?: boolean;\n}\n\nfunction ALCReserveCard({\n    id,\n    action,\n    origin,\n    addActionToList,\n    removeActionFromList,\n    setCurrentIndex,\n    connectionState,\n    colorTypeDictionnary\n}: IALCReserveCardProps): JSX.Element {\n    const {t} = useTranslation();\n    const container = useRef(null);\n    const [typesOpen, toggleTypes] = useState(false);\n    const [internalWidth, setWidth] = useState(null);\n\n    const [, drag, preview] = useDrag({\n        item: {\n            type: itemTypes.ACTION,\n            id,\n            originalIndex: -1,\n            origin,\n            action,\n            connectionState,\n            colorTypeDictionnary,\n            width: internalWidth\n        },\n        end(item: any, monitor) {\n            if (setCurrentIndex) {\n                setCurrentIndex(-1);\n            }\n            if (!monitor.didDrop()) {\n                if (removeActionFromList && !item.action.isSystem) {\n                    removeActionFromList(id);\n                }\n            }\n        },\n        collect: monitor => ({\n            isDragging: !!monitor.isDragging()\n        })\n    });\n\n    useEffect(() => {\n        preview(getEmptyImage(), {captureDraggingState: false});\n        // @ts-ignore\n        setWidth(container && container.current && container.current.offsetWidth);\n    }, [preview]);\n\n    const handleToggleTypes = () => {\n        toggleTypes(!typesOpen);\n    };\n\n    const onAddButtonClicked = () => {\n        tryAndAdd(action.id, -1);\n    };\n\n    const tryAndAdd = (actId: string, atIndex: number) => {\n        if (addActionToList) {\n            addActionToList(actId, atIndex);\n        }\n    };\n\n    const inputs = action.input_types;\n    const outputs = action.output_types;\n\n    return (\n        <div ref={container}>\n            <div ref={node => drag(node)} style={{paddingBottom: '5px'}}>\n                <Card fluid>\n                    <Card.Content>\n                        <Card.Header>{action.name}</Card.Header>\n                        <Card.Description>{action.description}</Card.Description>\n                        <Button\n                            style={{\n                                position: 'absolute',\n                                right: '2px',\n                                top: '5px',\n                                fontSize: '0.8em'\n                            }}\n                            circular\n                            icon=\"add\"\n                            onClick={onAddButtonClicked}\n                        />\n                        <div\n                            style={{\n                                textAlign: 'right'\n                            }}\n                            onClick={handleToggleTypes}\n                        >\n                            <Card.Meta>\n                                {typesOpen ? t('attributes.hide_types') : t('attributes.display_types')}\n                                <Icon name={typesOpen ? 'triangle down' : 'triangle right'} />\n                            </Card.Meta>\n                        </div>\n                    </Card.Content>\n                    {typesOpen && (\n                        <Card.Content extra>\n                            <div style={{padding: 0}}>\n                                <Icon name=\"triangle right\" />\n                                <span>{t('attributes.input_types')}: </span>\n                                {inputs &&\n                                    colorTypeDictionnary[inputs[0]] &&\n                                    inputs.map((input, i) => (\n                                        <TypeTag key={i} color={colorTypeDictionnary[input]} input={input} />\n                                    ))}\n                            </div>\n                            <div style={{marginTop: '5px'}}>\n                                <Icon name=\"triangle left\" />\n                                <span>{t('attributes.output_types')}: </span>\n                                {outputs &&\n                                    colorTypeDictionnary[outputs[0]] &&\n                                    outputs.map((output, i) => (\n                                        <TypeTag key={i} color={colorTypeDictionnary[output]} input={output} />\n                                    ))}\n                            </div>\n                        </Card.Content>\n                    )}\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nexport default ALCReserveCard;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCReserveCard from './ALCReserveCard';\nexport default ALCReserveCard;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Header} from 'semantic-ui-react';\nimport ALCCard from '../ALCReserveCard';\nimport {IAction, IColorDic, IReserveAction} from '../interfaces/interfaces';\nimport {AvailableActionsContainer} from '../stylesComps';\n\n//////////////////// INTERFACES\n\ninterface IALCReserveProps {\n    actions: IReserveAction[] | null;\n    setCurrentIndex: (index: number) => void;\n    colorTypeDictionnary: IColorDic;\n    addActionToList: (actionName: string, atIndex: number) => void;\n}\n\n//////////////////// COMPONENT\n\nfunction ALCReserve({actions, setCurrentIndex, colorTypeDictionnary, addActionToList}: IALCReserveProps): JSX.Element {\n    const {t} = useTranslation();\n    //////////////////// RENDER\n\n    const renderActions = (action: IReserveAction, i: number) => {\n        const actualAction: IAction = {...action, list_id: -1, isSystem: false};\n\n        return (\n            <ALCCard\n                key={i}\n                id={`${i}`}\n                action={actualAction}\n                addActionToList={addActionToList}\n                origin=\"ALCReserve\"\n                setCurrentIndex={setCurrentIndex}\n                colorTypeDictionnary={colorTypeDictionnary}\n            />\n        );\n    };\n\n    return (\n        <>\n            <Header as=\"h4\">{t('attributes.available_actions')}</Header>\n            <AvailableActionsContainer>\n                {actions && actions.length > 0\n                    ? actions.map((action: IReserveAction, i: number) => renderActions(action, i))\n                    : t('attributes.no_available_action')}\n            </AvailableActionsContainer>\n        </>\n    );\n}\n\nexport default ALCReserve;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCReserve from './ALCReserve';\nexport default ALCReserve;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {DragLayer} from 'react-dnd';\nimport ALCCard from '../ALCCard';\n\nconst layerStyles = {\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: 100,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%'\n};\n\nconst getFieldStyle = isDragging => {\n    const style = {\n        //width: 300,\n        maxWidth: 300\n    };\n    style.opacity = isDragging ? 0.8 : 1;\n    return style;\n};\n\nconst getItemStyles = props => {\n    const {currentOffset} = props;\n    if (!currentOffset) {\n        return {\n            display: 'none'\n        };\n    }\n\n    const {x, y} = currentOffset;\n\n    const transform = `translate(${x}px, ${y}px)`;\n\n    return {\n        transform,\n        WebkitTransform: transform\n    };\n};\n\nconst collect = monitor => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    currentOffset: monitor.getSourceClientOffset(),\n    initialOffset: monitor.getInitialClientOffset(),\n    diff: monitor.getDifferenceFromInitialOffset(),\n    isDragging: monitor.isDragging()\n});\n\nclass BinDragLayer extends Component {\n    static propTypes = {\n        item: PropTypes.object,\n        itemType: PropTypes.string,\n        initialOffset: PropTypes.shape({\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired\n        }),\n        currentOffset: PropTypes.shape({\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired\n        }),\n        isDragging: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {};\n\n    renderItem = (type, item) => {\n        if (item) {\n            const connectionState =\n                item.connectionState === undefined ? 'neutral' : item.connectionState ? 'connected' : 'disconnected';\n            const colorTypeDictionnary = item.colorTypeDictionnary;\n            const width = item.width;\n            return (\n                <div style={{pointerEvents: 'none', width: `${width}px`}}>\n                    <ALCCard\n                        key={item.id}\n                        id={`${item.id}`}\n                        action={item.action}\n                        findCard={() => {\n                            return {index: item.id};\n                        }}\n                        origin={item.origin}\n                        connectionState={connectionState}\n                        colorTypeDictionnary={colorTypeDictionnary}\n                        dragging\n                    />\n                </div>\n            );\n        }\n    };\n\n    render() {\n        const {item, itemType, isDragging} = this.props;\n        return (\n            <div style={layerStyles}>\n                <div style={getItemStyles(this.props)}>\n                    <div style={getFieldStyle(isDragging)}>{this.renderItem(itemType, item)}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DragLayer(collect)(BinDragLayer);\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {cloneDeep} from 'lodash';\nimport {GET_ACTIONS_LIST_QUERY_attributes_list_actions_list} from '../../../../../../_gqlTypes/GET_ACTIONS_LIST_QUERY';\nimport {IAction, IActionConfig, IReserveAction} from '../interfaces/interfaces';\nimport {getColorsRangeFrom} from './getColorRange';\n\n//////////////////// FUNCTIONS TO INITIATE THE STATE\n\nexport enum actionListNames {\n    saveValue = 'saveValue',\n    getValue = 'getValue',\n    deleteValue = 'deleteValue'\n}\n\nexport const getCurrentList = (\n    sourceConfigs: GET_ACTIONS_LIST_QUERY_attributes_list_actions_list,\n    availableActions: IReserveAction[] | null\n) => {\n    const currentList: any = {saveValue: {higherId: 0}, getValue: {higherId: 0}, deleteValue: {higherId: 0}};\n\n    if (sourceConfigs && Object.keys(sourceConfigs).length > 0) {\n        Object.keys(actionListNames).forEach(actionListName => {\n            const sourceConfig = sourceConfigs[actionListName];\n            const config = {higherId: 0};\n            if (availableActions) {\n                if (sourceConfig && sourceConfig.length) {\n                    sourceConfig.forEach((configAct, i) => {\n                        const action = getActionFromConfig(configAct, availableActions, i);\n                        action.list_id = i;\n                        config[action.list_id] = action;\n                        config.higherId = i;\n                    });\n                }\n            }\n            currentList[actionListName] = config;\n        });\n    }\n    return currentList;\n};\n\nexport const getActionFromConfig = (configAct: IActionConfig, availableActions: IReserveAction[], id: number) => {\n    const action: IAction = {\n        ...cloneDeep(availableActions.filter(act => act.id === configAct.id)[0]),\n        list_id: id,\n        isSystem: configAct.is_system\n    };\n\n    if (action.params && action.params.length) {\n        action.params.forEach(param => {\n            if (param) {\n                if (configAct.params && configAct.params.length) {\n                    const [configParam] = configAct.params.filter(\n                        (uniqueConfigParam: any) => param.name === uniqueConfigParam.name\n                    );\n\n                    if (configParam) {\n                        param.value = configParam.value;\n                    }\n                }\n            }\n        });\n    }\n    return action;\n};\n\nexport const getCurrentListOrder = (currentConfig: GET_ACTIONS_LIST_QUERY_attributes_list_actions_list) => {\n    const currentListOrder = {saveValue: [], getValue: [], deleteValue: []};\n    Object.keys(actionListNames).forEach(actionListName => {\n        const returnArr: number[] = [];\n        if (currentConfig[actionListName] && currentConfig[actionListName].length) {\n            currentConfig[actionListName].forEach((act, i) => {\n                returnArr.push(i);\n            });\n        }\n        currentListOrder[actionListName] = returnArr;\n    });\n    return currentListOrder;\n};\n\nexport const getColorDictionnary = (availableActions: IReserveAction[] | null) => {\n    const types = new Set<string>();\n    if (availableActions) {\n        availableActions.forEach((act: IReserveAction) => {\n            act.input_types.forEach(t => types.add(t));\n            act.output_types.forEach(t => types.add(t));\n        });\n    }\n    const colors = getColorsRangeFrom(types.size);\n    const typesArr = Array.from(types);\n    return typesArr.reduce((obj, currentValue, currentIndex) => {\n        obj[currentValue] = colors[currentIndex];\n        return obj;\n    }, {});\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nexport const getColorsRangeFrom = nbr => {\n    let sliceStart = 0;\n    if (nbr < 5) {\n        sliceStart = 5 - nbr;\n        nbr = 5;\n    }\n\n    const currentColor = [255, 0, 0];\n    const returnArr = [];\n    const step = Math.floor((255 * 5) / nbr);\n    let direction = 1; // change each time from 1 to -1 (* -1)\n    let rank = 1; // change everytime with -1 if (< 0) => = 2\n\n    const changeDirectionAndRank = () => {\n        direction = direction * -1;\n        rank = rank - 1;\n        if (rank < 0) {\n            rank = 2;\n        }\n    };\n\n    while (returnArr.length < nbr) {\n        currentColor[rank] += step * direction;\n        if (direction === 1 ? currentColor[rank] > 255 : currentColor[rank] < 0) {\n            changeDirectionAndRank();\n        } else {\n            returnArr.push([...currentColor]);\n        }\n    }\n    return returnArr.slice(sliceStart);\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation, useQuery} from '@apollo/client';\nimport {cloneDeep} from 'lodash';\nimport React, {useEffect, useState} from 'react';\nimport {getActionListQuery} from '../../../../../../queries/attributes/getActionListQuery';\nimport {saveAttributeActionsListMutation} from '../../../../../../queries/attributes/saveAttributeActionsListMutation';\nimport {\n    GET_ACTIONS_LIST_QUERY,\n    GET_ACTIONS_LIST_QUERY_attributes_list_input_types,\n    GET_ACTIONS_LIST_QUERY_attributes_list_output_types\n} from '../../../../../../_gqlTypes/GET_ACTIONS_LIST_QUERY';\nimport Loading from '../../../../../shared/Loading';\nimport ALCList from '../ALCList';\nimport ALCReserve from '../ALCReserve';\nimport BinDragLayer from '../DragDrop/BinDragLayer';\nimport {\n    IAction,\n    IActionConfig,\n    IAllActionLists,\n    IColorDic,\n    ICurrActionListOrder,\n    IParam,\n    IParamConfig,\n    IParamInput,\n    IReserveAction\n} from '../interfaces/interfaces';\nimport {ExternalContainer, ListsContainer, ReserveContainer} from '../stylesComps';\nimport {actionListNames, getColorDictionnary, getCurrentList, getCurrentListOrder} from '../utils/actionsManipulations';\n\n//////////////////// INTERFACES\n\ninterface IALCContainerProps {\n    availableActions: IReserveAction[] | null;\n    attribute: any;\n}\n\ninterface IAttributeTypes {\n    inTypes: GET_ACTIONS_LIST_QUERY_attributes_list_input_types;\n    outTypes: GET_ACTIONS_LIST_QUERY_attributes_list_output_types;\n}\n\n//////////////////// COMPONENT\n\nfunction ALCContainer({availableActions = [], attribute}: IALCContainerProps): JSX.Element {\n    // {saveValue: {higherId: 0}, getValue: {higherId: 0}, deleteValue: {higherId: 0}}\n    const [currentActionListName, setCurrentActionListName] = useState('saveValue');\n\n    const [attributeTypes, setAttributeTypes] = useState<IAttributeTypes>({\n        inTypes: {saveValue: [], getValue: [], deleteValue: []},\n        outTypes: {saveValue: [], getValue: [], deleteValue: []}\n    });\n\n    const [currentActionList, setCurrentList] = useState<IAllActionLists>({\n        saveValue: {higherId: 0},\n        getValue: {higherId: 0},\n        deleteValue: {higherId: 0}\n    });\n    const [currentActionListOrder, setcurrentActionListOrder] = useState<ICurrActionListOrder>({\n        saveValue: [],\n        getValue: [],\n        deleteValue: []\n    });\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [colorTypeDictionnary, setColorTypeDictionnary] = useState<IColorDic>({});\n    const {loading, data} = useQuery<GET_ACTIONS_LIST_QUERY>(getActionListQuery, {\n        variables: {attId: attribute ? attribute.id : undefined}\n    });\n\n    const [saveAttributeActionsList, {loading: loadingSave}] = useMutation(\n        saveAttributeActionsListMutation,\n        {onError: e => console.error(e.message)} // TODO: handle error properly\n    );\n\n    useEffect(() => {\n        const currentConfig =\n            data && data.attributes && data.attributes.list[0] && data.attributes.list[0].actions_list\n                ? data.attributes.list[0].actions_list\n                : {[actionListNames.saveValue]: [], [actionListNames.getValue]: [], [actionListNames.deleteValue]: []};\n        const attr = data && data.attributes && data.attributes.list[0];\n\n        if (attr) {\n            const inTypes = attr.input_types;\n            const outTypes = attr.output_types;\n            setAttributeTypes({inTypes, outTypes});\n        }\n\n        setCurrentList(getCurrentList(currentConfig, availableActions));\n        setcurrentActionListOrder(getCurrentListOrder(currentConfig));\n        setColorTypeDictionnary(getColorDictionnary(availableActions));\n    }, [data, availableActions]);\n\n    //////////////////// INDEX AND OBJECT MANIPULATIONS\n\n    const getNewId = () => {\n        return currentActionList ? currentActionList[currentActionListName].higherId + 1 : 0;\n    };\n\n    const getActionFromId = (id: string, listId: number = currentActionList[currentActionListName].higherId + 1) => {\n        if (!availableActions) {\n            return {list_id: -1};\n        } else {\n            const act: IAction = {\n                ...cloneDeep(availableActions.filter(action => action.id === id)[0]),\n                list_id: listId,\n                isSystem: false\n            };\n            return act;\n        }\n    };\n\n    //////////////////// CARDS (ACTIONS) MANIPULATION\n\n    const moveCard = (id: string, isOver: boolean, atIndex: number) => {\n        if (isOver) {\n            return;\n        }\n        let index = -1;\n        let cardOrderCopy: ICurrActionListOrder;\n        if (currentActionListOrder) {\n            cardOrderCopy = {...currentActionListOrder};\n            index = currentActionListOrder[currentActionListName].indexOf(Number(id));\n            cardOrderCopy[currentActionListName][index] = currentActionListOrder[currentActionListName][atIndex];\n            cardOrderCopy[currentActionListName][atIndex] = Number(id);\n            setcurrentActionListOrder(cardOrderCopy);\n        }\n    };\n\n    const findCard = (id: string) => {\n        if (currentActionListOrder) {\n            return currentActionListOrder[currentActionListName].indexOf(Number(id));\n        }\n        return -1;\n    };\n\n    const addActionToList = (actionId: string, atIndex?: number) => {\n        const action = getActionFromId(actionId);\n\n        const currentActionListCopy = cloneDeep(currentActionList);\n\n        currentActionListCopy[currentActionListName].higherId = action.list_id;\n        currentActionListCopy[currentActionListName][action.list_id] = action;\n        const index = atIndex === undefined || atIndex === -1 ? action.list_id : atIndex;\n        setCurrentList(currentActionListCopy);\n\n        if (currentActionListOrder) {\n            const currentActionListOrderCopy = {...currentActionListOrder};\n            currentActionListOrderCopy[currentActionListName].splice(index, 0, action.list_id);\n            setcurrentActionListOrder(currentActionListOrderCopy);\n        }\n    };\n\n    const removeActionFromList = (id: string) => {\n        const currentActionListCopy = cloneDeep(currentActionList);\n        delete currentActionListCopy[currentActionListName][id];\n\n        const currentActionListOrderCopy = {...currentActionListOrder};\n\n        let listOrderCopy: number[] = [];\n        if (currentActionListOrder) {\n            listOrderCopy = currentActionListOrder[currentActionListName].filter(\n                actionId => Number(actionId) !== Number(id)\n            );\n            currentActionListOrderCopy[currentActionListName] = listOrderCopy;\n        }\n\n        setCurrentList(currentActionListCopy);\n        setcurrentActionListOrder(currentActionListOrderCopy);\n    };\n\n    const changeParam = ({actionId, paramName, value}: IParamInput) => {\n        if (currentActionList && currentActionListName) {\n            const act = currentActionList[currentActionListName][actionId];\n            if (act && act.params) {\n                const actParam = act.params.filter((param: IParam | null) => param && param.name === paramName);\n                if (actParam[0]) {\n                    actParam[0].value = value;\n                }\n            }\n        }\n    };\n\n    /////////////// SAVE CONFIG FUNCTIONS\n\n    const extractParamConfig = (param: IParam): IParamConfig => {\n        return {\n            name: param.name,\n            value: param.value ? param.value : param.default_value\n        };\n    };\n\n    const getConfigActionFromAction = act => {\n        const params = act.params && act.params.length ? act.params.map(param => extractParamConfig(param)) : null;\n        return {\n            id: act.id,\n            params\n        };\n    };\n\n    const onSave = () => {\n        const exportableConfig = {saveValue: [], getValue: [], deleteValue: []};\n\n        const actionListsNames = Object.keys(currentActionList);\n\n        actionListsNames.forEach(actionListName => {\n            const actions: IActionConfig[] = [];\n            currentActionListOrder[actionListName].forEach(actId => {\n                const action = getConfigActionFromAction(currentActionList[actionListName][actId]);\n                actions.push(action);\n            });\n            exportableConfig[actionListName] = actions;\n        });\n\n        if (exportableConfig.saveValue || exportableConfig.getValue || exportableConfig.deleteValue) {\n            saveAttributeActionsList({\n                variables: {\n                    att: {\n                        id: attribute.id,\n                        type: attribute.type,\n                        actions_list: {\n                            saveValue: exportableConfig.saveValue ? exportableConfig.saveValue : null,\n                            getValue: exportableConfig.getValue ? exportableConfig.getValue : null,\n                            deleteValue: exportableConfig.deleteValue ? exportableConfig.deleteValue : null\n                        }\n                    }\n                }\n            });\n        }\n    };\n\n    /////////////// ACTION LIST SELECTOR\n\n    const onSelectorChange = listName => {\n        setCurrentActionListName(listName);\n    };\n\n    //////////////////// RENDER\n\n    return (\n        <ExternalContainer>\n            <BinDragLayer />\n            <ReserveContainer>\n                {availableActions && (\n                    <ALCReserve\n                        actions={availableActions}\n                        setCurrentIndex={setCurrentIndex}\n                        addActionToList={addActionToList}\n                        colorTypeDictionnary={colorTypeDictionnary}\n                    />\n                )}\n            </ReserveContainer>\n            <ListsContainer>\n                {loading || loadingSave ? (\n                    <Loading />\n                ) : (\n                    <ALCList\n                        actions={currentActionList}\n                        cardOrder={currentActionListOrder}\n                        moveCard={moveCard}\n                        findCard={findCard}\n                        addActionToList={addActionToList}\n                        removeActionFromList={removeActionFromList}\n                        getNewId={getNewId}\n                        currentIndex={currentIndex}\n                        setCurrentIndex={setCurrentIndex}\n                        inType={attributeTypes.inTypes}\n                        outType={attributeTypes.outTypes}\n                        colorTypeDictionnary={colorTypeDictionnary}\n                        changeParam={changeParam}\n                        onSelectorChange={onSelectorChange}\n                        currentActionListName={currentActionListName}\n                        onSave={onSave}\n                    />\n                )}\n            </ListsContainer>\n        </ExternalContainer>\n    );\n}\n\nexport default ALCContainer;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ALCContainer from './ALCContainer';\nexport default ALCContainer;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport React from 'react';\nimport {getAvailableActionsQuery} from '../../../../../queries/attributes/getAvailableActionsQuery';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../../../_gqlTypes/GET_ATTRIBUTES';\nimport {GET_AVAILABLE_ACTIONS} from '../../../../../_gqlTypes/GET_AVAILABLE_ACTIONS';\nimport Loading from '../../../../shared/Loading';\nimport ALCContainer from './ALCContainer';\nimport {IReserveAction} from './interfaces/interfaces';\nimport {generateReserveActionFrom} from './utils/generatingFunction';\n\ninterface IActionListConfigurerProps {\n    attribute: GET_ATTRIBUTES_attributes_list;\n}\n\nfunction ActionsListTab({attribute}: IActionListConfigurerProps): JSX.Element {\n    const {loading, error, data} = useQuery<GET_AVAILABLE_ACTIONS, GET_ATTRIBUTES_attributes_list>(\n        getAvailableActionsQuery\n    );\n\n    if (loading) {\n        return <Loading />;\n    }\n    if (error) {\n        return <p>Error: {error.message}</p>;\n    }\n    if (!data) {\n        return <></>;\n    }\n\n    const actions: IReserveAction[] = [];\n    // const inType = attribute.format ? getTypeFromFormat(attribute.format) : '';\n\n    if (data.availableActions) {\n        data.availableActions.forEach(act => {\n            const action: IReserveAction | null = generateReserveActionFrom(act);\n            if (action) {\n                actions.push(action);\n            }\n        });\n    }\n\n    return <ALCContainer availableActions={actions} attribute={attribute} />;\n}\n\nexport default ActionsListTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ActionsListTab from './ActionsListTab';\nexport default ActionsListTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\n\nconst generateReserveParam = param => {\n    return {...param, value: param.value ? param.value : param.default_value};\n};\n\nexport const generateReserveActionFrom = action => {\n    const newAction = {...action};\n    if (newAction.params && newAction.params.length) {\n        newAction.params = newAction.params.map(param => {\n            return {...param, value: param.value ? param.value : param.default_value};\n        });\n    } else {\n        newAction.params = null;\n    }\n    return newAction;\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gqlUnchecked} from '../../utils';\n\nexport const getAttributesEmbeddedFieldsQuery = (depth: number) => {\n    const query = gqlUnchecked`\n        query GET_EMBEDDED_FIELDS_QUERY($attId: ID!) {\n            attributes(filters: {id: $attId}) {\n                list {\n                    id\n                    label\n                    format\n                    ... on StandardAttribute {\n                        ${_getEmbeddedFields(depth)}\n                    }\n                }\n            }\n        }\n    `;\n    return query;\n};\n\nconst _getEmbeddedFields = (level: number) => {\n    const depth = level - 1;\n    return `\n        embedded_fields {\n            validation_regex\n            id\n            format\n            label\n            ${level > 0 ? _getEmbeddedFields(depth) : ''}\n        }\n    `;\n};\n\n/**\n * Generate a query with [depth] nested embedded_fields\n * for the attribute given\n *\n * @param depth\n */\nexport const generateEmbeddedFields = (depth: number) => {\n    const query = `\n        mutation GENERATE_EMBEDDED_FIELDS_QUERY($attId: ID!) {\n            saveAttribute(attribute: {id: $attId, ${_createEmbeddedFields(depth)}\n            }) {\n                id\n            }\n        }`;\n\n    return gqlUnchecked`\n        ${query}\n    `;\n};\n\nconst _createEmbeddedFields = (level: number) => {\n    const depth = level - 1;\n    return `\n        embedded_fields: [\n            {\n                id: \"field_1_${level}\"\n                format: text,\n                label: {\n                    fr: \"Champ 1 - ${level}\"\n                    en: \"Field 1 - ${level}\"\n                }\n            },\n            {\n                id: \"field_2_${level}\"\n                format: extended,\n                label: {\n                    fr: \"Champ 2 - ${level}\"\n                    en: \"Field 2 - ${level}\"\n                }\n                ${level > 0 ? _createEmbeddedFields(depth) : ''}\n            },\n            {\n                id: \"field_3_${level}\"\n                format: extended,\n                label: {\n                    fr: \"Champ 3 - ${level}\"\n                    en: \"Field 3 - ${level}\"\n                }\n            }\n        ]\n    `;\n};\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const saveAttributesEmbeddedFieldsQuery = gql`\n    mutation SAVE_ATTRIBUTE_EMBEDDED_FIELDS($attribute: AttributeInput) {\n        saveAttribute(attribute: $attribute) {\n            id\n            label\n            format\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {TFunction} from 'i18next';\nimport React, {useState} from 'react';\nimport {Button, Confirm, Input} from 'semantic-ui-react';\n\ninterface IModalCreateEmbeddedFieldProps {\n    attrId: string;\n    add: (newId: string) => Promise<void>;\n    t: TFunction;\n}\n\nfunction ModalCreateEmbeddedField({attrId, add, t}: IModalCreateEmbeddedFieldProps) {\n    const [show, setShow] = useState<boolean>(false);\n    const [newId, setNewId] = useState<string>('');\n\n    const _show = () => setShow(true);\n    const _close = () => setShow(false);\n\n    const _handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setNewId(e.target.value);\n    };\n\n    const _add = () => {\n        if (newId.length) {\n            add(newId);\n            _close();\n            setNewId('');\n        }\n    };\n\n    return (\n        <>\n            <Button onClick={_show} basic positive icon=\"plus\" />\n            <Confirm\n                open={show}\n                header={t('attributes.new_embedded_fields', {attrId})}\n                content={<Input type=\"text\" label={t('attributes.ID')} value={newId} onChange={_handleChange} />}\n                confirmButton={<Button disabled={!newId.length}>{t('admin.submit')}</Button>}\n                cancelButton={<Button>{t('admin.cancel')}</Button>}\n                onCancel={_close}\n                onConfirm={_add}\n            />\n        </>\n    );\n}\n\nexport default ModalCreateEmbeddedField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ModalCreateEmbeddedField from './ModalCreateEmbeddedField';\nexport default ModalCreateEmbeddedField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {TFunction} from 'i18next';\nimport React, {useState} from 'react';\nimport {Button, Confirm} from 'semantic-ui-react';\n\ninterface IModalRemoveEmbeddedFieldProps {\n    remove: () => Promise<void>;\n    t: TFunction;\n}\n\nfunction ModalRemoveEmbeddedField({remove, t}: IModalRemoveEmbeddedFieldProps) {\n    const [show, setShow] = useState<boolean>(false);\n\n    const _show = () => setShow(true);\n    const _close = () => setShow(false);\n\n    const _remove = () => {\n        remove();\n        _close();\n    };\n\n    return (\n        <>\n            <Button onClick={_show} basic negative icon=\"remove\" />\n            <Confirm\n                open={show}\n                content={t('attributes.remove_embedded_fields')}\n                onCancel={_close}\n                onConfirm={_remove}\n                confirmButton={<Button>{t('admin.submit')}</Button>}\n                cancelButton={<Button>{t('admin.cancel')}</Button>}\n            />\n        </>\n    );\n}\n\nexport default ModalRemoveEmbeddedField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ModalRemoveEmbeddedField from './ModalRemoveEmbeddedField';\nexport default ModalRemoveEmbeddedField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {TFunction} from 'i18next';\nimport React from 'react';\nimport {Button} from 'semantic-ui-react';\nimport {AttributeFormat} from '../../../../../../_gqlTypes/globalTypes';\nimport {IFlatItem} from '../EmbeddedFieldsTab';\nimport ModalCreateEmbeddedField from '../ModalCreateEmbeddedField';\nimport ModalRemoveEmbeddedField from '../ModalRemoveEmbeddedField';\n\ninterface IEditButtonsProps {\n    id: string;\n    format: string;\n    flatItem: IFlatItem | undefined;\n    isRoot: boolean;\n    expend: () => void;\n    add: (newId: string) => Promise<void>;\n    remove: () => Promise<void>;\n    t: TFunction;\n}\n\nfunction EditButtons({id, format, flatItem, isRoot, expend, add, remove, t}: IEditButtonsProps): JSX.Element {\n    return (\n        <Button.Group\n            style={{\n                position: 'relative',\n                left: '1rem',\n                top: '-1rem'\n            }}\n        >\n            {!isRoot && (\n                <Button basic primary onClick={expend} icon={!flatItem?.displayForm ? 'angle down' : 'angle up'} />\n            )}\n            {format === AttributeFormat.extended && <ModalCreateEmbeddedField attrId={id} add={add} t={t} />}\n            {!isRoot && <ModalRemoveEmbeddedField remove={remove} t={t} />}\n        </Button.Group>\n    );\n}\n\nexport default EditButtons;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EditButtons from './EditButtons';\n\nexport default EditButtons;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Container, Header} from 'semantic-ui-react';\nimport {IEmbeddedFields} from '../../../../../../_types/embeddedFields';\n\ninterface IEmbeddedFieldsDisplayProps {\n    attribute: IEmbeddedFields;\n}\n\nfunction EmbeddedFieldsDisplay({attribute}: IEmbeddedFieldsDisplayProps) {\n    return (\n        <Container\n            fluid\n            textAlign=\"center\"\n            style={{\n                padding: '1rem',\n                height: '100%',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }}\n        >\n            <Header as=\"h5\">{attribute.id}</Header>\n        </Container>\n    );\n}\n\nexport default EmbeddedFieldsDisplay;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EmbeddedFieldsDisplay from './EmbeddedFieldsDisplay';\nexport default EmbeddedFieldsDisplay;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {TFunction} from 'i18next';\nimport React from 'react';\nimport {Form, InputOnChangeData} from 'semantic-ui-react';\nimport {AvailableLanguage} from '../../../../../../../_gqlTypes/globalTypes';\nimport {ILabel} from '../../../../../../../_types/embeddedFields';\nimport {IFormValues} from '../EmbeddedFieldsForm';\n\ninterface ILabelFieldsProps {\n    formValues: IFormValues;\n    setFormValues: React.Dispatch<React.SetStateAction<IFormValues>>;\n    onChange: (label: ILabel) => void;\n    t: TFunction;\n    save: (form: IFormValues) => void;\n}\n\nfunction LabelFields({formValues, setFormValues, onChange, t, save}: ILabelFieldsProps) {\n    const label: ILabel =\n        formValues.label ??\n        Object.keys(AvailableLanguage as object).reduce((acc, labelIndex) => ({...acc, [labelIndex]: ''}), {});\n\n    const fields = Object.keys(AvailableLanguage).map(labelIndex => {\n        const handleOnChangeLabel = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n            const newLabel = {\n                ...label,\n                [labelIndex]: data.value.toString() ?? ''\n            };\n\n            setFormValues(v => ({\n                ...v,\n                label: newLabel\n            }));\n\n            onChange(newLabel);\n        };\n\n        const _save = () => {\n            save(formValues);\n        };\n\n        return (\n            <Form.Input\n                name={`label-${labelIndex}`}\n                label={`${t('attributes.label')} ${labelIndex}`}\n                key={labelIndex}\n                value={label[labelIndex]}\n                onChange={handleOnChangeLabel}\n                onBlur={_save}\n            />\n        );\n    });\n\n    return <Form.Group>{fields}</Form.Group>;\n}\n\nexport default LabelFields;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport LabelFields from './LabelFields';\nexport default LabelFields;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {TFunction} from 'i18next';\nimport React, {useState} from 'react';\nimport {Confirm, DropdownProps, Form} from 'semantic-ui-react';\nimport {AttributeFormat} from '../../../../../../../_gqlTypes/globalTypes';\nimport {IFormValues} from '../EmbeddedFieldsForm';\n\ninterface ISelectFormatProps {\n    formValues: IFormValues;\n    hasChild: boolean;\n    onChange: (newFormat: string) => void;\n    t: TFunction;\n    save: (form: IFormValues) => void;\n}\n\nfunction SelectFormat({formValues, hasChild, onChange, t, save}: ISelectFormatProps) {\n    const [show, setShow] = useState<boolean>(false);\n    const [format, setFormat] = useState<string>(formValues.format);\n\n    const _onChange = (event: React.SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n        const newFormat = data.value?.toString() ?? '';\n        setFormat(newFormat);\n\n        if (format === AttributeFormat.extended && data.value !== AttributeFormat.extended && hasChild) {\n            setShow(true);\n        } else {\n            onChange(newFormat);\n            save({...formValues, format: newFormat});\n        }\n    };\n\n    const _cancel = () => {\n        setShow(false);\n    };\n\n    const _confirm = () => {\n        onChange(format);\n        save({...formValues, format});\n        setShow(false);\n    };\n\n    return (\n        <>\n            <Form.Select\n                label={t('attributes.format')}\n                name=\"format\"\n                options={Object.keys(AttributeFormat).map(f => ({\n                    text: t('attributes.formats.' + f),\n                    value: f\n                }))}\n                value={formValues.format}\n                onChange={_onChange}\n            />\n            <Confirm\n                open={show}\n                content=\"Are you sure ? You will lost the child\"\n                onCancel={_cancel}\n                onConfirm={_confirm}\n            />\n        </>\n    );\n}\n\nexport default SelectFormat;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport SelectFormat from './SelectFormat';\nexport default SelectFormat;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Form, InputOnChangeData} from 'semantic-ui-react';\nimport {AttributeFormat} from '../../../../../../_gqlTypes/globalTypes';\nimport {IEmbeddedFields, ILabel} from '../../../../../../_types/embeddedFields';\nimport {IFormValue} from '../EmbeddedFieldsTab';\nimport LabelFields from './LabelFields';\nimport SelectFormat from './SelectFormat';\n\ninterface IEmbeddedFieldsFormProps {\n    attribute: IEmbeddedFields;\n    formValues: IFormValue[];\n    setFormValues: React.Dispatch<React.SetStateAction<IFormValue[]>>;\n    save: (newValues: IFormValue[]) => void;\n    isRoot?: boolean;\n}\n\nexport interface IFormValues {\n    originalId: string;\n    id: string;\n    label: ILabel | null;\n    format: string;\n    validation_regex?: string | null;\n}\n\nfunction EmbeddedFieldsForm({\n    attribute: {id, label, format, validation_regex, embedded_fields},\n    formValues: values,\n    setFormValues: setValues,\n    save,\n    isRoot\n}: IEmbeddedFieldsFormProps) {\n    const {t} = useTranslation();\n    const [formValues, setFormValues] = useState<IFormValues>({\n        originalId: id,\n        id,\n        label,\n        format,\n        validation_regex\n    });\n\n    const _handleId = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        const newId = data.value?.toString() ?? '';\n        setFormValues(v => ({...v, id: newId}));\n        _updateValues({...formValues, id: newId});\n    };\n\n    const _handleSelect = (newFormat: string) => {\n        setFormValues(v => ({...v, format: newFormat}));\n        _updateValues({...formValues, format: newFormat});\n    };\n\n    const _handleOnChangeValidationRegex = async (\n        event: React.ChangeEvent<HTMLInputElement>,\n        data: InputOnChangeData\n    ) => {\n        const newValidationRegex = data.value?.toString() ?? '';\n        setFormValues(v => ({...v, validation_regex: newValidationRegex}));\n\n        _updateValues({...formValues, validation_regex: newValidationRegex});\n    };\n\n    const _handleOnChangeLabel = (newLabel: ILabel) => {\n        _updateValues({...formValues, label: newLabel});\n    };\n\n    const _updateValues = (form: IFormValues) => {\n        const newValues = _getNewValues(form);\n        setValues(newValues);\n    };\n\n    const _save = (form: IFormValues) => {\n        const newValues = _getNewValues(form);\n        save(newValues);\n    };\n\n    const _getNewValues = (form: IFormValues) => {\n        const valueFind = values.find(value => {\n            return value.originalId === id;\n        });\n\n        const newValues = valueFind ? values.map(v => (v.originalId === id ? form : v)) : [...values, form];\n\n        return newValues;\n    };\n\n    const _handleBlur = () => {\n        _save(formValues);\n    };\n\n    const formatRegexValidation: string[] = [AttributeFormat.text, AttributeFormat.numeric, AttributeFormat.encrypted];\n\n    return (\n        <div className=\"ui fluid\" style={{padding: '1rem'}}>\n            <Form>\n                <Form.Input\n                    label={t('attributes.ID')}\n                    disabled={isRoot}\n                    name=\"id\"\n                    value={formValues.id}\n                    onChange={_handleId}\n                    onBlur={_handleBlur}\n                />\n\n                <LabelFields\n                    t={t}\n                    formValues={formValues}\n                    setFormValues={setFormValues}\n                    onChange={_handleOnChangeLabel}\n                    save={_handleBlur}\n                />\n\n                <Form.Group>\n                    <SelectFormat\n                        formValues={formValues}\n                        hasChild={!!embedded_fields}\n                        onChange={_handleSelect}\n                        t={t}\n                        save={_save}\n                    />\n\n                    {formatRegexValidation.includes(formValues.format) && (\n                        <Form.Input\n                            label={t('attributes.validation_regex')}\n                            value={formValues.validation_regex ?? ''}\n                            name=\"validation_regex\"\n                            onChange={_handleOnChangeValidationRegex}\n                            onBlur={_handleBlur}\n                        />\n                    )}\n                </Form.Group>\n            </Form>\n        </div>\n    );\n}\n\nexport default EmbeddedFieldsForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EmbeddedFieldsForm from './EmbeddedFieldsForm';\nexport default EmbeddedFieldsForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport EmbeddedFieldsDisplay from '../EmbeddedFieldsDisplay';\nimport EmbeddedFieldsForm from '../EmbeddedFieldsForm';\nimport {IFormValue} from '../EmbeddedFieldsTab';\n\ninterface IEmbeddedFieldsWrapperProps {\n    attribute: any;\n    displayForm: boolean;\n    formValues: IFormValue[];\n    setFormValues: React.Dispatch<React.SetStateAction<IFormValue[]>>;\n    isRoot?: boolean;\n    save: (newValues: IFormValue[]) => void;\n}\n\nfunction EmbeddedFieldsWrapper({\n    attribute,\n    displayForm,\n    formValues,\n    setFormValues,\n    isRoot,\n    save\n}: IEmbeddedFieldsWrapperProps) {\n    if (displayForm) {\n        return (\n            <EmbeddedFieldsForm\n                attribute={attribute}\n                formValues={formValues}\n                setFormValues={setFormValues}\n                isRoot={isRoot}\n                save={save}\n            />\n        );\n    }\n    return <EmbeddedFieldsDisplay attribute={attribute} />;\n}\n\nexport default EmbeddedFieldsWrapper;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {map, TreeItem} from 'react-sortable-tree';\nimport {Button, ButtonGroup} from 'semantic-ui-react';\nimport {IFlatItem} from '../EmbeddedFieldsTab';\n\ninterface IExpandButtonProps {\n    flatItems: TreeItem[];\n    setFlatItems: React.Dispatch<React.SetStateAction<IFlatItem[]>>;\n}\n\nfunction ExpandButtons({flatItems, setFlatItems: setTreeItems}: IExpandButtonProps): JSX.Element {\n    const {t} = useTranslation();\n\n    const expandedAll = () => {\n        map({\n            treeData: flatItems,\n            callback: ({node}) => {\n                setTreeItems(es =>\n                    es.map(e =>\n                        e.id === node.id\n                            ? {\n                                  ...e,\n                                  expanded: true\n                              }\n                            : e\n                    )\n                );\n                return {...node, expanded: true};\n            },\n            getNodeKey: ({treeIndex}) => treeIndex,\n            ignoreCollapsed: false\n        });\n    };\n\n    const reduceAll = () => {\n        map({\n            treeData: flatItems,\n            callback: ({node}) => {\n                setTreeItems(es =>\n                    es.map(e =>\n                        e.id === node.id\n                            ? {\n                                  ...e,\n                                  expanded: false\n                              }\n                            : e\n                    )\n                );\n                return {...node, expanded: false};\n            },\n            getNodeKey: ({treeIndex}) => {\n                return treeIndex;\n            },\n            ignoreCollapsed: false\n        });\n    };\n\n    return (\n        <div>\n            <ButtonGroup compact widths=\"1\">\n                <Button size=\"mini\" onClick={expandedAll}>\n                    {t('admin.expanded')}\n                </Button>\n\n                <Button size=\"mini\" onClick={reduceAll}>\n                    {t('admin.reduce')}\n                </Button>\n            </ButtonGroup>\n        </div>\n    );\n}\n\nexport default ExpandButtons;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ExpandButtons from './ExpandButtons';\n\nexport default ExpandButtons;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation, useQuery} from '@apollo/client';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport SortableTree, {\n    addNodeUnderParent,\n    ExtendedNodeData,\n    OnDragStateChangedData,\n    OnVisibilityToggleData,\n    removeNodeAtPath,\n    TreeIndex,\n    TreeItem,\n    TreeNode\n} from 'react-sortable-tree';\nimport {Button} from 'semantic-ui-react';\nimport {getAttributesEmbeddedFieldsQuery} from '../../../../../queries/attributes/getAttributesEmbeddedFieldsQuery';\nimport {saveAttributesEmbeddedFieldsQuery} from '../../../../../queries/attributes/saveAttributesEmbeddedFieldsQuery';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../../../_gqlTypes/GET_ATTRIBUTES';\nimport {AttributeFormat} from '../../../../../_gqlTypes/globalTypes';\nimport {\n    IEmbeddedFields,\n    IGetEmbeddedFieldsQuery as IQuery,\n    IGetEmbeddedFieldsQueryVariables as IQueryVariables,\n    ILabel\n} from '../../../../../_types/embeddedFields';\nimport EditButtons from './EditButtons';\nimport EmbeddedFieldsWrapper from './EmbeddedFieldsWrapper/EmbeddedFieldsWrapper';\nimport ExpandButtons from './ExpandButtons';\n\ninterface IEmbeddedFieldsTabProps {\n    attribute: GET_ATTRIBUTES_attributes_list;\n}\n\nexport interface ITreeItem extends TreeItem {\n    id: string;\n}\n\nexport interface IFlatItem {\n    id: string;\n    expanded: boolean;\n    displayForm: boolean;\n}\n\nexport interface IFormValue {\n    originalId: string;\n    id: string;\n    label: ILabel | null;\n    format: string;\n    validation_regex?: string | null;\n}\n\nfunction EmbeddedFieldsTab({attribute}: IEmbeddedFieldsTabProps): JSX.Element {\n    const {t} = useTranslation();\n\n    const [treeItems, setTreeItems] = useState<ITreeItem[]>([]);\n    const [flatItems, setFlatItems] = useState<IFlatItem[]>([]);\n    const [formValues, setFormValues] = useState<IFormValue[]>([]);\n    const [isVirtualized, setIsVirtualized] = useState<boolean>(true);\n\n    // Manually set the depth of embedded_fields to max\n    const [level] = useState<number>(100);\n\n    const {loading: lQuery, error: eQuery, data: dQuery, refetch: rQuery} = useQuery<IQuery, IQueryVariables>(\n        getAttributesEmbeddedFieldsQuery(level),\n        {variables: {attId: attribute.id}}\n    );\n\n    const [saveAttribute] = useMutation(saveAttributesEmbeddedFieldsQuery);\n\n    const save = useCallback(\n        async (newValues: IFormValue[], treeData?: ITreeItem[]) => {\n            const saveAndReload = async (items: ITreeItem[]) => {\n                const variables = _getNewAttribute(items[0], newValues);\n\n                await saveAttribute({variables});\n                rQuery();\n            };\n\n            if (treeData) {\n                await saveAndReload(treeData);\n            } else {\n                setTreeItems(items => {\n                    saveAndReload(items);\n                    return items;\n                });\n            }\n        },\n        [saveAttribute, rQuery, setTreeItems]\n    );\n\n    useEffect(() => {\n        const _getTreeData = (att: IEmbeddedFields): ITreeItem => {\n            const formValue = formValues.find(value => value.originalId === att.id);\n            let flatItem = flatItems.find(ti => ti.id === att.id);\n\n            if (!flatItem && !formValue) {\n                formValues.forEach(values => {\n                    if (values.id !== values.originalId) {\n                        const item = flatItems.find(ti => ti.id === values.originalId);\n\n                        if (item) {\n                            setFlatItems(items => {\n                                flatItem = {...item, id: values.id};\n                                return [...items.filter(it => it.id !== values.originalId), flatItem];\n                            });\n                        }\n                    }\n                });\n            }\n\n            if (!flatItem) {\n                const newFlatItem: IFlatItem = {\n                    id: att.id,\n                    expanded: false,\n                    displayForm: false\n                };\n\n                setFlatItems(items => [...items, newFlatItem]);\n            }\n\n            if (!formValue) {\n                const newFormValue: IFormValue = {\n                    originalId: att.id,\n                    id: att.id,\n                    label: att.label,\n                    format: att.format,\n                    validation_regex: att?.validation_regex ?? ''\n                };\n\n                setFormValues(values => [...values.filter(value => value.originalId === value.id), newFormValue]);\n            }\n\n            const _save = (newValues: IFormValue[]) => save(newValues);\n\n            const children =\n                att.format === AttributeFormat.extended && att.embedded_fields\n                    ? att.embedded_fields.filter(em => em ?? undefined).map(emb => _getTreeData(emb))\n                    : undefined;\n\n            return {\n                id: att.id,\n                title: (\n                    <EmbeddedFieldsWrapper\n                        key={att.id}\n                        attribute={att as IEmbeddedFields}\n                        displayForm={!!flatItem?.displayForm}\n                        formValues={formValues}\n                        setFormValues={setFormValues}\n                        isRoot={att.id === attribute.id}\n                        save={_save}\n                    />\n                ),\n                children,\n                expanded: flatItem?.expanded\n            };\n        };\n\n        const newTreeItem: ITreeItem[] = dQuery?.attributes?.list\n            ? dQuery.attributes.list.map(att => {\n                  return _getTreeData(att as IEmbeddedFields);\n              })\n            : [];\n        setTreeItems(newTreeItem);\n    }, [lQuery, dQuery, flatItems, formValues, attribute.id, save]);\n\n    const _onTreeChange = (newTreeData: ITreeItem[]) => {\n        setTreeItems(newTreeData);\n    };\n\n    const _onVisibilityToggle = ({node}: OnVisibilityToggleData) => {\n        setFlatItems(items =>\n            items.map(item => {\n                if (item.id === node.id) {\n                    return {...item, expanded: !item.expanded};\n                }\n                return item;\n            })\n        );\n    };\n\n    const _manageRowHeight = (info: ExtendedNodeData | any): number => {\n        const item = flatItems.find(e => e.id === info.node.id);\n        const displayForm = item ? item.displayForm : false;\n\n        if (displayForm) {\n            return 260;\n        }\n        return 60;\n    };\n\n    const _getNodeKey = ({treeIndex}: TreeNode & TreeIndex) => {\n        return treeIndex;\n    };\n\n    const _genNodeProps = (info: ExtendedNodeData) => {\n        const expend = () => {\n            setFlatItems(items =>\n                items.map(item => {\n                    if (item.id === info.node.id) {\n                        // trigger rowHeight\n                        setIsVirtualized(false);\n\n                        return {...item, displayForm: !item.displayForm};\n                    }\n                    return item;\n                })\n            );\n        };\n\n        const add = async (newId: string) => {\n            const newAtt: IEmbeddedFields = {\n                id: newId,\n                format: 'text',\n                label: {\n                    fr: '',\n                    en: ''\n                }\n            };\n\n            const _save = (nValues: IFormValue[]) => save(nValues);\n\n            const {treeData} = addNodeUnderParent({\n                treeData: treeItems,\n                parentKey: info.treeIndex,\n                getNodeKey: ({treeIndex}) => treeIndex,\n                newNode: {\n                    id: newAtt.id,\n                    title: (\n                        <EmbeddedFieldsWrapper\n                            key={newAtt.id}\n                            attribute={newAtt}\n                            displayForm={!!flatItem?.displayForm}\n                            formValues={formValues}\n                            setFormValues={setFormValues}\n                            save={_save}\n                        />\n                    ),\n                    children: undefined,\n                    expanded: false\n                }\n            });\n\n            const newValues = [...formValues, {originalId: newAtt.id, ...newAtt}];\n\n            setFormValues(newValues);\n\n            save(newValues, treeData as ITreeItem[]);\n        };\n\n        const remove = async () => {\n            const treeData = removeNodeAtPath({\n                treeData: treeItems,\n                path: info.path,\n                getNodeKey: ({treeIndex}) => treeIndex\n            });\n\n            setTreeItems(treeData as ITreeItem[]);\n\n            const variables = _getNewAttribute(treeData[0], formValues);\n\n            await saveAttribute({variables});\n            rQuery();\n        };\n\n        const flatItem = flatItems.find(item => item.id === info.node.id);\n\n        const _find = (att: IEmbeddedFields, idToFind: string) => {\n            if (att.id === idToFind) {\n                return att;\n            }\n            if (att.embedded_fields) {\n                const founds = att.embedded_fields.filter(em => !!em).map(em => _find(em, idToFind));\n                return founds.find(em => em && em.id === idToFind);\n            }\n        };\n\n        const embeddedFields: IEmbeddedFields = _find(dQuery?.attributes.list[0] as IEmbeddedFields, info.node.id);\n\n        return {\n            buttons: [\n                <div\n                    key={info.treeIndex + '_btn-group'}\n                    style={{\n                        position: 'absolute'\n                    }}\n                >\n                    <EditButtons\n                        id={info.node.id}\n                        flatItem={flatItem}\n                        format={embeddedFields?.format}\n                        expend={expend}\n                        add={add}\n                        remove={remove}\n                        isRoot={attribute.id === info.node.id}\n                        t={t}\n                    />\n                </div>\n            ]\n        };\n    };\n\n    const _handleSubmit = async () => {\n        save(formValues, treeItems);\n\n        // trigger rowHeight\n        setIsVirtualized(false);\n    };\n\n    const _handleDrop = async ({isDragging}: OnDragStateChangedData) => {\n        if (!isDragging) {\n            const variables = _getNewAttribute(treeItems[0], formValues);\n\n            await saveAttribute({\n                variables\n            });\n\n            rQuery();\n        }\n    };\n\n    if (eQuery) {\n        return <div className=\"error\">ERROR</div>;\n    }\n\n    return (\n        <div\n            className=\"grow height100\"\n            style={{\n                display: 'flex',\n                flexFlow: 'column',\n                justifyContent: 'space-between'\n            }}\n        >\n            <ExpandButtons flatItems={flatItems} setFlatItems={setFlatItems} />\n            <div style={{flex: 1}}>\n                <SortableTree\n                    treeData={treeItems}\n                    onChange={_onTreeChange}\n                    onVisibilityToggle={_onVisibilityToggle}\n                    rowHeight={_manageRowHeight}\n                    getNodeKey={_getNodeKey}\n                    generateNodeProps={_genNodeProps}\n                    onDragStateChanged={_handleDrop}\n                    isVirtualized={isVirtualized}\n                />\n            </div>\n            <div>\n                <Button color=\"green\" floated=\"right\" onClick={_handleSubmit}>\n                    {t('admin.submit')}\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nconst _getNewAttribute = (treeItem: TreeItem, values: IFormValue[]) => {\n    const valuesChecked = values.map(value => (!value.originalId ? {...value, originalId: value.id} : value));\n\n    const _recreateAttributeFromTree = (nTreeItems: TreeItem, nValues: IFormValue[]) => {\n        const valueFind = nValues.find(value => {\n            return value.originalId === nTreeItems.id;\n        });\n\n        // remove originalId from value\n        const cloneValueFind = valueFind ? (({originalId, ...rest}) => rest)(valueFind) : undefined;\n\n        if (!nTreeItems.children || valueFind?.format !== AttributeFormat.extended) {\n            return cloneValueFind;\n        }\n\n        return {\n            ...cloneValueFind,\n            embedded_fields: (nTreeItems?.children as ITreeItem[]).map(em => _recreateAttributeFromTree(em, nValues))\n        };\n    };\n\n    const variables = {\n        attribute: _recreateAttributeFromTree(treeItem, valuesChecked)\n    };\n\n    delete variables.attribute.validation_regex;\n\n    return variables;\n};\n\nexport default EmbeddedFieldsTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EmbeddedFieldsTab from './EmbeddedFieldsTab';\nexport default EmbeddedFieldsTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {localizedTranslation} from '@leav/utils';\nimport useLang from 'hooks/useLang';\nimport React from 'react';\nimport {Form, FormDropdownProps} from 'semantic-ui-react';\nimport {GET_VERSION_PROFILES_versionProfiles_list} from '_gqlTypes/GET_VERSION_PROFILES';\n\ninterface IVersionProfilesSelectorFieldProps extends FormDropdownProps {\n    profiles: GET_VERSION_PROFILES_versionProfiles_list[];\n}\n\nfunction VersionProfilesSelectorField({profiles, ...fieldProps}: IVersionProfilesSelectorFieldProps): JSX.Element {\n    const {lang} = useLang();\n    const options = profiles.map(l => ({key: l.id, value: l.id, text: localizedTranslation(l.label, lang)}));\n\n    if (!!fieldProps.clearable) {\n        options.unshift({key: '', value: '', text: ''});\n    }\n\n    return <Form.Dropdown {...{...fieldProps, clearable: undefined}} search options={options} />;\n}\n\nexport default VersionProfilesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport VersionProfilesSelectorField from './VersionProfilesSelectorField';\nexport default VersionProfilesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport {getVersionProfilesQuery} from 'queries/versionProfiles/getVersionProfilesQuery';\nimport React from 'react';\nimport {FormDropdownProps} from 'semantic-ui-react';\nimport {GET_VERSION_PROFILES, GET_VERSION_PROFILESVariables} from '_gqlTypes/GET_VERSION_PROFILES';\nimport VersionProfilesSelectorField from './VersionProfilesSelectorField';\n\nfunction VersionProfilesSelector(fieldProps: FormDropdownProps): JSX.Element {\n    const {loading, error: queryError, data} = useQuery<GET_VERSION_PROFILES, GET_VERSION_PROFILESVariables>(\n        getVersionProfilesQuery\n    );\n\n    if (queryError) {\n        return <ErrorDisplay message={queryError.message} />;\n    }\n\n    const profiles = data?.versionProfiles?.list || [];\n\n    return <VersionProfilesSelectorField {...fieldProps} loading={loading} profiles={profiles} />;\n}\n\nexport default VersionProfilesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport VersionProfilesSelector from './VersionProfilesSelector';\nexport default VersionProfilesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getLibrariesWithAttributesQuery = gql`\n    query GET_LIBRARIES_WITH_ATTRIBUTES {\n        libraries {\n            totalCount\n            list {\n                id\n                label\n                gqlNames {\n                    query\n                    type\n                    list\n                    filter\n                    searchableFields\n                }\n                attributes {\n                    id\n                    label\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport useLang from 'hooks/useLang';\nimport React from 'react';\nimport {Form, FormDropdownProps} from 'semantic-ui-react';\nimport {localizedLabel} from 'utils';\nimport {GET_LIBRARIES_WITH_ATTRIBUTES_libraries_list} from '_gqlTypes/GET_LIBRARIES_WITH_ATTRIBUTES';\n\ninterface IAttributeLibrariesFieldProps extends FormDropdownProps {\n    libraries: GET_LIBRARIES_WITH_ATTRIBUTES_libraries_list[];\n}\n\nfunction AttributeLibrariesField({libraries, ...fieldProps}: IAttributeLibrariesFieldProps): JSX.Element {\n    const availableLanguages = useLang().lang;\n    const options = !!libraries\n        ? libraries.map(l => ({key: l.id, value: l.id, text: localizedLabel(l.label, availableLanguages)}))\n        : [];\n\n    return <Form.Dropdown {...fieldProps} aria-label=\"linked-libraries\" search options={options} />;\n}\n\nexport default AttributeLibrariesField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeLibrariesField from './AttributeLibrariesField';\nexport default AttributeLibrariesField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation, useQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport FormFieldWrapper from 'components/shared/FormFieldWrapper';\nimport difference from 'lodash/difference';\nimport {getLibrariesWithAttributesQuery} from 'queries/libraries/getLibrariesWithAttributesQuery';\nimport {saveLibAttributesMutation} from 'queries/libraries/saveLibAttributesMutation';\nimport React, {SyntheticEvent, useMemo} from 'react';\nimport {DropdownProps, FormDropdownProps} from 'semantic-ui-react';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport {\n    GET_LIBRARIES_WITH_ATTRIBUTES,\n    GET_LIBRARIES_WITH_ATTRIBUTES_libraries_list\n} from '_gqlTypes/GET_LIBRARIES_WITH_ATTRIBUTES';\nimport {SAVE_LIBRARY_ATTRIBUTES, SAVE_LIBRARY_ATTRIBUTESVariables} from '_gqlTypes/SAVE_LIBRARY_ATTRIBUTES';\nimport AttributeLibrariesField from './AttributeLibrariesField';\n\nexport type AttributeLibrariesOnChange = (\n    e: SyntheticEvent<HTMLElement>,\n    fieldData: DropdownProps & {value: GET_LIBRARIES_WITH_ATTRIBUTES_libraries_list[]}\n) => void;\n\ninterface IAttributeLibrariesProps extends Omit<FormDropdownProps, 'onChange' | 'value'> {\n    attribute: GET_ATTRIBUTE_BY_ID_attributes_list;\n}\n\nfunction AttributeLibraries({attribute, onChange, ...fieldProps}: IAttributeLibrariesProps): JSX.Element {\n    const {loading, error, data} = useQuery<GET_LIBRARIES_WITH_ATTRIBUTES>(getLibrariesWithAttributesQuery);\n    const [saveLibrary, {loading: loadingSave, error: saveError}] = useMutation<\n        SAVE_LIBRARY_ATTRIBUTES,\n        SAVE_LIBRARY_ATTRIBUTESVariables\n    >(saveLibAttributesMutation, {\n        onError: e => undefined // To prevent unhandled rejection, error is managed with error variable\n    });\n\n    const libraries = data?.libraries?.list ?? [];\n    const librariesById: Record<string, GET_LIBRARIES_WITH_ATTRIBUTES_libraries_list> = useMemo(\n        () =>\n            libraries.reduce((libs, lib) => {\n                libs[lib.id] = lib;\n                return libs;\n            }, {}),\n        [libraries]\n    );\n\n    const _handleChange = async (e: SyntheticEvent<HTMLElement>, fieldData: DropdownProps) => {\n        const attributeLibrariesIds = attribute.libraries.map(lib => lib.id);\n        const addedValues = difference(fieldData.value as string[], attributeLibrariesIds);\n        const removedValues = difference(attributeLibrariesIds, fieldData.value as string[]);\n\n        // Added libraries\n        await Promise.all([\n            ...addedValues.map(libraryId =>\n                saveLibrary({\n                    variables: {\n                        libId: libraryId,\n                        attributes: [...librariesById[libraryId].attributes.map(a => a.id), attribute.id]\n                    }\n                })\n            ),\n            ...removedValues.map(libraryId =>\n                saveLibrary({\n                    variables: {\n                        libId: libraryId,\n                        attributes: [\n                            ...librariesById[libraryId].attributes.filter(a => a.id !== attribute.id).map(a => a.id)\n                        ]\n                    }\n                })\n            )\n        ]);\n    };\n\n    if (error) {\n        return <ErrorDisplay message={error.message} />;\n    }\n\n    return (\n        <FormFieldWrapper error={saveError?.message}>\n            <AttributeLibrariesField\n                libraries={libraries}\n                {...fieldProps}\n                onChange={_handleChange}\n                loading={loading || loadingSave}\n                defaultValue={attribute.libraries.map(l => l.id)}\n            />\n        </FormFieldWrapper>\n    );\n}\n\nexport default AttributeLibraries;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeLibraries from './AttributeLibraries';\nexport default AttributeLibraries;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeSelector from 'components/attributes/AttributeSelector';\nimport VersionProfilesSelector from 'components/versionProfiles/VersionProfilesSelector';\nimport {Formik, FormikProps} from 'formik';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Form, Icon, Message} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport {GET_ATTRIBUTES_attributes_list} from '_gqlTypes/GET_ATTRIBUTES';\nimport {\n    GET_ATTRIBUTE_BY_ID_attributes_list,\n    GET_ATTRIBUTE_BY_ID_attributes_list_LinkAttribute,\n    GET_ATTRIBUTE_BY_ID_attributes_list_StandardAttribute,\n    GET_ATTRIBUTE_BY_ID_attributes_list_TreeAttribute\n} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport useLang from '../../../../../../hooks/useLang';\nimport {formatIDString, getFieldError} from '../../../../../../utils';\nimport {AttributeFormat, AttributeType, ValueVersionMode} from '../../../../../../_gqlTypes/globalTypes';\nimport {ErrorTypes, IFormError} from '../../../../../../_types/errors';\nimport LibrariesSelector from '../../../../../libraries/LibrariesSelector';\nimport FormFieldWrapper from '../../../../../shared/FormFieldWrapper';\nimport TreesSelector from '../../../../../trees/TreesSelector';\nimport {AttributeInfosFormValues} from '../_types';\nimport AttributeLibraries from './AttributeLibraries';\n\ninterface IInfosFormProps {\n    attribute: GET_ATTRIBUTE_BY_ID_attributes_list | null;\n    readonly: boolean;\n    onSubmitInfos: (dataToSave: AttributeInfosFormValues) => void;\n    errors?: IFormError;\n    onCheckIdExists: (val: string) => Promise<boolean>;\n    forcedType?: AttributeType;\n}\n\nconst defaultAttributeData: AttributeInfosFormValues = {\n    id: '',\n    system: false,\n    readonly: false,\n    label: {\n        fr: '',\n        en: ''\n    },\n    description: {\n        fr: '',\n        en: ''\n    },\n    type: AttributeType.simple,\n    format: AttributeFormat.text,\n    linked_tree: null,\n    linked_library: null,\n    reverse_link: null,\n    unique: null,\n    permissions_conf: null,\n    multiple_values: false,\n    metadata_fields: null,\n    versions_conf: {\n        versionable: false,\n        mode: ValueVersionMode.smart,\n        profile: null\n    },\n    libraries: []\n};\n\nconst FormWrapper = styled(Form)`\n    && {\n        position: unset;\n    }\n`;\n\nconst FormFooter = styled.div`\n    border-top: 1px solid #dddddd;\n    padding: 1em;\n    text-align: right;\n`;\n\nfunction InfosForm({\n    attribute,\n    readonly,\n    onSubmitInfos,\n    errors,\n    onCheckIdExists,\n    forcedType\n}: IInfosFormProps): JSX.Element {\n    const {t} = useTranslation();\n    const {lang: userLang, availableLangs, defaultLang} = useLang();\n\n    const isNewAttribute = attribute === null;\n    const initialValues: AttributeInfosFormValues =\n        attribute !== null\n            ? {\n                  ...attribute,\n                  linked_library:\n                      (attribute as GET_ATTRIBUTE_BY_ID_attributes_list_LinkAttribute).linked_library?.id ?? null,\n                  reverse_link: (attribute as GET_ATTRIBUTE_BY_ID_attributes_list_LinkAttribute).reverse_link ?? null,\n                  linked_tree: (attribute as GET_ATTRIBUTE_BY_ID_attributes_list_TreeAttribute).linked_tree?.id ?? null,\n                  versions_conf: {\n                      ...attribute.versions_conf,\n                      profile: attribute.versions_conf.profile?.id ?? null\n                  },\n                  unique: (attribute as GET_ATTRIBUTE_BY_ID_attributes_list_StandardAttribute).unique ?? null\n              }\n            : defaultAttributeData;\n\n    if (isNewAttribute && forcedType) {\n        initialValues.type = forcedType;\n    }\n\n    const _handleSubmit = values => {\n        onSubmitInfos(values);\n    };\n\n    const serverValidationErrors =\n        errors && errors.extensions.code === ErrorTypes.VALIDATION_ERROR ? errors.extensions.fields : {};\n\n    let idValidator = yup\n        .string()\n        .required()\n        .matches(/^[a-z0-9_]+$/);\n\n    if (isNewAttribute) {\n        // TODO: ID unicity validation is not debounced. As it's not trivial to implement, check future implementation\n        // in formik (https://github.com/jaredpalmer/formik/pull/1597)\n        idValidator = idValidator.test('isIdUnique', t('admin.validation_errors.id_exists'), onCheckIdExists);\n    }\n\n    const validationSchema = yup.object().shape({\n        label: yup.object().shape({\n            [defaultLang]: yup.string().required()\n        }),\n        description: yup\n            .object()\n            .shape({\n                [defaultLang]: yup.string()\n            })\n            .nullable(),\n        id: idValidator,\n        type: yup.string().required(),\n        format: yup.string().nullable(),\n        multiple_values: yup.boolean(),\n        unique: yup.boolean().nullable(),\n        versions_conf: yup\n            .object()\n            .shape({\n                versionable: yup.boolean().nullable(),\n                mode: yup\n                    .string()\n                    .oneOf([...Object.values(ValueVersionMode), null])\n                    .nullable(),\n                profile: yup.string().nullable()\n            })\n            .nullable()\n    });\n\n    const _renderForm = ({\n        handleSubmit,\n        handleBlur,\n        setFieldValue,\n        errors: inputErrors,\n        values,\n        touched,\n        submitForm\n    }: FormikProps<AttributeInfosFormValues>) => {\n        const _handleLabelChange = (e, data) => {\n            _handleChange(e, data);\n\n            const {name, value} = data;\n            const [field, subfield] = name.split('.');\n\n            // On new attribute, automatically generate an ID based on label\n            if (isNewAttribute && field === 'label' && subfield === defaultLang) {\n                setFieldValue('id', formatIDString(value));\n            }\n        };\n\n        const _handleLinkedLibraryChange = (e, data) => {\n            _handleChange(e, data);\n            setFieldValue('reverse_link', null);\n        };\n\n        const _handleChange = async (e, data) => {\n            const isCheckbox = data.type === 'checkbox';\n            const value = isCheckbox ? data.checked : data.value;\n            const name: string = data.name;\n\n            await setFieldValue(name, value);\n        };\n\n        const _handleChangeWithSubmit = async (e, data) => {\n            await _handleChange(e, data);\n\n            if (!isNewAttribute) {\n                submitForm();\n            }\n        };\n\n        const allowFormat = [AttributeType.advanced, AttributeType.simple].includes(values.type);\n        const allowMultipleValues = [AttributeType.advanced, AttributeType.advanced_link, AttributeType.tree].includes(\n            values.type\n        );\n        const allowVersionable = [AttributeType.advanced, AttributeType.advanced_link, AttributeType.tree].includes(\n            values.type\n        );\n        const isVersionable = !!values.versions_conf && values.versions_conf.versionable;\n        const isLinkAttribute = [AttributeType.advanced_link, AttributeType.simple_link].includes(values.type);\n\n        const _getErrorByField = (fieldName: string): string =>\n            getFieldError<GET_ATTRIBUTES_attributes_list>(\n                fieldName,\n                touched,\n                serverValidationErrors || {},\n                inputErrors\n            );\n\n        const _handleBlur = (e: React.FocusEvent) => {\n            if (isNewAttribute) {\n                handleBlur(e);\n            } else {\n                submitForm();\n            }\n        };\n\n        const _handleKeyPress = (e: React.KeyboardEvent) => {\n            if (e.key === 'Enter') {\n                submitForm();\n            }\n        };\n\n        return (\n            <FormWrapper onSubmit={handleSubmit} aria-label=\"infos-form\">\n                <Form.Group grouped>\n                    <label>{t('attributes.label')}</label>\n                    {availableLangs.map(lang => (\n                        <FormFieldWrapper key={lang} error={_getErrorByField(`label.${lang}`)}>\n                            <Form.Input\n                                label={`${lang} ${lang === defaultLang ? '*' : ''}`}\n                                width=\"4\"\n                                name={`label.${lang}`}\n                                aria-label={`label.${lang}`}\n                                disabled={readonly}\n                                onChange={_handleLabelChange}\n                                onBlur={_handleBlur}\n                                onKeyPress={_handleKeyPress}\n                                value={values.label?.[lang] ?? ''}\n                            />\n                        </FormFieldWrapper>\n                    ))}\n                </Form.Group>\n                <Form.Group grouped>\n                    <label>{t('attributes.description')}</label>\n                    {availableLangs.map(lang => (\n                        <FormFieldWrapper key={lang} error={_getErrorByField(`description.${lang}`)}>\n                            <Form.Input\n                                label={`${lang}`}\n                                value={values.description?.[lang] ?? ''}\n                                width=\"4\"\n                                name={`description.${lang}`}\n                                aria-label={`description.${lang}`}\n                                disabled={readonly}\n                                onChange={_handleChange}\n                                onBlur={_handleBlur}\n                                onKeyPress={_handleKeyPress}\n                            />\n                        </FormFieldWrapper>\n                    ))}\n                </Form.Group>\n                <FormFieldWrapper error={_getErrorByField('id')}>\n                    <Form.Input\n                        label={t('attributes.ID')}\n                        width=\"4\"\n                        disabled={!isNewAttribute || readonly}\n                        name=\"id\"\n                        aria-label=\"id\"\n                        onChange={_handleChange}\n                        onBlur={_handleBlur}\n                        value={values.id}\n                    />\n                </FormFieldWrapper>\n                <FormFieldWrapper error={_getErrorByField('type')}>\n                    <Form.Select\n                        label={t('attributes.type')}\n                        width=\"4\"\n                        disabled={!isNewAttribute || values.system || readonly || (isNewAttribute && !!forcedType)}\n                        name=\"type\"\n                        aria-label=\"type\"\n                        onChange={_handleChangeWithSubmit}\n                        options={Object.keys(AttributeType).map(attrType => {\n                            return {\n                                text: t('attributes.types.' + attrType),\n                                value: attrType\n                            };\n                        })}\n                        value={values.type}\n                    />\n                </FormFieldWrapper>\n                {allowFormat && (\n                    <FormFieldWrapper error={_getErrorByField('format')}>\n                        <Form.Select\n                            label={t('attributes.format')}\n                            disabled={!isNewAttribute || values.system || readonly}\n                            width=\"4\"\n                            name=\"format\"\n                            aria-label=\"format\"\n                            onChange={_handleChangeWithSubmit}\n                            options={Object.keys(AttributeFormat).map(f => ({\n                                text: t('attributes.formats.' + f),\n                                value: f\n                            }))}\n                            value={values.format || ''}\n                        />\n                    </FormFieldWrapper>\n                )}\n                {isLinkAttribute && (\n                    <FormFieldWrapper error={_getErrorByField('linked_library')}>\n                        <LibrariesSelector\n                            disabled={values.system || readonly}\n                            lang={userLang}\n                            fluid\n                            selection\n                            multiple={false}\n                            label={t('attributes.linked_library')}\n                            placeholder={t('attributes.linked_library')}\n                            width=\"4\"\n                            name=\"linked_library\"\n                            aria-label=\"linked_library\"\n                            onChange={_handleLinkedLibraryChange}\n                            value={values.linked_library || ''}\n                        />\n                    </FormFieldWrapper>\n                )}\n                <FormFieldWrapper error={_getErrorByField('readonly')}>\n                    <Form.Checkbox\n                        label={t('attributes.readonly')}\n                        width=\"4\"\n                        disabled={readonly || values.system}\n                        name=\"readonly\"\n                        aria-label=\"readonly\"\n                        onChange={_handleChangeWithSubmit}\n                        onBlur={_handleBlur}\n                        checked={values.readonly}\n                        toggle\n                    />\n                </FormFieldWrapper>\n                {values.type === AttributeType.simple && (\n                    <FormFieldWrapper error={_getErrorByField('unique')}>\n                        <Form.Checkbox\n                            label={t('attributes.unique')}\n                            width=\"4\"\n                            disabled={values.system || readonly}\n                            name=\"unique\"\n                            aria-label=\"unique\"\n                            onChange={_handleChangeWithSubmit}\n                            onBlur={_handleBlur}\n                            checked={values.unique}\n                            toggle\n                        />\n                    </FormFieldWrapper>\n                )}\n                {isLinkAttribute && !!values.linked_library && (\n                    <FormFieldWrapper error={_getErrorByField('reverse_link')}>\n                        <AttributeSelector\n                            filters={{\n                                libraries: [values.linked_library],\n                                type: [AttributeType.advanced_link, AttributeType.simple_link]\n                            }}\n                            excludeReverseLinks\n                            disabled={values.system || readonly}\n                            lang={userLang}\n                            fluid\n                            selection\n                            clearable\n                            multiple={false}\n                            label={t('attributes.reverse_link')}\n                            placeholder={t('attributes.linked_attribute')}\n                            width=\"4\"\n                            name=\"reverse_link\"\n                            aria-label=\"reverse_link\"\n                            onChange={_handleChangeWithSubmit}\n                            value={values.reverse_link || ''}\n                        />\n                    </FormFieldWrapper>\n                )}\n                {values.type === AttributeType.tree && (\n                    <FormFieldWrapper error={_getErrorByField('versions_conf')}>\n                        <TreesSelector\n                            fluid\n                            selection\n                            multiple={false}\n                            width=\"4\"\n                            disabled={values.system || readonly}\n                            label={t('attributes.linked_tree')}\n                            placeholder={t('attributes.linked_tree')}\n                            name=\"linked_tree\"\n                            aria-label=\"linked_tree\"\n                            value={values.linked_tree || ''}\n                            onChange={_handleChangeWithSubmit}\n                        />\n                    </FormFieldWrapper>\n                )}\n                {allowMultipleValues && (\n                    <FormFieldWrapper error={_getErrorByField('multiple_values')}>\n                        <Form.Checkbox\n                            label={t('attributes.allow_multiple_values')}\n                            disabled={values.system || readonly}\n                            width=\"8\"\n                            toggle\n                            name=\"multiple_values\"\n                            aria-label=\"multiple_values\"\n                            onChange={_handleChangeWithSubmit}\n                            onBlur={_handleBlur}\n                            checked={!!values.multiple_values}\n                        />\n                    </FormFieldWrapper>\n                )}\n                {allowVersionable && (\n                    <Form.Group grouped>\n                        <label>{t('attributes.values_versions')}</label>\n                        <FormFieldWrapper error={_getErrorByField('versions_conf.versionable')}>\n                            <Form.Checkbox\n                                label={t('attributes.versionable')}\n                                disabled={values.system || readonly}\n                                width=\"8\"\n                                toggle\n                                name=\"versions_conf.versionable\"\n                                aria-label=\"versions_conf.versionable\"\n                                onChange={_handleChangeWithSubmit}\n                                checked={isVersionable}\n                            />\n                        </FormFieldWrapper>\n                        {isVersionable && (\n                            <>\n                                <FormFieldWrapper error={_getErrorByField('versions_conf.mode')}>\n                                    <Form.Select\n                                        label={t('attributes.versions_mode')}\n                                        disabled={values.system || readonly}\n                                        width=\"4\"\n                                        name=\"versions_conf.mode\"\n                                        aria-label=\"versions_conf.mode\"\n                                        onChange={_handleChangeWithSubmit}\n                                        options={[\n                                            {\n                                                text: t('attributes.versions_mode_simple'),\n                                                value: ValueVersionMode.simple\n                                            },\n                                            {\n                                                text: t('attributes.versions_mode_smart'),\n                                                value: ValueVersionMode.smart\n                                            }\n                                        ]}\n                                        value={\n                                            !!values.versions_conf && values.versions_conf.mode\n                                                ? values.versions_conf.mode\n                                                : ValueVersionMode.smart\n                                        }\n                                    />\n                                </FormFieldWrapper>\n                                <FormFieldWrapper error={_getErrorByField('versions_conf.profile')}>\n                                    <VersionProfilesSelector\n                                        fluid\n                                        selection\n                                        width=\"4\"\n                                        disabled={values.system || readonly}\n                                        label={t('attributes.version_profile')}\n                                        placeholder={t('attributes.version_profile')}\n                                        value={values?.versions_conf?.profile}\n                                        name=\"versions_conf.profile\"\n                                        aria-label=\"versions_conf.profile\"\n                                        onChange={_handleChangeWithSubmit}\n                                        clearable\n                                    />\n                                </FormFieldWrapper>\n                            </>\n                        )}\n                    </Form.Group>\n                )}\n                {!isNewAttribute && (\n                    <AttributeLibraries\n                        attribute={attribute}\n                        fluid\n                        selection\n                        width=\"10\"\n                        multiple\n                        disabled={values.system || readonly}\n                        label={t('attributes.linked_libraries')}\n                        placeholder={t('attributes.linked_libraries')}\n                        name=\"libraries\"\n                        aria-label=\"linked-libraries\"\n                    />\n                )}\n                {!readonly && isNewAttribute && (\n                    <FormFooter>\n                        <Form.Button\n                            type=\"submit\"\n                            primary\n                            icon\n                            data-test-id=\"attribute-infos-submit-btn\"\n                            style={{float: 'right'}}\n                            labelPosition=\"left\"\n                        >\n                            <Icon name=\"save outline\" />\n                            {t('admin.submit')}\n                        </Form.Button>\n                    </FormFooter>\n                )}\n            </FormWrapper>\n        );\n    };\n\n    return (\n        <>\n            {errors && errors.extensions.code === ErrorTypes.PERMISSION_ERROR && (\n                <Message negative>\n                    <Message.Header>\n                        <Icon name=\"ban\" /> {errors.message}\n                        <Icon aria-label=\"ban\" /> {errors.message}\n                    </Message.Header>\n                </Message>\n            )}\n            <Formik\n                initialValues={initialValues}\n                onSubmit={_handleSubmit}\n                validateOnChange\n                validationSchema={validationSchema}\n            >\n                {_renderForm}\n            </Formik>\n        </>\n    );\n}\n\nexport default InfosForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport InfosForm from './InfosForm';\nexport default InfosForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useLazyQuery, useMutation} from '@apollo/client';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport {getAttributesQuery} from '../../../../../queries/attributes/getAttributesQuery';\nimport {saveAttributeQuery} from '../../../../../queries/attributes/saveAttributeMutation';\nimport {GET_ATTRIBUTES, GET_ATTRIBUTESVariables} from '../../../../../_gqlTypes/GET_ATTRIBUTES';\nimport {AttributeType} from '../../../../../_gqlTypes/globalTypes';\nimport {SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables} from '../../../../../_gqlTypes/SAVE_ATTRIBUTE';\nimport {IFormError} from '../../../../../_types/errors';\nimport {OnAttributePostSaveFunc} from '../../EditAttribute';\nimport InfosForm from './InfosForm';\nimport {AttributeInfosFormValues} from './_types';\n\ninterface IInfosTabProps {\n    attribute?: GET_ATTRIBUTE_BY_ID_attributes_list;\n    onPostSave?: OnAttributePostSaveFunc;\n    forcedType?: AttributeType;\n    redirectAfterCreate?: boolean;\n}\n\nfunction InfosTab({attribute, onPostSave, forcedType, redirectAfterCreate = true}: IInfosTabProps): JSX.Element {\n    const history = useHistory();\n    const isNewAttribute = !attribute;\n    const [saveAttribute, {error}] = useMutation<SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables>(saveAttributeQuery, {\n        // Prevents Apollo from throwing an exception on error state. Errors are managed with the error variable\n        onError: () => undefined,\n        onCompleted: res => {\n            if (history && isNewAttribute && redirectAfterCreate) {\n                history.replace({pathname: '/attributes/edit/' + res.saveAttribute.id});\n            }\n        },\n        update: cache => {\n            // We created a new attribute, invalidate all attributes list cache\n            if (!attribute) {\n                cache.evict({fieldName: 'attributes'});\n            }\n        }\n    });\n\n    const [getAttrById, {data: dataAttrById}] = useLazyQuery<GET_ATTRIBUTES, GET_ATTRIBUTESVariables>(\n        getAttributesQuery,\n        {fetchPolicy: 'no-cache'}\n    );\n\n    const _isIdUnique = async val => {\n        await getAttrById({variables: {id: val}});\n\n        return !!dataAttrById && !!dataAttrById.attributes && !dataAttrById.attributes.list.length;\n    };\n\n    const onSubmitInfos = async (dataToSave: AttributeInfosFormValues) => {\n        const variables: SAVE_ATTRIBUTEVariables = {\n            attrData: {\n                id: dataToSave.id,\n                label: {\n                    fr: dataToSave.label?.fr ?? '',\n                    en: dataToSave.label?.en ?? ''\n                },\n                description:\n                    !dataToSave.description?.fr && !dataToSave.description?.en\n                        ? null\n                        : {\n                              fr: dataToSave.description?.fr ?? '',\n                              en: dataToSave.description?.en ?? ''\n                          },\n                type: dataToSave.type,\n                format: dataToSave.format,\n                readonly: dataToSave.readonly,\n                linked_tree: dataToSave.linked_tree,\n                linked_library: dataToSave.linked_library,\n                reverse_link: dataToSave.reverse_link,\n                multiple_values: dataToSave.multiple_values,\n                unique: dataToSave.unique,\n                versions_conf: {\n                    versionable: dataToSave?.versions_conf?.versionable ?? false,\n                    mode: dataToSave?.versions_conf?.mode,\n                    profile: dataToSave?.versions_conf?.profile\n                }\n            }\n        };\n\n        await saveAttribute({\n            variables\n        });\n\n        if (onPostSave) {\n            onPostSave(dataToSave);\n        }\n    };\n\n    const formErrors = error?.graphQLErrors?.length ? error.graphQLErrors[0] : null;\n\n    return (\n        <InfosForm\n            onSubmitInfos={onSubmitInfos}\n            errors={(formErrors as unknown) as IFormError}\n            attribute={attribute || null}\n            readonly={false}\n            onCheckIdExists={_isIdUnique}\n            forcedType={forcedType}\n        />\n    );\n}\n\nexport default InfosTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport InfosTab from './InfosTab';\nexport default InfosTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Modal} from 'semantic-ui-react';\nimport {AttributeType} from '../../../_gqlTypes/globalTypes';\nimport EditAttribute from '../EditAttribute';\nimport {OnAttributePostSaveFunc} from '../EditAttribute/EditAttribute';\n\ninterface IAttributeCreationModalProps {\n    open: boolean;\n    onPostSave: OnAttributePostSaveFunc;\n    onClose: () => void;\n    forcedType?: AttributeType;\n}\n\nfunction AttributeCreationModal({open, onPostSave, onClose, forcedType}: IAttributeCreationModalProps): JSX.Element {\n    const {t} = useTranslation();\n    return (\n        <>\n            <Modal size=\"large\" open={open} onClose={onClose} centered closeIcon>\n                <Modal.Header>{t('attributes.new')}</Modal.Header>\n                <Modal.Content>\n                    <EditAttribute attributeId={null} onPostSave={onPostSave} forcedType={forcedType} />\n                </Modal.Content>\n            </Modal>\n        </>\n    );\n}\n\nexport default AttributeCreationModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributeCreationModal from './AttributeCreationModal';\nexport default AttributeCreationModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {OnAttributePostSaveFunc} from 'components/attributes/EditAttribute/EditAttribute';\nimport EditAttributeModal from 'components/attributes/EditAttributeModal';\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Icon, Table} from 'semantic-ui-react';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list_StandardAttribute_metadata_fields} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport useLang from '../../../../../../hooks/useLang';\nimport {localizedLabel} from '../../../../../../utils';\nimport {AttributeType} from '../../../../../../_gqlTypes/globalTypes';\nimport ConfirmedButton from '../../../../../shared/ConfirmedButton';\nimport DeleteButton from '../../../../../shared/DeleteButton';\nimport AttributeCreationModal from '../../../../AttributeCreationModal';\nimport AttributesSelectionModal from '../../../../AttributesSelectionModal';\n\ninterface IMetadataListProps {\n    fields: GET_ATTRIBUTE_BY_ID_attributes_list_StandardAttribute_metadata_fields[];\n    readonly: boolean;\n    onChange: (newList: string[]) => void;\n}\n\nfunction MetadataList({fields, readonly, onChange}: IMetadataListProps): JSX.Element {\n    const {lang} = useLang();\n    const {t} = useTranslation();\n    const [attributeEditionModalDisplay, setAttributeEditionModalDisplay] = useState<{\n        visible: boolean;\n        attribute?: string;\n    }>({\n        visible: false\n    });\n\n    const [showNewAttrModal, setShowNewAttrModal] = useState<boolean>(false);\n    const [showAddExistingAttrModal, setShowAddExistingAttrModal] = useState<boolean>(false);\n    const _openNewAttrModal = () => {\n        setShowNewAttrModal(true);\n    };\n\n    const _closeNewAttrModal = () => {\n        setShowNewAttrModal(false);\n    };\n\n    const _openAddExistingAttrModal = () => {\n        setShowAddExistingAttrModal(true);\n    };\n\n    const _closeAddExistingAttrModal = () => {\n        setShowAddExistingAttrModal(false);\n    };\n\n    const _handleDelete = (fieldToDelete: string) =>\n        onChange(fields.filter(f => f.id !== fieldToDelete).map(f => f.id));\n\n    const _handleAddNewField: OnAttributePostSaveFunc = fieldToAdd => {\n        onChange([...fields.map(f => f.id), fieldToAdd.id]);\n        _closeNewAttrModal();\n    };\n\n    const _handleAddExistingField = (fieldIds: string[]) => {\n        onChange([...fields.map(f => f.id), ...fieldIds]);\n        _closeAddExistingAttrModal();\n    };\n\n    const _handleCloseAttributeEditionModal = () => setAttributeEditionModalDisplay({visible: false});\n\n    return (\n        <>\n            {!readonly && (\n                <>\n                    <Button\n                        data-test-id=\"metadata-add-field-new\"\n                        icon\n                        labelPosition=\"left\"\n                        size=\"medium\"\n                        onClick={_openNewAttrModal}\n                    >\n                        <Icon name=\"plus\" />\n                        {t('attributes.new')}\n                    </Button>\n                    <Button\n                        data-test-id=\"metadata-add-field-existing\"\n                        icon\n                        labelPosition=\"left\"\n                        size=\"medium\"\n                        onClick={_openAddExistingAttrModal}\n                    >\n                        <Icon name=\"plus\" />\n                        {t('libraries.link_existing_attribute')}\n                    </Button>\n                </>\n            )}\n\n            <Table selectable striped>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell width={4}>{t('attributes.ID')}</Table.HeaderCell>\n                        <Table.HeaderCell width={4}>{t('attributes.label')}</Table.HeaderCell>\n                        <Table.HeaderCell width={3}>{t('attributes.type')}</Table.HeaderCell>\n                        <Table.HeaderCell width={3}>{t('attributes.format')}</Table.HeaderCell>\n                        <Table.HeaderCell width={1} />\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {fields.map((f: GET_ATTRIBUTE_BY_ID_attributes_list_StandardAttribute_metadata_fields) => {\n                        const _onDelete = () => _handleDelete(f.id);\n                        const _handleRowClick = () => {\n                            setAttributeEditionModalDisplay({visible: true, attribute: f.id});\n                        };\n                        const fieldLabel = localizedLabel(f.label, lang);\n                        return (\n                            <Table.Row key={f.id} onClick={_handleRowClick}>\n                                <Table.Cell>{f.id}</Table.Cell>\n                                <Table.Cell>{fieldLabel}</Table.Cell>\n                                <Table.Cell>{t('attributes.types.' + f.type)}</Table.Cell>\n                                <Table.Cell>{f.format ? t('attributes.formats.' + f.format) : ''}</Table.Cell>\n                                <Table.Cell>\n                                    {!readonly && (\n                                        <ConfirmedButton\n                                            data-test-id=\"metadata-delete-button\"\n                                            confirmMessage={t('attributes.metadata_field_delete_confirm', {\n                                                attrLabel: fieldLabel\n                                            })}\n                                            action={_onDelete}\n                                        >\n                                            <DeleteButton disabled={false} />\n                                        </ConfirmedButton>\n                                    )}\n                                </Table.Cell>\n                            </Table.Row>\n                        );\n                    })}\n                </Table.Body>\n            </Table>\n\n            {!readonly && (\n                <>\n                    {showNewAttrModal && (\n                        <AttributeCreationModal\n                            open={showNewAttrModal}\n                            onClose={_closeNewAttrModal}\n                            onPostSave={_handleAddNewField}\n                            forcedType={AttributeType.simple}\n                        />\n                    )}\n                    {showAddExistingAttrModal && (\n                        <AttributesSelectionModal\n                            openModal={showAddExistingAttrModal}\n                            onClose={_closeAddExistingAttrModal}\n                            onSubmit={_handleAddExistingField}\n                            selection={fields.map(f => f.id)}\n                            filter={{type: [AttributeType.simple]}}\n                        />\n                    )}\n                    {attributeEditionModalDisplay.visible && (\n                        <EditAttributeModal\n                            open={true}\n                            onClose={_handleCloseAttributeEditionModal}\n                            attribute={attributeEditionModalDisplay.attribute}\n                        />\n                    )}\n                </>\n            )}\n        </>\n    );\n}\n\nexport default MetadataList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport MetadataList from './MetadataList';\nexport default MetadataList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation} from '@apollo/client';\nimport React from 'react';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport {getAttributesQuery} from '../../../../../queries/attributes/getAttributesQuery';\nimport {saveAttributeQuery} from '../../../../../queries/attributes/saveAttributeMutation';\nimport {SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables} from '../../../../../_gqlTypes/SAVE_ATTRIBUTE';\nimport MetadataList from './MetadataList';\n\ninterface IMetadataTabProps {\n    attribute: GET_ATTRIBUTE_BY_ID_attributes_list;\n    readonly: boolean;\n}\n\nfunction MetadataTab({attribute, readonly}: IMetadataTabProps): JSX.Element {\n    const [saveAttribute] = useMutation<SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables>(saveAttributeQuery);\n\n    const _handleChange = (fields: string[]) =>\n        saveAttribute({\n            variables: {attrData: {id: attribute.id, metadata_fields: fields}},\n            refetchQueries: [{query: getAttributesQuery, variables: {id: attribute.id}}]\n        });\n\n    return <MetadataList fields={attribute.metadata_fields || []} readonly={readonly} onChange={_handleChange} />;\n}\n\nexport default MetadataTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport MetadataTab from './MetadataTab';\nexport default MetadataTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsSettings from 'components/shared/PermissionsSettings';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Tab} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport useLang from '../../../../../../hooks/useLang';\nimport {localizedLabel} from '../../../../../../utils';\nimport {GET_LIB_BY_ID_libraries_list_permissions_conf_permissionTreeAttributes_TreeAttribute} from '../../../../../../_gqlTypes/GET_LIB_BY_ID';\nimport {PermissionsRelation, PermissionTypes, Treepermissions_confInput} from '../../../../../../_gqlTypes/globalTypes';\nimport DefinePermByUserGroupView from '../../../../../permissions/DefinePermByUserGroupView';\nimport DefineTreePermissionsView from '../../../../../permissions/DefineTreePermissionsView';\n\ninterface IPermissionsContentProps {\n    attribute: GET_ATTRIBUTE_BY_ID_attributes_list;\n    onSubmitSettings: (conf: Treepermissions_confInput) => void;\n    readonly: boolean;\n}\n\nconst PermissionsSettingsBtn = styled(PermissionsSettings)`\n    position: absolute;\n    top: 2rem;\n    right: 2rem;\n`;\n\nfunction PermissionsContent({attribute, onSubmitSettings, readonly}: IPermissionsContentProps): JSX.Element {\n    const {t} = useTranslation();\n    const {lang} = useLang();\n    const defaultPermsConf = {permissionTreeAttributes: [], relation: PermissionsRelation.and};\n\n    const _handleChangeSettings = (settings: Treepermissions_confInput) => {\n        onSubmitSettings(settings);\n    };\n\n    const permsConf = attribute.permissions_conf || defaultPermsConf;\n    const panes = permsConf.permissionTreeAttributes.map(a => ({\n        key: a.id,\n        menuItem: localizedLabel(a.label, lang),\n        render: () => (\n            <Tab.Pane key={a.id} className=\"grow\">\n                {((a as unknown) as GET_LIB_BY_ID_libraries_list_permissions_conf_permissionTreeAttributes_TreeAttribute)\n                    .linked_tree ? (\n                    <DefineTreePermissionsView\n                        key={a.id}\n                        treeAttribute={a}\n                        permissionType={PermissionTypes.record_attribute}\n                        applyTo={attribute.id}\n                        readOnly={readonly}\n                    />\n                ) : (\n                    <p>Missing tree ID</p>\n                )}\n            </Tab.Pane>\n        )\n    }));\n\n    panes.unshift({\n        key: 'libPermissions',\n        menuItem: t('permissions.attribute_tab_name'),\n        render: () => (\n            <Tab.Pane key=\"libPermissions\" className=\"grow\">\n                {\n                    <DefinePermByUserGroupView\n                        type={PermissionTypes.attribute}\n                        key=\"attrPermissions\"\n                        applyTo={attribute.id}\n                        readOnly={readonly}\n                    />\n                }\n            </Tab.Pane>\n        )\n    });\n\n    return (\n        <div className=\"flex-col height100\">\n            <PermissionsSettingsBtn\n                permissionsSettings={attribute.permissions_conf}\n                onChangeSettings={_handleChangeSettings}\n                readonly={readonly}\n            />\n            <Tab panes={panes} className=\"grow flex-col height100\" />\n        </div>\n    );\n}\n\nexport default PermissionsContent;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsContent from './PermissionsContent';\nexport default PermissionsContent;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation} from '@apollo/client';\nimport React from 'react';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport {saveAttributeQuery} from '../../../../../queries/attributes/saveAttributeMutation';\nimport {Treepermissions_confInput} from '../../../../../_gqlTypes/globalTypes';\nimport {SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables} from '../../../../../_gqlTypes/SAVE_ATTRIBUTE';\nimport PermissionsContent from './PermissionsContent';\n\ninterface IPermissionsTabProps {\n    attribute: GET_ATTRIBUTE_BY_ID_attributes_list;\n    readonly: boolean;\n}\n\nfunction PermissionsTab({attribute, readonly}: IPermissionsTabProps): JSX.Element {\n    const [saveAttribute] = useMutation<SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables>(saveAttributeQuery);\n\n    const _handleSubmitSettings = (conf: Treepermissions_confInput) => {\n        saveAttribute({\n            variables: {\n                attrData: {\n                    id: attribute.id,\n                    permissions_conf: conf\n                }\n            }\n        });\n    };\n\n    return <PermissionsContent attribute={attribute} readonly={readonly} onSubmitSettings={_handleSubmitSettings} />;\n}\n\nexport default PermissionsTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsTab from './PermissionsTab';\nexport default PermissionsTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\nimport {attributeValuesListDetailsFragment} from './attributeFragments';\n\nexport const getAttributeValuesListQuery = gql`\n    ${attributeValuesListDetailsFragment}\n    query GET_ATTRIBUTES_VALUES_LIST($attrId: ID!) {\n        attributes(filters: {id: $attrId}) {\n            list {\n                id\n                label\n                type\n                format\n                ...AttributeValuesListDetails\n                ... on LinkAttribute {\n                    linked_library {\n                        id\n                    }\n                    reverse_link\n                }\n                ... on TreeAttribute {\n                    linked_tree {\n                        id\n                    }\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Icon, List} from 'semantic-ui-react';\nimport {RecordIdentity_whoAmI} from '../../../../../../../_gqlTypes/RecordIdentity';\nimport {ILinkValuesList} from '../../../../../../../_types/attributes';\nimport EditRecordModal from '../../../../../../records/EditRecordModal';\nimport SelectRecordModal from '../../../../../../records/SelectRecordModal';\nimport RecordCard from '../../../../../../shared/RecordCard';\n\ninterface ILinkValuesListProps {\n    values: ILinkValuesList[];\n    onValuesUpdate: (values: ILinkValuesList[]) => void;\n    linkedLibrary: string;\n}\n\nfunction LinkValuesList({values, onValuesUpdate, linkedLibrary}: ILinkValuesListProps): JSX.Element {\n    const {t} = useTranslation();\n    const orTxt = t('admin.or');\n    const [editRecordModalOpen, setEditRecordModalOpen] = useState<boolean>(false);\n    const [editedRecord, setEditedRecord] = useState<string>();\n    const [openSelectRecordModal, setOpenSelectRecordModal] = useState<boolean>(false);\n\n    const _handleOpenSelectRecordModal = () => setOpenSelectRecordModal(true);\n    const _handleCloseSelectRecordModal = () => setOpenSelectRecordModal(false);\n\n    const _handleOpenEditRecordModal = () => setEditRecordModalOpen(true);\n    const _handleCloseEditRecordModal = () => setEditRecordModalOpen(false);\n\n    const _addElement = record => {\n        // Don't add record if already present in values\n        if (!values.filter(v => v.whoAmI.id === record.id).length) {\n            const newValuesList = [...values, {whoAmI: record}];\n            onValuesUpdate(newValuesList);\n        }\n    };\n\n    const _handleSelectElement = (record?: RecordIdentity_whoAmI) => {\n        if (!record) {\n            return;\n        }\n\n        _addElement(record);\n\n        _handleCloseSelectRecordModal();\n    };\n\n    const _handleCloseRecordEdition = (record?: RecordIdentity_whoAmI) => {\n        _handleCloseEditRecordModal();\n        if (!record) {\n            return;\n        }\n\n        if (!editedRecord) {\n            // We come from record creation, let's add it\n            _addElement(record);\n        }\n    };\n\n    const _handleOpenCreateRecord = () => {\n        setEditedRecord(undefined);\n        _handleOpenEditRecordModal();\n    };\n\n    const _handleOpenEditRecord = (recordId: string) => () => {\n        setEditedRecord(recordId);\n        _handleOpenEditRecordModal();\n    };\n\n    const _deleteValue = (i: number) => (e: React.SyntheticEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const newValuesList = [...values.slice(0, i), ...values.slice(i + 1)];\n        onValuesUpdate(newValuesList);\n    };\n\n    return (\n        <>\n            <Button.Group size=\"tiny\">\n                <Button data-test-id=\"open-create-record\" type=\"button\" onClick={_handleOpenCreateRecord}>\n                    <Icon name=\"plus circle\" />\n                    {t('records.create_record')}\n                </Button>\n                <Button.Or text={orTxt} />\n                <Button data-test-id=\"open-select-record\" type=\"button\" onClick={_handleOpenSelectRecordModal}>\n                    <Icon name=\"search\" />\n                    {t('records.select_record')}\n                </Button>\n            </Button.Group>\n            <List data-test-id=\"values-list-wrapper\" style={{width: '100%'}} divided>\n                {values.map((val, i) => (\n                    <List.Item\n                        data-test-id=\"values-list-value\"\n                        key={`values_${i}`}\n                        onClick={_handleOpenEditRecord(val.whoAmI.id)}\n                    >\n                        <List.Content floated=\"left\">\n                            <RecordCard record={val.whoAmI} />\n                        </List.Content>\n                        <List.Content floated=\"right\">\n                            <Button data-test-id=\"link-value-delete-btn\" icon=\"trash\" onClick={_deleteValue(i)} />\n                        </List.Content>\n                    </List.Item>\n                ))}\n            </List>\n            <EditRecordModal\n                open={editRecordModalOpen}\n                onClose={_handleCloseRecordEdition}\n                recordId={editedRecord}\n                library={linkedLibrary}\n            />\n            <SelectRecordModal\n                open={openSelectRecordModal}\n                library={linkedLibrary}\n                onClose={_handleCloseSelectRecordModal}\n                onSelect={_handleSelectElement}\n            />\n        </>\n    );\n}\n\nexport default LinkValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport LinkValuesList from './LinkValuesList';\nexport default LinkValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport dayjs from 'dayjs';\nimport React, {ChangeEvent, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Input} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {IDateRangeValue} from '_types/attributes';\n\ninterface IDateRangeValueProps {\n    value: IDateRangeValue;\n    onChange: (value: IDateRangeValue) => void;\n    onDelete: () => void;\n}\n\nconst InputsWrapper = styled.div`\n    display: flex;\n\n    & > * {\n        flex-grow: 1;\n        margin-right: 0.25em;\n    }\n\n    &&& input {\n        width: auto;\n    }\n`;\n\nfunction DateRangeValue({value, onChange, onDelete}: IDateRangeValueProps): JSX.Element {\n    const [dates, setDates] = useState<IDateRangeValue>(value ?? {from: '', to: ''});\n    const {t} = useTranslation();\n\n    const _handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const newValue = dayjs(e.target.value).unix();\n\n        const newDates = {...dates, [e.target.name]: newValue};\n\n        if (newDates.from > newDates.to) {\n            newDates.to = newDates.from;\n        }\n\n        setDates(newDates);\n\n        if (newDates.from && newDates.to) {\n            onChange(newDates);\n        }\n    };\n\n    const inputValueFrom = isNaN(Number(dates.from)) ? '' : dayjs(Number(dates.from) * 1000).format('YYYY-MM-DD');\n    const inputValueTo = isNaN(Number(dates.to)) ? '' : dayjs(Number(dates.to) * 1000).format('YYYY-MM-DD');\n    const _handleDelete = () => {\n        onDelete();\n    };\n\n    return (\n        <InputsWrapper>\n            <Input\n                value={inputValueFrom}\n                name=\"from\"\n                aria-label=\"date-from\"\n                label={{basic: true, content: t('attributes.date_range_from')}}\n                size=\"small\"\n                type=\"date\"\n                onChange={_handleChange}\n                onBlur={_handleChange}\n                transparent={false}\n                role=\"textbox\"\n            />\n            <Input\n                value={inputValueTo}\n                name=\"to\"\n                aria-label=\"date-to\"\n                label={{basic: true, content: t('attributes.date_range_to')}}\n                size=\"small\"\n                type=\"date\"\n                onChange={_handleChange}\n                onBlur={_handleChange}\n                min={inputValueFrom}\n                role=\"textbox\"\n            />\n            <Button icon=\"trash\" style={{flexGrow: 0}} onClick={_handleDelete} />\n        </InputsWrapper>\n    );\n}\n\nexport default DateRangeValue;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DateRangeValue from './DateRangeValue';\nexport default DateRangeValue;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport dayjs from 'dayjs';\nimport React, {ChangeEvent, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Icon, Input, List} from 'semantic-ui-react';\nimport {GET_ATTRIBUTES_VALUES_LIST_attributes_list} from '_gqlTypes/GET_ATTRIBUTES_VALUES_LIST';\nimport {AttributeFormat} from '_gqlTypes/globalTypes';\nimport {IDateRangeValue, StandardValuesListType, ValuesList} from '../../../../../../../_types/attributes';\nimport DateRangeValue from './DateRangeValue';\n\ninterface IStandardValuesListProps {\n    values: ValuesList;\n    onValuesUpdate: (values: string[]) => void;\n    attribute: GET_ATTRIBUTES_VALUES_LIST_attributes_list;\n}\n\nconst inputTypeByFormat = {\n    [AttributeFormat.text]: 'text',\n    [AttributeFormat.date]: 'date',\n    [AttributeFormat.numeric]: 'number',\n    [AttributeFormat.boolean]: 'checkbox',\n    [AttributeFormat.extended]: 'text',\n    [AttributeFormat.encrypted]: 'text'\n};\n\nfunction StandardValuesList({values: initialValues, onValuesUpdate, attribute}: IStandardValuesListProps): JSX.Element {\n    const {t} = useTranslation();\n    const [values, setValues] = useState<StandardValuesListType>(initialValues as string[]);\n\n    const _handleDateRangeValueChange = (i: number) => (value: IDateRangeValue) => {\n        const newValues = [...values.slice(0, i), value, ...values.slice(i + 1)];\n        setValues(newValues);\n        _submitValues(newValues);\n    };\n\n    const _editValue = (i: number) => (e: ChangeEvent<HTMLInputElement>) => {\n        const inputValue = e.target.value;\n\n        const newValue = String(attribute.format === AttributeFormat.date ? dayjs(inputValue).unix() : inputValue);\n\n        setValues([...values.slice(0, i), newValue, ...values.slice(i + 1)]);\n    };\n\n    const _addValue = () => {\n        const newValue = attribute.format === AttributeFormat.date ? dayjs().unix() : '';\n        setValues([...values, String(newValue)]);\n    };\n\n    const _deleteValue = (i: number) => () => {\n        const newValuesList = [...values.slice(0, i), ...values.slice(i + 1)];\n        setValues(newValuesList);\n\n        _submitValues(newValuesList);\n    };\n\n    const _handleBlur = () => _submitValues(values);\n\n    const _submitValues = (valuesToSubmit: StandardValuesListType) =>\n        onValuesUpdate(valuesToSubmit.map(v => (typeof v === 'object' ? JSON.stringify(v) : v)));\n\n    // Save values when pressing \"enter\"\n    const _handleKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            _submitValues(values);\n        }\n    };\n\n    return (\n        <>\n            <Button icon labelPosition=\"left\" size=\"medium\" aria-label=\"add-value\" onClick={_addValue} type=\"button\">\n                <Icon name=\"plus\" />\n                {t('attributes.add_value')}\n            </Button>\n            <List style={{width: '100%'}}>\n                {values.map((val, i) => {\n                    let inputValue = val;\n\n                    if (attribute.format === AttributeFormat.date) {\n                        const dayVal = isNaN(Number(val)) ? dayjs() : dayjs(Number(val) * 1000);\n                        inputValue = dayVal.format('YYYY-MM-DD');\n                    }\n\n                    // We add values.length to element key to avoid some issues when deleting first value\n                    return (\n                        <List.Item aria-label=\"values-list-value\" key={`values_${i}_${values.length}`}>\n                            <List.Content>\n                                {attribute.format === AttributeFormat.date_range ? (\n                                    <DateRangeValue\n                                        onChange={_handleDateRangeValueChange(i)}\n                                        onDelete={_deleteValue(i)}\n                                        value={inputValue as IDateRangeValue}\n                                    />\n                                ) : (\n                                    <Input\n                                        value={inputValue}\n                                        size=\"small\"\n                                        fluid\n                                        type={inputTypeByFormat[attribute.format]}\n                                        onChange={_editValue(i)}\n                                        onBlur={_handleBlur}\n                                        onKeyPress={_handleKeyPress}\n                                        action={{\n                                            icon: 'trash',\n                                            onClick: _deleteValue(i),\n                                            type: 'button',\n                                            'aria-label': 'delete-value'\n                                        }}\n                                    />\n                                )}\n                            </List.Content>\n                        </List.Item>\n                    );\n                })}\n            </List>\n        </>\n    );\n}\n\nexport default StandardValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport StandardValuesList from './StandardValuesList';\nexport default StandardValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {TreeItem} from 'react-sortable-tree';\nimport {Button, Icon, List} from 'semantic-ui-react';\nimport {RecordIdentity_whoAmI} from '../../../../../../../_gqlTypes/RecordIdentity';\nimport {ITreeValuesList} from '../../../../../../../_types/attributes';\nimport {ITreeLinkElement} from '../../../../../../../_types/records';\nimport EditRecordModal from '../../../../../../records/EditRecordModal';\nimport TreeNodeBreadcrumb from '../../../../../../shared/TreeNodeBreadcrumb';\nimport SelectTreeNodeModal from '../../../../../../trees/SelectTreeNodeModal';\n\ninterface ITreeValuesListProps {\n    values: ITreeValuesList[];\n    onValuesUpdate: (values: ITreeValuesList[]) => void;\n    linkedTree: string;\n}\n\nfunction TreeValuesList({values, onValuesUpdate, linkedTree}: ITreeValuesListProps): JSX.Element {\n    const {t} = useTranslation();\n\n    const [isOpenSelectTreeNodeModal, setIsOpenSelectTreeNodeModal] = useState<boolean>(false);\n    const _handleOpenSelectTreeNodeModal = () => setIsOpenSelectTreeNodeModal(true);\n    const _handleCloseSelectTreeNodeModal = () => setIsOpenSelectTreeNodeModal(false);\n\n    const [editRecordModalOpen, setEditRecordModalOpen] = useState<boolean>(false);\n    const _handleOpenEditRecordModal = () => setEditRecordModalOpen(true);\n    const _handleCloseEditRecordModal = () => setEditRecordModalOpen(false);\n\n    const [editedRecord, setEditedRecord] = useState<RecordIdentity_whoAmI>();\n\n    const _onTreeNodeSelected = ({node}: TreeItem) => {\n        _handleCloseSelectTreeNodeModal();\n\n        if (\n            values.filter(\n                v => v.record.whoAmI.id === node.record.whoAmI.id && v.record.whoAmI.id === node.record.whoAmI.id\n            ).length\n        ) {\n            return;\n        }\n\n        const newValuesList = [\n            ...values,\n            {\n                id: node.id,\n                record: {whoAmI: node.record.whoAmI},\n                ancestors: node.parents.map(p => ({\n                    record: {\n                        whoAmI: p.whoAmI\n                    }\n                }))\n            }\n        ];\n        onValuesUpdate(newValuesList);\n    };\n\n    const _deleteValue = (i: number) => (e: React.SyntheticEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const newValuesList = [...values.slice(0, i), ...values.slice(i + 1)];\n        onValuesUpdate(newValuesList);\n    };\n\n    const breadcrumbActions = [\n        {\n            text: t('records.edit'),\n            icon: 'edit outline',\n            action: (r: RecordIdentity_whoAmI) => {\n                setEditedRecord(r);\n                _handleOpenEditRecordModal();\n            }\n        }\n    ];\n\n    return (\n        <>\n            <Button\n                icon\n                labelPosition=\"left\"\n                size=\"medium\"\n                data-test-id=\"values-list-add-btn\"\n                onClick={_handleOpenSelectTreeNodeModal}\n                type=\"button\"\n            >\n                <Icon name=\"plus\" />\n                {t('attributes.add_value')}\n            </Button>\n            <List data-test-id=\"values-list-wrapper\" style={{width: '100%'}} divided>\n                {values.map((val, i) => {\n                    return (\n                        <List.Item data-test-id=\"values-list-value\" key={`values_${i}`}>\n                            <List.Content floated=\"left\">\n                                <TreeNodeBreadcrumb element={val as ITreeLinkElement} actions={breadcrumbActions} />\n                            </List.Content>\n                            <List.Content floated=\"right\">\n                                <Button data-test-id=\"link-value-delete-btn\" icon=\"trash\" onClick={_deleteValue(i)} />\n                            </List.Content>\n                        </List.Item>\n                    );\n                })}\n            </List>\n            <SelectTreeNodeModal\n                open={isOpenSelectTreeNodeModal}\n                onClose={_handleCloseSelectTreeNodeModal}\n                tree={linkedTree}\n                onSelect={_onTreeNodeSelected}\n            />\n            <EditRecordModal\n                open={editRecordModalOpen}\n                onClose={_handleCloseEditRecordModal}\n                recordId={editedRecord?.id || ''}\n                library={editedRecord?.library.id || ''}\n            />\n        </>\n    );\n}\n\nexport default TreeValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport TreeValuesList from './TreeValuesList';\nexport default TreeValuesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useCallback, useEffect, useReducer} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Divider, Form} from 'semantic-ui-react';\nimport {\n    GET_ATTRIBUTES_VALUES_LIST_attributes_list,\n    GET_ATTRIBUTES_VALUES_LIST_attributes_list_LinkAttribute,\n    GET_ATTRIBUTES_VALUES_LIST_attributes_list_TreeAttribute\n} from '../../../../../../_gqlTypes/GET_ATTRIBUTES_VALUES_LIST';\nimport {AttributeFormat, AttributeType, ValuesListConfInput} from '../../../../../../_gqlTypes/globalTypes';\nimport {\n    IDateRangeValue,\n    ILinkValuesList,\n    ITreeValuesList,\n    IValuesListConf,\n    ValuesList\n} from '../../../../../../_types/attributes';\nimport LinkValuesList from './LinkValuesList';\nimport StandardValuesList from './StandardValuesList';\nimport TreeValuesList from './TreeValuesList';\n\ninterface IValuesListFormProps {\n    attribute: GET_ATTRIBUTES_VALUES_LIST_attributes_list;\n    onSubmit: (valuesListConf: ValuesListConfInput) => void;\n}\n\ninterface IValuesFormState {\n    execSubmit: boolean;\n    conf: IValuesListConf;\n}\n\nconst reducer = (state: IValuesFormState, action) => {\n    const newConf = {...state.conf};\n    let execSubmit = true;\n\n    switch (action.type) {\n        case 'toggle_enable':\n            newConf.enable = !newConf.enable;\n            break;\n        case 'toggle_allow_free_entry':\n            newConf.allowFreeEntry = !newConf.allowFreeEntry;\n            break;\n        case 'change_values':\n            if (JSON.stringify(newConf.values) === JSON.stringify(action.values)) {\n                // Don't update values as nothing has changed\n                execSubmit = false;\n            }\n            newConf.values = [...new Set<string>(action.values)];\n            break;\n        case 'submit_done':\n            execSubmit = false;\n            break;\n    }\n\n    return {...state, execSubmit, conf: newConf};\n};\n\nconst _getValuesField = (attribute: GET_ATTRIBUTES_VALUES_LIST_attributes_list): string => {\n    switch (attribute.type) {\n        case AttributeType.simple:\n            return attribute.format === AttributeFormat.date_range ? 'dateRangeValues' : 'values';\n        case AttributeType.advanced:\n            return 'values';\n        case AttributeType.simple_link:\n            return 'linkValues';\n        case AttributeType.advanced_link:\n            return 'linkValues';\n        case AttributeType.tree:\n            return 'treeValues';\n    }\n};\n\nfunction ValuesListForm({attribute, onSubmit}: IValuesListFormProps): JSX.Element {\n    const {t} = useTranslation();\n\n    const initialState: IValuesFormState = {execSubmit: false, conf: {enable: false}};\n\n    if (attribute.values_list) {\n        initialState.conf = {\n            ...attribute.values_list,\n            values: attribute.values_list[_getValuesField(attribute)]\n        };\n    }\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const _toggleEnable = () => dispatch({type: 'toggle_enable'});\n    const _toggleAllowFreeEntry = () => dispatch({type: 'toggle_allow_free_entry'});\n\n    const _extractValuesToSave = useCallback(\n        (conf: IValuesListConf): string[] => {\n            let valuesToSave: string[] = [];\n\n            switch (attribute.type) {\n                case AttributeType.simple:\n                case AttributeType.advanced:\n                    if (attribute.format === AttributeFormat.date_range) {\n                        valuesToSave = ((conf?.values || []) as IDateRangeValue[]).map(v =>\n                            typeof v === 'object' ? JSON.stringify(v) : v\n                        );\n                    } else {\n                        valuesToSave = (conf?.values || []) as string[];\n                    }\n\n                    break;\n                case AttributeType.simple_link:\n                case AttributeType.advanced_link:\n                    const linkValues = conf.values as ILinkValuesList[];\n                    valuesToSave = linkValues ? linkValues.map(v => v.whoAmI.id) : [];\n                    break;\n                case AttributeType.tree:\n                    const treeValues = conf.values as ITreeValuesList[];\n                    valuesToSave = treeValues ? treeValues.map(v => v.id) : [];\n                    break;\n            }\n\n            return valuesToSave.filter(v => v !== '');\n        },\n        [attribute]\n    );\n\n    const _handleValuesChange = (newValues: ValuesList) => {\n        dispatch({type: 'change_values', values: newValues});\n    };\n\n    useEffect(() => {\n        // Submit if something has changed\n        if (state.execSubmit) {\n            onSubmit({\n                enable: state.conf.enable,\n                allowFreeEntry: state.conf.allowFreeEntry,\n                values: _extractValuesToSave(state.conf)\n            });\n            dispatch({type: 'submit_done'});\n        }\n    }, [state, _extractValuesToSave, onSubmit]);\n\n    const _getListByType = (attrType: AttributeType) => {\n        switch (attrType) {\n            case AttributeType.simple:\n            case AttributeType.advanced:\n                return (\n                    <StandardValuesList\n                        values={state.conf.values || []}\n                        onValuesUpdate={_handleValuesChange}\n                        attribute={attribute}\n                    />\n                );\n            case AttributeType.simple_link:\n            case AttributeType.advanced_link:\n                return (\n                    <LinkValuesList\n                        values={(state.conf.values as ILinkValuesList[]) || []}\n                        onValuesUpdate={_handleValuesChange}\n                        linkedLibrary={\n                            (attribute as GET_ATTRIBUTES_VALUES_LIST_attributes_list_LinkAttribute).linked_library\n                                ?.id || ''\n                        }\n                    />\n                );\n            case AttributeType.tree:\n                return (\n                    <TreeValuesList\n                        values={(state.conf.values as ITreeValuesList[]) || []}\n                        onValuesUpdate={_handleValuesChange}\n                        linkedTree={\n                            (attribute as GET_ATTRIBUTES_VALUES_LIST_attributes_list_TreeAttribute).linked_tree?.id ||\n                            ''\n                        }\n                    />\n                );\n        }\n    };\n\n    return (\n        <Form>\n            <Form.Group inline={false}>\n                <Form.Checkbox\n                    name=\"enable\"\n                    toggle\n                    label={t('attributes.values_list_enable')}\n                    checked={state.conf.enable}\n                    onChange={_toggleEnable}\n                />\n                {state.conf.enable && (\n                    <Form.Checkbox\n                        name=\"allowFreeEntry\"\n                        toggle\n                        label={t('attributes.allow_free_entry')}\n                        checked={!!state.conf.allowFreeEntry}\n                        onChange={_toggleAllowFreeEntry}\n                    />\n                )}\n            </Form.Group>\n            {state.conf.enable && (\n                <>\n                    <Divider horizontal>{t('attributes.values')}</Divider>\n                    {_getListByType(attribute.type)}\n                </>\n            )}\n        </Form>\n    );\n}\n\nexport default ValuesListForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ValuesListForm from './ValuesListForm';\nexport default ValuesListForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation, useQuery} from '@apollo/client';\nimport React from 'react';\nimport {getAttributeValuesListQuery} from '../../../../../queries/attributes/getAttributeValuesListQuery';\nimport {saveAttributeQuery} from '../../../../../queries/attributes/saveAttributeMutation';\nimport {\n    GET_ATTRIBUTES_VALUES_LIST,\n    GET_ATTRIBUTES_VALUES_LISTVariables\n} from '../../../../../_gqlTypes/GET_ATTRIBUTES_VALUES_LIST';\nimport {ValuesListConfInput} from '../../../../../_gqlTypes/globalTypes';\nimport {SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables} from '../../../../../_gqlTypes/SAVE_ATTRIBUTE';\nimport Loading from '../../../../shared/Loading';\nimport ValuesListForm from './ValuesListForm';\n\ninterface IValuesListTabProps {\n    attributeId: string;\n}\n\nfunction ValuesListTab({attributeId}: IValuesListTabProps): JSX.Element {\n    const {loading, error, data} = useQuery<GET_ATTRIBUTES_VALUES_LIST, GET_ATTRIBUTES_VALUES_LISTVariables>(\n        getAttributeValuesListQuery,\n        {variables: {attrId: attributeId}}\n    );\n\n    const [saveAttribute, {error: saveError}] = useMutation<SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables>(\n        saveAttributeQuery\n    );\n\n    const _handleSubmit = (valuesListConf: ValuesListConfInput) => {\n        saveAttribute({variables: {attrData: {id: attributeId, values_list: valuesListConf}}});\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (error) {\n        return <div className=\"error\">ERROR</div>;\n    }\n\n    if (saveError) {\n        return <div className=\"error\">SAVE ERROR</div>;\n    }\n\n    if (!data?.attributes?.list.length) {\n        return <div>Unknown attribute</div>;\n    }\n\n    return <ValuesListForm attribute={data?.attributes?.list[0]} onSubmit={_handleSubmit} />;\n}\n\nexport default ValuesListTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ValuesListTab from './ValuesListTab';\nexport default ValuesListTab;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {Header, Tab, TabProps} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {GET_ATTRIBUTE_BY_ID_attributes_list} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport useLang from '../../../../hooks/useLang';\nimport {localizedLabel} from '../../../../utils/utils';\nimport {AttributeType} from '../../../../_gqlTypes/globalTypes';\nimport {OnAttributePostSaveFunc} from '../EditAttribute';\nimport ActionsListTab from './ActionsListTab';\nimport EmbeddedFieldsTab from './EmbeddedFieldsTab';\nimport InfosTab from './InfosTab';\nimport MetadataTab from './MetadataTab';\nimport PermissionsTab from './PermissionsTab';\nimport ValuesListTab from './ValuesListTab';\n\ninterface IEditAttributeTabsProps {\n    attribute?: GET_ATTRIBUTE_BY_ID_attributes_list;\n    onPostSave?: OnAttributePostSaveFunc;\n    redirectAfterCreate?: boolean;\n    forcedType?: AttributeType;\n}\n\nconst GridTab = styled(Tab)`\n    display: grid;\n    grid-template-rows: 4rem 1fr;\n`;\nGridTab.displayName = 'Tab';\n\nfunction EditAttributeTabs({\n    attribute,\n    onPostSave,\n    forcedType,\n    redirectAfterCreate\n}: IEditAttributeTabsProps): JSX.Element {\n    const {t} = useTranslation();\n    const availableLanguages = useLang().lang;\n    const history = useHistory();\n    const location = useLocation();\n    const headerLabel =\n        !!attribute && attribute.label ? localizedLabel(attribute.label, availableLanguages) : t('attributes.new');\n\n    const panes = [\n        {\n            key: 'infos',\n            menuItem: t('attributes.informations'),\n            render: () => (\n                <Tab.Pane key=\"infos\" className=\"grow\">\n                    <InfosTab\n                        attribute={attribute}\n                        onPostSave={onPostSave}\n                        forcedType={forcedType}\n                        redirectAfterCreate={redirectAfterCreate}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    if (!!attribute) {\n        const isMetadataAllowed = [AttributeType.advanced, AttributeType.advanced_link, AttributeType.tree].includes(\n            attribute.type\n        );\n\n        const isFormatExtended = attribute.format === 'extended';\n\n        panes.push(\n            {\n                key: 'values_list',\n                menuItem: t('attributes.values_list'),\n                render: () => {\n                    return (\n                        <Tab.Pane key=\"values_list\" className=\"grow flex-col height100\">\n                            <ValuesListTab attributeId={attribute.id} />\n                        </Tab.Pane>\n                    );\n                }\n            },\n            {\n                key: 'permissions',\n                menuItem: t('attributes.permissions'),\n                render: () => {\n                    return (\n                        <Tab.Pane key=\"permissions\" className=\"\" style={{display: 'grid'}}>\n                            <PermissionsTab attribute={attribute} readonly={false} />\n                        </Tab.Pane>\n                    );\n                }\n            },\n            {\n                key: 'actions_list',\n                menuItem: t('attributes.action_list'),\n                render: () => {\n                    return (\n                        <Tab.Pane key=\"actions_list\" className=\"grow flex-col height100\">\n                            <ActionsListTab attribute={attribute} />\n                        </Tab.Pane>\n                    );\n                }\n            }\n        );\n\n        if (isMetadataAllowed) {\n            panes.push({\n                key: 'metadata',\n                menuItem: t('attributes.metadata'),\n                render: () => {\n                    return (\n                        <Tab.Pane key=\"metadata\" className=\"grow flex-col\">\n                            <MetadataTab attribute={attribute} readonly={false} />\n                        </Tab.Pane>\n                    );\n                }\n            });\n        }\n\n        if (isFormatExtended) {\n            panes.push({\n                key: 'embeddedFields',\n                menuItem: t('attributes.embedded_fields'),\n                render: () => {\n                    return (\n                        <Tab.Pane key=\"EmbeddedFields\" className=\"grow flex-col\">\n                            <EmbeddedFieldsTab attribute={attribute} />\n                        </Tab.Pane>\n                    );\n                }\n            });\n        }\n    }\n\n    const tabName = location ? location.hash.replace('#', '') : undefined;\n    const [activeIndex, setActiveIndex] = useState<number | undefined>(\n        tabName ? panes.findIndex(p => tabName === p.key) : 0\n    );\n\n    const _handleOnTabChange = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, data: TabProps) => {\n        if (data.panes && data.activeIndex !== undefined) {\n            setActiveIndex(Number(data.activeIndex.toString()));\n            history?.push(`#${data.panes[data.activeIndex].key}`);\n        }\n    };\n\n    return (\n        <>\n            <Header className=\"no-grow\" data-testid=\"header\">\n                {headerLabel}\n            </Header>\n            <GridTab\n                onTabChange={_handleOnTabChange}\n                menu={{secondary: true, pointing: true}}\n                panes={panes}\n                activeIndex={activeIndex >= 0 ? activeIndex : 0}\n            />\n        </>\n    );\n}\n\nexport default EditAttributeTabs;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EditAttributeTabs from './EditAttributeTabs';\nexport default EditAttributeTabs;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport {getAttributeByIdQuery} from 'queries/attributes/getAttributeById';\nimport React, {useMemo} from 'react';\nimport {match} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {\n    GET_ATTRIBUTE_BY_ID,\n    GET_ATTRIBUTE_BY_IDVariables,\n    GET_ATTRIBUTE_BY_ID_attributes_list\n} from '_gqlTypes/GET_ATTRIBUTE_BY_ID';\nimport {AttributeType} from '../../../_gqlTypes/globalTypes';\nimport Loading from '../../shared/Loading';\nimport EditAttributeTabs from './EditAttributeTabs';\nimport {AttributeInfosFormValues} from './EditAttributeTabs/InfosTab/_types';\n\nexport interface IEditAttributeMatchParams {\n    id: string;\n}\n\nexport type OnAttributePostSaveFunc = (attrData: AttributeInfosFormValues) => void;\n\nconst Wrapper = styled.div`\n    display: grid;\n    grid-template-rows: auto 1fr;\n`;\n\ninterface IEditAttributeProps {\n    match?: match<IEditAttributeMatchParams>;\n    redirectAfterCreate?: boolean;\n    attributeId?: string | null;\n    onPostSave?: OnAttributePostSaveFunc;\n    forcedType?: AttributeType;\n}\n\nfunction EditAttribute({\n    match: routeMatch,\n    attributeId,\n    onPostSave,\n    forcedType,\n    redirectAfterCreate\n}: IEditAttributeProps): JSX.Element {\n    const attrId = typeof attributeId !== 'undefined' ? attributeId : routeMatch ? routeMatch.params.id : '';\n\n    const {loading, error, data} = useQuery<GET_ATTRIBUTE_BY_ID, GET_ATTRIBUTE_BY_IDVariables>(getAttributeByIdQuery, {\n        variables: {id: attrId},\n        skip: !attrId\n    });\n\n    const _renderEditAttributeTabs = useMemo(\n        () => (attribute?: GET_ATTRIBUTE_BY_ID_attributes_list) => (\n            <EditAttributeTabs\n                attribute={attribute}\n                onPostSave={onPostSave}\n                forcedType={forcedType}\n                redirectAfterCreate={redirectAfterCreate}\n            />\n        ),\n        [onPostSave, forcedType, history]\n    );\n\n    if (!attrId) {\n        return _renderEditAttributeTabs();\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (error) {\n        return <ErrorDisplay message={error.message} />;\n    }\n\n    if (!data || !data.attributes || !data.attributes.list.length) {\n        return <ErrorDisplay message=\"Unknown attribute\" />;\n    }\n\n    return <Wrapper className=\"grow\">{_renderEditAttributeTabs(data.attributes.list[0])}</Wrapper>;\n}\n\nexport default EditAttribute;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EditAttribute from './EditAttribute';\nexport default EditAttribute;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Modal} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport EditAttribute from '../EditAttribute';\nimport {OnAttributePostSaveFunc} from '../EditAttribute/EditAttribute';\n\nconst GridContent = styled(Modal.Content)`\n    &&& {\n        display: grid;\n    }\n`;\n\ninterface IEditAttributeModalProps {\n    attribute: string;\n    open: boolean;\n    onClose: () => void;\n    onPostSave?: OnAttributePostSaveFunc;\n    redirectAfterCreate?: boolean;\n}\n\nfunction EditAttributeModal({\n    attribute,\n    open,\n    onClose,\n    onPostSave,\n    redirectAfterCreate\n}: IEditAttributeModalProps): JSX.Element {\n    const {t} = useTranslation();\n\n    return (\n        <Modal\n            open={open}\n            size=\"fullscreen\"\n            centered\n            closeOnDimmerClick\n            closeOnEscape\n            closeIcon\n            dimmer\n            className=\"overlay\"\n            onClose={onClose}\n        >\n            <GridContent scrolling>\n                <EditAttribute\n                    attributeId={attribute}\n                    onPostSave={onPostSave}\n                    redirectAfterCreate={redirectAfterCreate}\n                />\n            </GridContent>\n        </Modal>\n    );\n}\n\nexport default EditAttributeModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EditAttributeModal from './EditAttributeModal';\nexport default EditAttributeModal;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {DropdownProps, Form} from 'semantic-ui-react';\nimport useLang from '../../../hooks/useLang';\nimport {localizedLabel} from '../../../utils/utils';\nimport {GET_LIBRARIES_libraries_list} from '../../../_gqlTypes/GET_LIBRARIES';\n\ninterface ILibrariesSelectorFieldProps extends DropdownProps {\n    loading?: boolean;\n    libraries: GET_LIBRARIES_libraries_list[] | null;\n}\n\nconst LibrariesSelectorField = ({loading, libraries, ...fieldProps}: ILibrariesSelectorFieldProps): JSX.Element => {\n    const availableLanguages = useLang().lang;\n    const options = !!libraries\n        ? libraries.map(l => ({key: l.id, value: l.id, text: localizedLabel(l.label, availableLanguages)}))\n        : [];\n\n    // TODO: find a cleaner way to remove props from i18n\n    delete fieldProps.t;\n    delete fieldProps.tReady;\n    delete fieldProps.defaultNS;\n    delete fieldProps.i18nOptions;\n    delete fieldProps.reportNS;\n\n    return <Form.Dropdown {...fieldProps} search options={options} />;\n};\n\nLibrariesSelectorField.defaultProps = {\n    loading: false,\n    libraries: []\n};\n\nexport default LibrariesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport LibrariesSelectorField from './LibrariesSelectorField';\nexport default LibrariesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport React from 'react';\nimport {FormDropdownProps} from 'semantic-ui-react';\nimport {GET_LIBRARIES, GET_LIBRARIESVariables} from '_gqlTypes/GET_LIBRARIES';\nimport {getLibsQuery} from '../../../queries/libraries/getLibrariesQuery';\nimport LibrariesSelectorField from '../LibrariesSelectorField';\n\nfunction LibrariesSelector(fieldProps: FormDropdownProps): JSX.Element {\n    const {loading, data} = useQuery<GET_LIBRARIES, GET_LIBRARIESVariables>(getLibsQuery);\n\n    return (\n        <LibrariesSelectorField\n            {...fieldProps}\n            loading={loading}\n            libraries={!!data && data.libraries ? data.libraries.list : null}\n        />\n    );\n}\n\nexport default LibrariesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport LibrariesSelector from './LibrariesSelector';\nexport default LibrariesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {fakeRootId, ITreeNodeData} from '_types/trees';\nimport {getTreeNodeKey} from '../../../utils/utils';\nimport {GET_LIB_BY_ID_libraries_list_permissions_conf_permissionTreeAttributes_TreeAttribute} from '../../../_gqlTypes/GET_LIB_BY_ID';\nimport {PermissionTypes} from '../../../_gqlTypes/globalTypes';\nimport ColumnsDisplay from '../../shared/ColumnsDisplay';\nimport DefinePermissionsViewLoadTree from '../DefinePermissionsViewLoadTree';\nimport EditPermissions from '../EditPermissions';\n\ninterface IDefineTreePermissionsViewProps {\n    treeAttribute: GET_LIB_BY_ID_libraries_list_permissions_conf_permissionTreeAttributes_TreeAttribute;\n    permissionType: PermissionTypes;\n    applyTo: string;\n    readOnly?: boolean;\n}\n\nconst DefineTreePermissionsView = ({\n    treeAttribute: tree,\n    permissionType,\n    applyTo,\n    readOnly\n}: IDefineTreePermissionsViewProps): JSX.Element => {\n    const usersGroupsTreeId = 'users_groups';\n    const [selectedTreeNode, setSelectedTreeNode] = React.useState<ITreeNodeData | null>({\n        node: {id: fakeRootId},\n        path: [],\n        treeIndex: 0\n    });\n    const [selectedGroupNode, setSelectedGroupNode] = React.useState<ITreeNodeData | null>({\n        node: {id: fakeRootId},\n        path: [],\n        treeIndex: 0\n    });\n    const _selectTreeNode = (nodeData: ITreeNodeData) =>\n        setSelectedTreeNode(getTreeNodeKey(nodeData) !== getTreeNodeKey(selectedTreeNode) ? nodeData : null);\n\n    const _selectGroupNode = (nodeData: ITreeNodeData) =>\n        setSelectedGroupNode(getTreeNodeKey(nodeData) !== getTreeNodeKey(selectedGroupNode) ? nodeData : null);\n\n    if (!tree.linked_tree) {\n        return <p>Cannot find tree</p>;\n    }\n\n    const cols = [\n        <DefinePermissionsViewLoadTree\n            key=\"perm_tree\"\n            treeId={tree.linked_tree.id}\n            onClick={_selectTreeNode}\n            selectedNode={selectedTreeNode}\n        />\n    ];\n\n    if (selectedTreeNode) {\n        cols.push(\n            <DefinePermissionsViewLoadTree\n                treeId={usersGroupsTreeId}\n                onClick={_selectGroupNode}\n                selectedNode={selectedGroupNode}\n            />\n        );\n\n        if (selectedGroupNode) {\n            cols.push(\n                <EditPermissions\n                    permParams={{\n                        type: permissionType,\n                        applyTo,\n                        usersGroup: selectedGroupNode.node.id !== fakeRootId ? selectedGroupNode.node.id : null,\n                        permissionTreeTarget: {\n                            tree: tree.linked_tree.id,\n                            nodeId: selectedTreeNode.node.id !== fakeRootId ? selectedTreeNode.node.id : null\n                        }\n                    }}\n                    readOnly={readOnly}\n                />\n            );\n        }\n    }\n\n    return <ColumnsDisplay columnsNumber={3} columnsContent={cols} />;\n};\n\nDefineTreePermissionsView.defaultProps = {\n    readOnly: false\n};\n\nexport default DefineTreePermissionsView;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DefineTreePermissionsView from './DefineTreePermissionsView';\nexport default DefineTreePermissionsView;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ConfirmedButton from './ConfirmedButton';\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Confirm} from 'semantic-ui-react';\n\ninterface IConfirmedButtonProps {\n    actionButton?: React.ReactElement<any>;\n    action: (param?: any) => void;\n    confirmMessage: string;\n    children: JSX.Element;\n}\n\nconst ConfirmedButton = (props: IConfirmedButtonProps): JSX.Element => {\n    const {confirmMessage, children} = props;\n    const {t} = useTranslation();\n    const [showConfirm, setShowConfirm] = useState<boolean>(false);\n\n    const _disableClick = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    const _openConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(true);\n    };\n\n    const _closeConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(false);\n    };\n\n    const _runAction = (e: React.SyntheticEvent) => {\n        _closeConfirm(e);\n        props.action();\n    };\n\n    const clickableButton = React.cloneElement(children, {onClick: _openConfirm});\n\n    return (\n        <div onClick={_disableClick}>\n            {clickableButton}\n            <Confirm\n                open={showConfirm}\n                content={confirmMessage}\n                onCancel={_closeConfirm}\n                onConfirm={_runAction}\n                cancelButton={t('admin.cancel')}\n                closeOnDocumentClick={false}\n                closeOnDimmerClick={false}\n            />\n        </div>\n    );\n};\n\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Button} from 'semantic-ui-react';\n\ninterface IDeleteButtonProps {\n    disabled: boolean;\n    onClick?: (event: React.SyntheticEvent) => void;\n}\n\nfunction DeleteButton({disabled, onClick}: IDeleteButtonProps): JSX.Element {\n    return (\n        <Button aria-label=\"delete\" className=\"delete\" circular icon=\"trash\" disabled={disabled} onClick={onClick} />\n    );\n}\n\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteButton from './DeleteButton';\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport useLang from 'hooks/useLang';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {List, Message} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {activeItemColor} from 'themingVar';\nimport {localizedLabel} from 'utils';\nimport {GET_ATTRIBUTES_attributes_list} from '_gqlTypes/GET_ATTRIBUTES';\n\nconst AttributeItem = styled(List.Item)`\n    &&&& {\n        cursor: pointer;\n        padding: 0.5rem;\n    }\n    &:hover {\n        background-color: ${activeItemColor};\n    }\n`;\n\ninterface IPermissionsAttributeSelectorListProps {\n    attributes: GET_ATTRIBUTES_attributes_list[];\n    onSelect: (selectedAttribute: GET_ATTRIBUTES_attributes_list) => void;\n}\n\nfunction PermissionsAttributeSelectorList({attributes, onSelect}: IPermissionsAttributeSelectorListProps): JSX.Element {\n    const {lang} = useLang();\n    const {t} = useTranslation();\n\n    const _handleAttributeClick = (attribute: GET_ATTRIBUTES_attributes_list) => () => {\n        onSelect(attribute);\n    };\n\n    return (\n        <List divided aria-label=\"attribute-selector-list\">\n            {!attributes.length && (\n                <Message info size=\"tiny\">\n                    {t('permissions_settings.no_attributes_to_add')}\n                </Message>\n            )}\n            {attributes.map(attribute => (\n                <AttributeItem key={attribute.id} onClick={_handleAttributeClick(attribute)}>\n                    <List.Header>{localizedLabel(attribute.label, lang)}</List.Header>\n                    <List.Description>{attribute.id}</List.Description>\n                </AttributeItem>\n            ))}\n        </List>\n    );\n}\n\nexport default PermissionsAttributeSelectorList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsAttributeSelectorList from './PermissionsAttributeSelectorList';\nexport default PermissionsAttributeSelectorList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useLazyQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport Loading from 'components/shared/Loading';\nimport SimplisticButton from 'components/shared/SimplisticButton';\nimport {getAttributesQuery} from 'queries/attributes/getAttributesQuery';\nimport React, {useEffect, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Icon} from 'semantic-ui-react';\nimport {GET_ATTRIBUTES, GET_ATTRIBUTESVariables, GET_ATTRIBUTES_attributes_list} from '_gqlTypes/GET_ATTRIBUTES';\nimport {GET_LIB_BY_ID_libraries_list} from '_gqlTypes/GET_LIB_BY_ID';\nimport {AttributeType} from '_gqlTypes/globalTypes';\nimport PermissionsAttributeSelectorList from './PermissionsAttributeSelectorList';\n\ninterface IPermissionsAttributeSelectorProps {\n    library?: GET_LIB_BY_ID_libraries_list;\n    selectedAttributes: string[];\n    onSelectAttribute: (attribute: string) => void;\n}\n\nfunction PermissionsAttributeSelector({\n    library,\n    selectedAttributes,\n    onSelectAttribute\n}: IPermissionsAttributeSelectorProps): JSX.Element {\n    const {t} = useTranslation();\n    const [isListExpanded, setIsListExpanded] = useState(false);\n    const [getAttributes, {loading, error, data, called}] = useLazyQuery<GET_ATTRIBUTES, GET_ATTRIBUTESVariables>(\n        getAttributesQuery,\n        {\n            variables: {\n                libraries: library ? [library.id] : null,\n                type: [AttributeType.tree]\n            }\n        }\n    );\n\n    useEffect(() => {\n        if (!isListExpanded || called) {\n            return;\n        }\n\n        getAttributes();\n    }, [isListExpanded, called]);\n\n    const _expandList = () => {\n        setIsListExpanded(true);\n    };\n\n    const _handleAttributeSelected = (attribute: GET_ATTRIBUTES_attributes_list) => {\n        onSelectAttribute(attribute.id);\n        setIsListExpanded(false);\n    };\n\n    const attributesList = (data?.attributes?.list ?? []).filter(\n        attribute => !selectedAttributes.includes(attribute.id)\n    );\n\n    return (\n        <>\n            <SimplisticButton basic compact onClick={_expandList}>\n                <Icon name=\"plus\" />\n                {t('permissions_settings.add_permissions_attribute')}\n            </SimplisticButton>\n            {loading && <Loading size=\"small\" />}\n            {error && <ErrorDisplay message={error.message} size=\"small\" />}\n            {isListExpanded && called && !loading && !error && (\n                <PermissionsAttributeSelectorList attributes={attributesList} onSelect={_handleAttributeSelected} />\n            )}\n        </>\n    );\n}\n\nexport default PermissionsAttributeSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsAttributeSelector from './PermissionsAttributeSelector';\nexport default PermissionsAttributeSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport useLang from 'hooks/useLang';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {localizedLabel} from 'utils';\nimport {GET_ATTRIBUTESVariables} from '_gqlTypes/GET_ATTRIBUTES';\nimport {GET_LIB_BY_ID_libraries_list, GET_LIB_BY_ID_libraries_list_permissions_conf} from '_gqlTypes/GET_LIB_BY_ID';\nimport {AttributeType, PermissionsRelation, Treepermissions_confInput} from '_gqlTypes/globalTypes';\nimport SimplisticButton from '../SimplisticButton';\nimport PermissionsAttributeSelector from './PermissionsAttributeSelector';\n\nconst PopContent = styled.div`\n    display: flex;\n    gap: 1rem;\n    flex-direction: column;\n    min-width: 225px;\n    max-width: 90vw;\n    font-size: 1rem;\n`;\n\nconst Trigger = styled.div`\n    cursor: pointer;\n`;\n\nconst FooterCell = styled(Table.Cell)<{$hasAttributes: boolean}>`\n    &&& {\n        ${props => !props.$hasAttributes && 'border-top: none;'}\n    }\n`;\n\nconst defaultRelation = PermissionsRelation.and;\n\ninterface IPermissionsSettingsProps extends React.HTMLAttributes<HTMLDivElement> {\n    library?: GET_LIB_BY_ID_libraries_list;\n    permissionsSettings: GET_LIB_BY_ID_libraries_list_permissions_conf;\n    onChangeSettings: (settings: Treepermissions_confInput) => void;\n    readonly: boolean;\n}\n\nfunction PermissionsSettings({\n    permissionsSettings,\n    onChangeSettings,\n    library,\n    readonly,\n    ...elementProps\n}: IPermissionsSettingsProps): JSX.Element {\n    const {t} = useTranslation();\n    const {lang} = useLang();\n    const [activeOperator, setActiveOperator] = React.useState<PermissionsRelation>(\n        permissionsSettings?.relation ?? PermissionsRelation.and\n    );\n    const permissionsAttributes = permissionsSettings?.permissionTreeAttributes ?? [];\n\n    const PopupTrigger = (\n        <Trigger {...elementProps}>\n            <Icon name=\"cog\" />\n            {t('permissions_settings.title')}\n        </Trigger>\n    );\n\n    const operators = Object.values(PermissionsRelation);\n\n    const _handleOperatorChange = (operator: PermissionsRelation) => () => {\n        setActiveOperator(operator);\n        onChangeSettings({\n            permissionTreeAttributes: permissionsSettings.permissionTreeAttributes.map(attr => attr.id),\n            relation: operator\n        });\n    };\n\n    const _handleAttributeSelected = (selectedAttribute: string) => {\n        const newSettings = {\n            permissionTreeAttributes: [...permissionsAttributes.map(a => a.id), selectedAttribute],\n            relation: permissionsSettings?.relation ?? defaultRelation\n        };\n\n        onChangeSettings(newSettings);\n    };\n\n    const _handleRemoveAttribute = (removedAttributeId: string) => () => {\n        onChangeSettings({\n            permissionTreeAttributes: permissionsAttributes\n                .map(a => a.id)\n                .filter(attributeId => attributeId !== removedAttributeId),\n            relation: permissionsSettings?.relation ?? defaultRelation\n        });\n    };\n\n    const attributeSelectionFilters: GET_ATTRIBUTESVariables = {\n        type: [AttributeType.tree]\n    };\n\n    if (library) {\n        attributeSelectionFilters.libraries = [library.id];\n    }\n\n    return (\n        <Popup trigger={PopupTrigger} on=\"click\" closeOnEscape position=\"bottom left\" style={{maxWidth: 'none'}}>\n            <PopContent>\n                <div>\n                    <h5>{t('permissions_settings.permissions_attributes')}</h5>\n                    <Table compact>\n                        <Table.Body>\n                            {permissionsAttributes.map(a => (\n                                <Table.Row key={a.id}>\n                                    <Table.Cell>{localizedLabel(a.label, lang)}</Table.Cell>\n                                    <Table.Cell width={3}>\n                                        {!readonly && (\n                                            <SimplisticButton\n                                                aria-label=\"remove\"\n                                                icon=\"trash alternate outline\"\n                                                onClick={_handleRemoveAttribute(a.id)}\n                                            />\n                                        )}\n                                    </Table.Cell>\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                        {!readonly && (\n                            <Table.Footer>\n                                <Table.Row>\n                                    <FooterCell colSpan={2} $hasAttributes={!!permissionsAttributes.length}>\n                                        <PermissionsAttributeSelector\n                                            library={library}\n                                            onSelectAttribute={_handleAttributeSelected}\n                                            selectedAttributes={permissionsAttributes.map(a => a.id)}\n                                        />\n                                    </FooterCell>\n                                </Table.Row>\n                            </Table.Footer>\n                        )}\n                    </Table>\n                </div>\n                {permissionsAttributes.length > 1 && (\n                    <div>\n                        <h5>{t('permissions_settings.operator')}</h5>\n                        <Button.Group basic>\n                            {operators.map(operator => (\n                                <Button\n                                    key={operator}\n                                    disabled={readonly}\n                                    compact\n                                    onClick={_handleOperatorChange(operator)}\n                                    active={activeOperator === operator}\n                                >\n                                    {t(`permissions_settings.operator_${operator}`)}\n                                </Button>\n                            ))}\n                        </Button.Group>\n                    </div>\n                )}\n            </PopContent>\n        </Popup>\n    );\n}\n\nexport default PermissionsSettings;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport PermissionsSettings from './PermissionsSettings';\nexport default PermissionsSettings;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport TreesSelectorField from './TreesSelectorField';\nexport default TreesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {DropdownProps, Form} from 'semantic-ui-react';\nimport useLang from '../../../hooks/useLang';\nimport {localizedLabel} from '../../../utils/utils';\nimport {GET_TREES_trees_list} from '../../../_gqlTypes/GET_TREES';\n\ninterface IAttributesSelectorFieldProps extends DropdownProps {\n    loading?: boolean;\n    trees: GET_TREES_trees_list[] | null;\n}\n\nconst TreesSelectorField = ({trees, ...fieldProps}: IAttributesSelectorFieldProps): JSX.Element => {\n    const availableLanguages = useLang().lang;\n    const options = !!trees\n        ? trees.map(a => ({key: a.id, value: a.id, text: localizedLabel(a.label, availableLanguages)}))\n        : [];\n\n    delete fieldProps.t;\n    delete fieldProps.tReady;\n    delete fieldProps.defaultNS;\n    delete fieldProps.i18nOptions;\n    delete fieldProps.reportNS;\n\n    return <Form.Dropdown {...fieldProps} search options={options} />;\n};\n\nexport default TreesSelectorField;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport React from 'react';\nimport {FormDropdownProps} from 'semantic-ui-react';\nimport {getTreesQuery} from '../../../queries/trees/getTreesQuery';\nimport {GET_ATTRIBUTESVariables} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport TreesSelectorField from '../TreesSelectorField';\n\ninterface IAttributesSelectorProps extends FormDropdownProps {\n    filters?: GET_ATTRIBUTESVariables;\n}\n\nfunction TreesSelector({filters, ...fieldProps}: IAttributesSelectorProps): JSX.Element {\n    const {loading, data} = useQuery(getTreesQuery, {variables: filters});\n    return <TreesSelectorField {...fieldProps} loading={loading} trees={!!data && data.trees ? data.trees.list : []} />;\n}\n\nexport default TreesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport TreesSelector from './TreesSelector';\n\nexport default TreesSelector;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\nimport {attributeDetailsFragment} from './attributeFragments';\n\nexport const getAttributeByIdQuery = gql`\n    ${attributeDetailsFragment}\n    query GET_ATTRIBUTE_BY_ID($id: ID) {\n        attributes(filters: {id: $id}) {\n            totalCount\n            list {\n                ...AttributeDetails\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getAttributesQuery = gql`\n    query GET_ATTRIBUTES(\n        $id: ID\n        $label: String\n        $type: [AttributeType]\n        $format: [AttributeFormat]\n        $system: Boolean\n        $multiple_values: Boolean\n        $versionable: Boolean\n        $libraries: [String!]\n    ) {\n        attributes(\n            filters: {\n                id: $id\n                label: $label\n                type: $type\n                format: $format\n                system: $system\n                multiple_values: $multiple_values\n                versionable: $versionable\n                libraries: $libraries\n            }\n        ) {\n            totalCount\n            list {\n                id\n                label\n                type\n                format\n                system\n                multiple_values\n                ... on StandardAttribute {\n                    unique\n                }\n                ... on LinkAttribute {\n                    linked_library {\n                        id\n                    }\n                    reverse_link\n                }\n                ... on TreeAttribute {\n                    linked_tree {\n                        id\n                    }\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\nimport {attributeDetailsFragment, attributeValuesListDetailsFragment} from './attributeFragments';\n\nexport const saveAttributeQuery = gql`\n    ${attributeValuesListDetailsFragment}\n    ${attributeDetailsFragment}\n    mutation SAVE_ATTRIBUTE($attrData: AttributeInput!) {\n        saveAttribute(attribute: $attrData) {\n            ...AttributeDetails\n            ...AttributeValuesListDetails\n            ... on LinkAttribute {\n                linked_library {\n                    id\n                }\n                reverse_link\n            }\n            ... on TreeAttribute {\n                linked_tree {\n                    id\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\nimport {attributeDetailsFragment} from '../attributes/attributeFragments';\n\nexport const saveLibAttributesMutation = gql`\n    ${attributeDetailsFragment}\n    mutation SAVE_LIBRARY_ATTRIBUTES($libId: ID!, $attributes: [ID!]!) {\n        saveLibrary(library: {id: $libId, attributes: $attributes}) {\n            id\n            attributes {\n                ...AttributeDetails\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getTreesQueryName = 'GET_TREES';\n\nexport const getTreesQuery = gql`\n    query GET_TREES($id: ID, $label: String, $system: Boolean) {\n        trees(filters: {id: $id, label: $label, system: $system}) {\n            totalCount\n            list {\n                id\n                label\n                system\n                behavior\n                libraries {\n                    library {\n                        id\n                        label\n                    }\n                    settings {\n                        allowMultiplePositions\n                        allowedAtRoot\n                        allowedChildren\n                    }\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gql} from '@apollo/client';\n\nexport const getVersionProfilesQuery = gql`\n    query GET_VERSION_PROFILES($filters: VersionProfilesFiltersInput, $sort: SortVersionProfilesInput) {\n        versionProfiles(filters: $filters, sort: $sort) {\n            list {\n                id\n                label\n            }\n        }\n    }\n`;\n"],"names":["attributes","fieldProps","availableLanguages","useLang","lang","options","map","l","key","id","value","text","localizedLabel","label","clearable","unshift","Form","undefined","search","filters","excludeReverseLinks","useQuery","getAttributesQuery","variables","loading","queryError","error","data","ErrorDisplay","message","list","filter","a","reverse_link","props","t","useTranslation","toggleSelection","selection","Table","selectable","striped","attrLabel","fr","en","isSelected","indexOf","onClick","active","Checkbox","readOnly","checked","openModal","onClose","onSubmit","useState","pendingSelection","setPendingSelection","isSubmitPending","setIsSubmitPending","_handleclose","_handleSubmit","Loading","className","Modal","size","open","centered","closeOnDimmerClick","closeOnEscape","closeIcon","scrolling","selectedAttr","newSelection","aId","Button","primary","disabled","getAvailableActionsQuery","gql","getActionListQuery","saveAttributeActionsListMutation","ConnectorsContainer","styled","Connector","iColor","inputs","dictionnary","isDragging","allInputs","Object","keys","input","i","color","includes","title","renderInput","ExternalContainer","ReserveContainer","ListsContainer","AvailableActionsContainer","ListContainer","ListContent","HiddenDiv","extend","hover","ALCPlaceholder","ActionRow","opacity","marginTop","param","actionId","changeParam","setBlockCard","index","default_value","currentValue","setCurrentValue","correspondences","float","integer","boolean","string","date","_onChange","event","target","type","toString","paramName","name","stopPropagation","_onFocus","e","_onBlur","Label","attached","basic","TextArea","style","marginBottom","placeholder","onChange","onFocus","onBlur","Input","fluid","content","labelPosition","JSON","parse","action","moveCard","findCard","origin","removeActionFromList","setCurrentIndex","colorTypeDictionnary","dragging","container","useRef","internalWidth","setWidth","paramOpen","toggleParams","blockedCard","useDrag","item","itemTypes","originalIndex","width","end","monitor","didDrop","isSystem","collect","canDrag","drag","preview","useDrop","accept","canDrop","isOver","shallow","overIndex","itemCopy","stringify","Number","drop","onRemoveButtonClicked","tryAndRemove","list_id","handleToggleParams","actId","String","useEffect","getEmptyImage","captureDraggingState","current","offsetWidth","listAction","input_types","outputs","output_types","ref","node","Card","description","Icon","position","right","top","fontSize","circular","icon","params","length","textAlign","margin","changeSelectorTo","currentActionListName","connectionFailures","disconnectedStyle","background","listsWithConnectionsFailures","forEach","connectionFailure","push","Menu","pointing","secondary","doArrayIntersect","includingArr","includedArr","response","elm","actions","addActionToList","getNewId","currentIndex","inType","outType","cardOrder","onSelectorChange","onSave","specificCardOrder","cards","setConnectionFailures","ItemTypes","dragObject","higherId","hovered","collectedProps","dropOut","checkConnections","useCallback","connFailures","listName","actionIdList","preceedingConnector","followingConnector","topConnection","bottomConnection","Header","as","padding","renderAction","negative","preventDefault","TypeTag","connectionState","typesOpen","toggleTypes","tryAndAdd","atIndex","paddingBottom","extra","output","actualAction","renderActions","layerStyles","pointerEvents","zIndex","left","height","getFieldStyle","maxWidth","getItemStyles","currentOffset","display","x","y","transform","WebkitTransform","BinDragLayer","renderItem","this","itemType","Component","defaultProps","actionListNames","DragLayer","getItem","getItemType","getSourceClientOffset","initialOffset","getInitialClientOffset","diff","getDifferenceFromInitialOffset","getActionFromConfig","configAct","availableActions","cloneDeep","act","is_system","uniqueConfigParam","configParam","getColorDictionnary","types","Set","add","colors","nbr","sliceStart","currentColor","returnArr","step","Math","floor","direction","rank","slice","getColorsRangeFrom","Array","from","reduce","obj","attribute","setCurrentActionListName","inTypes","saveValue","getValue","deleteValue","outTypes","attributeTypes","setAttributeTypes","currentActionList","setCurrentList","currentActionListOrder","setcurrentActionListOrder","setColorTypeDictionnary","attId","useMutation","onError","console","saveAttributeActionsList","loadingSave","currentConfig","actions_list","attr","sourceConfigs","currentList","actionListName","sourceConfig","config","getCurrentList","currentListOrder","getCurrentListOrder","listId","getActionFromId","currentActionListCopy","currentActionListOrderCopy","splice","cardOrderCopy","listOrderCopy","actParam","exportableConfig","extractParamConfig","getConfigActionFromAction","att","newAction","generateReserveActionFrom","_getEmbeddedFields","level","saveAttributesEmbeddedFieldsQuery","attrId","show","setShow","newId","setNewId","_close","positive","Confirm","header","confirmButton","cancelButton","onCancel","onConfirm","remove","format","flatItem","isRoot","expend","displayForm","AttributeFormat","Container","justifyContent","alignItems","formValues","setFormValues","save","AvailableLanguage","acc","labelIndex","fields","newLabel","v","hasChild","setFormat","f","newFormat","validation_regex","embedded_fields","values","setValues","originalId","_handleOnChangeValidationRegex","newValidationRegex","_updateValues","form","newValues","_getNewValues","_save","find","_handleBlur","formatRegexValidation","flatItems","setTreeItems","setFlatItems","ButtonGroup","compact","widths","treeData","callback","es","expanded","getNodeKey","treeIndex","ignoreCollapsed","_getNewAttribute","treeItem","_recreateAttributeFromTree","nTreeItems","nValues","valueFind","cloneValueFind","children","em","depth","treeItems","isVirtualized","setIsVirtualized","gqlUnchecked","lQuery","eQuery","dQuery","rQuery","refetch","saveAttribute","saveAndReload","items","_getTreeData","formValue","ti","it","newFlatItem","newFormValue","emb","newTreeItem","_handleDrop","flexFlow","flex","newTreeData","onVisibilityToggle","rowHeight","info","generateNodeProps","newAtt","addNodeUnderParent","parentKey","newNode","removeNodeAtPath","path","embeddedFields","_find","idToFind","buttons","onDragStateChanged","floated","profiles","localizedTranslation","getVersionProfilesQuery","versionProfiles","getLibrariesWithAttributesQuery","libraries","saveLibAttributesMutation","saveLibrary","saveError","librariesById","useMemo","libs","lib","_handleChange","fieldData","attributeLibrariesIds","addedValues","difference","removedValues","Promise","all","libraryId","libId","FormFieldWrapper","defaultValue","defaultAttributeData","system","readonly","AttributeType","linked_tree","linked_library","unique","permissions_conf","multiple_values","metadata_fields","versions_conf","versionable","mode","ValueVersionMode","profile","FormWrapper","FormFooter","onSubmitInfos","errors","onCheckIdExists","forcedType","userLang","availableLangs","defaultLang","isNewAttribute","initialValues","serverValidationErrors","extensions","code","ErrorTypes","idValidator","yup","required","matches","test","validationSchema","shape","nullable","oneOf","Message","validateOnChange","handleSubmit","handleBlur","setFieldValue","inputErrors","touched","submitForm","_handleLabelChange","split","field","subfield","formatIDString","isCheckbox","_handleChangeWithSubmit","allowFormat","allowMultipleValues","allowVersionable","isVersionable","isLinkAttribute","_getErrorByField","fieldName","getFieldError","_handleKeyPress","grouped","onKeyPress","attrType","LibrariesSelector","multiple","toggle","AttributeSelector","TreesSelector","onPostSave","redirectAfterCreate","history","useHistory","saveAttributeQuery","onCompleted","res","replace","pathname","update","cache","evict","useLazyQuery","fetchPolicy","getAttrById","dataAttrById","_isIdUnique","val","dataToSave","attrData","formErrors","graphQLErrors","attributeId","visible","attributeEditionModalDisplay","setAttributeEditionModalDisplay","showNewAttrModal","setShowNewAttrModal","showAddExistingAttrModal","setShowAddExistingAttrModal","_closeNewAttrModal","_closeAddExistingAttrModal","fieldLabel","ConfirmedButton","confirmMessage","fieldToDelete","DeleteButton","fieldToAdd","AttributesSelectionModal","fieldIds","EditAttributeModal","refetchQueries","query","PermissionsSettingsBtn","PermissionsSettings","onSubmitSettings","defaultPermsConf","permissionTreeAttributes","relation","PermissionsRelation","panes","menuItem","render","Tab","DefineTreePermissionsView","treeAttribute","permissionType","PermissionTypes","applyTo","DefinePermByUserGroupView","permissionsSettings","onChangeSettings","settings","conf","getAttributeValuesListQuery","attributeValuesListDetailsFragment","onValuesUpdate","linkedLibrary","orTxt","editRecordModalOpen","setEditRecordModalOpen","editedRecord","setEditedRecord","openSelectRecordModal","setOpenSelectRecordModal","_handleCloseSelectRecordModal","_handleOpenEditRecordModal","_addElement","record","whoAmI","newValuesList","_deleteValue","List","divided","recordId","RecordCard","EditRecordModal","library","SelectRecordModal","onSelect","InputsWrapper","onDelete","to","dates","setDates","newValue","dayjs","unix","newDates","inputValueFrom","isNaN","inputValueTo","transparent","role","min","flexGrow","inputTypeByFormat","_handleDateRangeValueChange","_submitValues","_editValue","inputValue","valuesToSubmit","linkedTree","isOpenSelectTreeNodeModal","setIsOpenSelectTreeNodeModal","_handleCloseSelectTreeNodeModal","breadcrumbActions","r","TreeNodeBreadcrumb","element","SelectTreeNodeModal","tree","ancestors","parents","p","reducer","state","newConf","execSubmit","enable","allowFreeEntry","_getValuesField","initialState","values_list","useReducer","dispatch","_extractValuesToSave","valuesToSave","linkValues","treeValues","_handleValuesChange","inline","Divider","horizontal","_getListByType","valuesListConf","GridTab","displayName","location","useLocation","headerLabel","isMetadataAllowed","isFormatExtended","tabName","hash","findIndex","activeIndex","setActiveIndex","onTabChange","menu","Wrapper","routeMatch","match","getAttributeByIdQuery","skip","_renderEditAttributeTabs","GridContent","dimmer","EditAttribute","LibrariesSelectorField","tReady","defaultNS","i18nOptions","reportNS","getLibsQuery","React","fakeRootId","selectedTreeNode","setSelectedTreeNode","selectedGroupNode","setSelectedGroupNode","cols","DefinePermissionsViewLoadTree","treeId","nodeData","getTreeNodeKey","selectedNode","EditPermissions","permParams","usersGroup","permissionTreeTarget","nodeId","ColumnsDisplay","columnsNumber","columnsContent","showConfirm","setShowConfirm","_closeConfirm","clickableButton","closeOnDocumentClick","AttributeItem","activeItemColor","_handleAttributeClick","selectedAttributes","onSelectAttribute","isListExpanded","setIsListExpanded","getAttributes","called","attributesList","SimplisticButton","PopContent","Trigger","FooterCell","$hasAttributes","defaultRelation","elementProps","activeOperator","setActiveOperator","permissionsAttributes","PopupTrigger","operators","_handleOperatorChange","operator","attributeSelectionFilters","Popup","trigger","on","removedAttributeId","colSpan","selectedAttribute","newSettings","trees","getTreesQuery","attributeDetailsFragment","getTreesQueryName"],"sourceRoot":""}
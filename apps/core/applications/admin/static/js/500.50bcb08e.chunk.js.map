{"version":3,"file":"static/js/500.50bcb08e.chunk.js","mappings":"6LAIA,ECUwB,SAACA,GACrB,IAAOC,EAA4BD,EAA5BC,eAAgBC,EAAYF,EAAZE,SAChBC,GAAKC,EAAAA,EAAAA,MAALD,EACP,GAAsCE,EAAAA,EAAAA,WAAkB,GAAxD,eAAOC,EAAP,KAAoBC,EAApB,KAaMC,EAAgB,SAACC,GACnBA,EAAEC,iBACFD,EAAEE,kBACFJ,GAAe,EAClB,EAOKK,EAAkBC,EAAAA,aAAmBX,EAAU,CAACY,QAjBjC,SAACL,GAClBA,EAAEC,iBACFD,EAAEE,kBACFJ,GAAe,EAClB,IAeD,OACI,iBAAKO,QAzBa,SAACL,GACnBA,EAAEC,iBACFD,EAAEE,iBACL,EAsBG,UACKC,GACD,SAACG,EAAA,EAAD,CACIC,KAAMV,EACNW,QAAShB,EACTiB,SAAUV,EACVW,UAdO,SAACV,GAChBD,EAAcC,GACdT,EAAMoB,QACT,EAYWC,aAAclB,EAAE,gBAChBmB,sBAAsB,EACtBC,oBAAoB,MAInC,C,2FCxCD,ICbA,EDOA,YAA6E,IAAtDC,EAAqD,EAArDA,SAAUV,EAA2C,EAA3CA,QAC7B,OACI,SAACW,EAAA,EAAD,CAAQ,aAAW,SAASC,UAAU,SAASC,UAAQ,EAACC,KAAK,QAAQJ,SAAUA,EAAUV,QAASA,GAEzG,C,sMEVYe,EAAqBC,IAAH,8GCAlBC,EAAqBD,IAAH,qJ,yHCClBE,EAAWF,IAAH,+zBACfG,EAAAA,GCDOC,GAAiBJ,E,OAAAA,KAAH,irBACrBG,EAAAA,G,iCCUN,ICbA,EDOA,YAA6E,IAAtDT,EAAqD,EAArDA,SAAUV,EAA2C,EAA3CA,QAC7B,OACI,SAACW,EAAA,EAAD,CAAQ,aAAW,SAASC,UAAU,SAASC,UAAQ,EAACC,KAAK,SAASJ,SAAUA,EAAUV,QAASA,GAE1G,E,sBEXD,ECcmB,SAAC,GAA4D,IAA3DqB,EAA0D,EAA1DA,KAAMjB,EAAoD,EAApDA,SAChBf,GAAKC,EAAAA,EAAAA,MAALD,EACDiC,GAAWC,EAAAA,EAAAA,KACXC,GAAOC,EAAAA,EAAAA,KAAUD,KAEvB,OAAOF,EAASI,YAAYC,EAAAA,GAAAA,oBACxB,SAACC,EAAA,EAAD,CACItB,OAAQ,kBAAMF,EAASiB,EAAKQ,GAApB,EACR1C,eAAgBE,EAAE,uBAAwB,CAACyC,UAAUC,EAAAA,EAAAA,IAAqBV,EAAKW,MAAOR,KAF1F,UAII,SAAC,EAAD,CAAcd,UAAU,MAE5B,IACP,EC3BD,ECWsB,SAAC,GAAgF,IAA/EuB,EAA8E,EAA9EA,YAAa9C,EAAiE,EAAjEA,eAAgB6C,EAAiD,EAAjDA,MAGjD,OAFiBT,EAAAA,EAAAA,KAEDG,YAAYC,EAAAA,GAAAA,oBACxB,SAACC,EAAA,EAAD,CAAiBtB,OAAQ2B,EAAa9C,eAAgBA,EAAtD,UACI,SAACwB,EAAA,EAAD,CAAQuB,WAAS,EAACxB,UAAU,EAAOyB,QAAQ,QAAQC,KAAK,QAAxD,SACKJ,MAGT,IACP,E,WCrBD,ECcmB,SAAC,GAA4D,IAA3DX,EAA0D,EAA1DA,KAAMgB,EAAoD,EAApDA,SAChBhD,GAAKC,EAAAA,EAAAA,MAALD,EACDiC,GAAWC,EAAAA,EAAAA,KACXC,GAAOC,EAAAA,EAAAA,KAAUD,KAEvB,OAAOF,EAASI,YAAYC,EAAAA,GAAAA,oBACxB,SAACC,EAAA,EAAD,CACItB,OAAQ,kBAAM+B,EAAShB,EAAKQ,GAApB,EACR1C,eAAgBE,EAAE,uBAAwB,CAACyC,UAAUC,EAAAA,EAAAA,IAAqBV,EAAKW,MAAOR,KAF1F,UAII,SAACc,EAAA,EAAD,CAAc5B,UAAU,MAE5B,IACP,E,qDCRK6B,EAAmB,SAACC,EAAmBC,GACzC,IAAMC,EACDF,GAAcC,EAAmCE,IAAAA,SAAgBA,IAAOF,GAAaG,KAAKD,IAAOH,KAArEG,IAAAA,SAAgB,GAEjD,MAAM,GAAN,OAAUD,EAAEG,QAAU,IAAtB,YAA6BH,EAAEI,UAAY,IAA3C,YAAkDJ,EAAEK,UAAY,IACnE,EAEKC,EAAiB,SAACC,EAAMC,GAC1B,OAAOD,EAAKE,MAAM,KAAKC,QAAO,SAACC,EAAMC,GAAP,OAAiBD,EAAOA,EAAKC,GAAQ,IAArC,GAA4CJ,EAC7E,EAEKK,EAAY,SAAC,GAOkB,IAAD,IANhCC,QAAAA,OAMgC,SALhCC,EAKgC,EALhCA,eACAC,EAIgC,EAJhCA,WACAC,EAGgC,EAHhCA,UACAC,EAEgC,EAFhCA,MACAC,EACgC,EADhCA,QAEOxE,GAAKC,EAAAA,EAAAA,MAALD,EACDmC,GAAOC,EAAAA,EAAAA,KAAUD,KAEvB,GAA4CjC,EAAAA,EAAAA,UAAiB,GAA7D,eAAOuE,EAAP,KAAuBC,EAAvB,KACA,GAAwBxE,EAAAA,EAAAA,UAAkE,CACtFyE,OAAQ,cACRC,UAAW,eAFf,eAAOC,EAAP,KAAaC,EAAb,MAKAC,EAAAA,EAAAA,YAAU,WACAV,GAAcE,EAAMS,QACtBN,EACIH,EAAMU,KAAI,SAAAjD,GAAI,OAAIqC,EAAWrC,GAAMgD,MAArB,IAA6BjB,QAAO,SAACC,EAAMC,GAAP,OAAiBA,EAAOD,EAAOC,EAAOD,CAAtC,GAA6C,GAG1G,GAAE,CAACK,IAMJ,OACI,gBAAKa,MAAO,CAACC,UAAW,UAAxB,UACI,UAACC,EAAA,EAAD,CAAO,cAAY,YAAYC,SAAO,EAACC,UAAQ,EAACnB,QAASA,EAAzD,WACI,SAACiB,EAAA,SAAD,WACI,UAACA,EAAA,MAAD,WACKhB,EAAea,KAAI,SAAAM,GAAC,OACjB,SAACH,EAAA,aAAD,CAEII,OAAQX,EAAKF,SAAWY,EAAIV,EAAKD,UAAY,KAC7CjE,QAAS,WAZjCmE,EAAQ,CAACH,OAYqCY,EAZ7BX,UAA8B,cAAnBC,EAAKD,UAA4B,aAAe,aAY3C,EAHb,SAKK5E,EAAE,cAAD,OAAeuF,KALrB,aACeA,GAFE,KASpB,OAAIE,MAAMhB,IAAiBQ,KAAI,SAACS,EAAGC,GAAJ,OAC5B,SAACP,EAAA,aAAD,CAAkBQ,MAAO,GAAzB,gBAA0CD,GADd,UAKxC,SAACP,EAAA,OAAD,UACKZ,GACG,SAACY,EAAA,MAAD,WACI,SAACA,EAAA,OAAD,CAAYS,QAAS,EAArB,UACI,SAACC,EAAA,EAAD,QAIRvB,GACAA,EACKM,MAAK,SAACkB,EAAGC,GACN,OAAIrC,EAAekB,EAAKF,OAAQoB,GAAKpC,EAAekB,EAAKF,OAAQqB,GACnC,cAAnBnB,EAAKD,WAA6B,EAAI,EACtCjB,EAAekB,EAAKF,OAAQoB,GAAKpC,EAAekB,EAAKF,OAAQqB,GAC1C,cAAnBnB,EAAKD,UAA4B,GAAK,EAG1C,CACV,IACAK,KAAI,SAAAjD,GAAS,IAAD,QACHiE,EAAY5B,EAAaA,EAAWrC,GAAQ,KAElD,OACI,mBAACoD,EAAA,OAAD,2BACUpD,EAAKkE,SAAWC,EAAAA,GAAAA,gBAClBnE,EAAKkE,SAAWC,EAAAA,GAAAA,WAAwB,CAACC,SAAS,IACjDpE,EAAKkE,SAAWC,EAAAA,GAAAA,QAAqB,CAACE,OAAO,IAHtD,IAIIC,IAAG,aAAQtE,EAAKQ,IAChB,cAAY,aAEX4B,EAAemC,SAAS,QAAS,SAACnB,EAAA,OAAD,UAAapD,EAAKQ,KACnD4B,EAAemC,SAAS,WACrB,SAACnB,EAAA,OAAD,WAAa1C,EAAAA,EAAAA,IAAqBV,EAAKW,MAAOR,KAEjDiC,EAAemC,SAAS,gBACrB,SAACnB,EAAA,OAAD,UAAapD,EAAKwE,WAAWC,OAAO9D,QAEvCyB,EAAemC,SAAS,gBACrB,SAACnB,EAAA,OAAD,UAAa,IAAIsB,KAAuB,IAAlB1E,EAAK2E,YAAmBC,mBAEjDxC,EAAemC,SAAS,aACrB,SAACnB,EAAA,OAAD,UAAa,IAAIsB,KAAoB,IAAf1E,EAAK6E,SAAgBD,mBAE9CxC,EAAemC,SAAS,eACrB,SAACnB,EAAA,OAAD,UACKpD,EAAKmB,UAAY,IAAIuD,KAAsB,IAAjB1E,EAAKmB,WAAkByD,iBAAmB,KAG5ExC,EAAemC,SAAS,gBACrB,SAACnB,EAAA,OAAD,oBAAapD,EAAK8E,kBAAlB,aAAa,EAAiBL,OAAO9D,QAExCyB,EAAemC,SAAS,iBACrB,SAACnB,EAAA,OAAD,UACK,IAAIsB,KAAwB,IAAnB1E,EAAKoB,aAAoBwD,mBAG1CxC,EAAemC,SAAS,sBACrB,SAACnB,EAAA,OAAD,CAAY2B,UAAU,SAAtB,UACI,SAACC,EAAA,GAAD,gCACIC,SAAS,UAAAjF,EAAKkF,gBAAL,eAAeD,UAAW,EACnCC,UAAQ,GACHlF,EAAKkE,SAAWC,EAAAA,GAAAA,MAAmB,CAACgB,SAAS,KAC5CnF,EAAKkE,SAAWC,EAAAA,GAAAA,UAClBnE,EAAKkE,SAAWC,EAAAA,GAAAA,iBAA8B,CAACC,SAAS,IACvDpE,EAAKkE,SAAWC,EAAAA,GAAAA,QAAqB,CAACE,OAAO,IANtD,aAQKrG,EAAE,uBAAD,OAAwBgC,EAAKkE,cAI1C9B,EAAemC,SAAS,0BACrB,SAACnB,EAAA,OAAD,UACK,UAAApD,EAAKkF,gBAAL,SAAeE,aACV1E,EAAAA,EAAAA,IAAoB,UAACV,EAAKkF,gBAAN,aAAC,EAAeE,YAAajF,GACjD,KAGbiC,EAAemC,SAAS,cACrB,SAACnB,EAAA,OAAD,UACKlC,EAAiBlB,EAAKmB,UAAWnB,EAAKoB,eAG9CgB,EAAemC,SAAS,aACrB,SAACnB,EAAA,OAAD,WACI,SAACiC,EAAA,EAAD,CAAMC,KAAMtF,EAAKuF,QAAU,QAAU,cAG1CtB,IACC,OAAIR,MAAMhB,IAAiBQ,KAAI,SAACS,EAAGC,GAC/B,IAAM6B,EACFvB,EAAQjB,SAAWP,EACbkB,EACAlB,EAAiBwB,EAAQjB,OAASW,EAE5C,OACI,SAACP,EAAA,OAAD,CAA8C2B,UAAU,SAAxD,SACKd,EAAQuB,IADb,mBAA6BA,GAA7B,OAAmCxF,EAAKQ,IAI/C,IAGhB,QAGV8B,IACC,SAACc,EAAA,SAAD,WACI,SAACA,EAAA,MAAD,WACI,SAACA,EAAA,aAAD,CAAkBS,QAASzB,EAAeY,OAASP,EAAnD,SACKH,EAAUW,KAAI,SAAAwC,GAAC,OAAIA,CAAJ,cAQ/C,EAEDvD,EAAUwD,aAAe,CACrBlD,SAAS,EACTD,MAAO,GACPoD,QAAS,CAAC,GAGd,I,EC1MA,ED0MA,EEvLMC,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,wFA2LX,GAvKc,WACV,IAAO7H,GAAKC,EAAAA,EAAAA,MAALD,EACDiC,GAAWC,EAAAA,EAAAA,KAEX6F,GAAWC,EAAAA,EAAAA,MACVzD,GAAS0D,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAM3D,KAAV,IAA7BA,MAEP,GAA8CrE,EAAAA,EAAAA,UAAiC,IAA/E,eAAOiI,EAAP,KAAwBC,EAAxB,KACA,GAA4ClI,EAAAA,EAAAA,UAAiC,IAA7E,eAAOmI,EAAP,KAAuBC,EAAvB,KAEA,GAAyBC,EAAAA,EAAAA,UAAS1G,EAAU,CACxC2G,MAAOvG,EACPwG,YAAa,SAAAC,GAAc,IAAD,YACHA,EAAUnE,MAAMoE,MADb,IACtB,2BAAyC,CAAC,IAA/B3G,EAA8B,QACrC+F,GAASa,EAAAA,EAAAA,IAAQ5G,GACpB,CAHqB,+BAIzB,IANEwC,EAAP,EAAOA,QAAS6B,EAAhB,EAAgBA,OAShBwC,EAAAA,EAAAA,iBAAgB9G,EAAgB,CAC5B+G,mBAAoB,SAAAC,GAChB,IAAM/G,GAAI,UAAO+G,EAAQC,iBAAiBC,KAAKjH,MAC/C+F,GAASa,EAAAA,EAAAA,IAAQ5G,GACpB,IAGL,IAAMkH,EAAoB,SAAClH,GAAD,OACtBA,EAAKkE,SAAWC,EAAAA,GAAAA,SAChBnE,EAAKkE,SAAWC,EAAAA,GAAAA,SAChBnE,EAAKkE,SAAWC,EAAAA,GAAAA,SAChBnE,EAAKkE,SAAWC,EAAAA,GAAAA,cAJM,EAKpBgD,EAAmB,SAACnH,GAAD,OACrBA,EAAKkE,SAAWC,EAAAA,GAAAA,UAAuBnE,EAAKkE,SAAWC,EAAAA,GAAAA,MAAmBnE,EAAKkE,SAAWC,EAAAA,GAAAA,MADrE,GAGzBpB,EAAAA,EAAAA,YAAU,WACAR,IACF6D,EACIgB,OAAOC,OAAO9E,GACT+E,OAAOJ,GACPrE,MAAK,SAAC0E,EAAG9B,GAAJ,OAAU8B,EAAE1C,QAAUY,EAAEZ,OAAxB,KAGdyB,EACIc,OAAOC,OAAO9E,GACT+E,OAAOH,GACPtE,MAAK,SAAC0E,EAAG9B,GAAJ,OAAUA,EAAErE,YAAcmG,EAAEnG,WAA5B,KAGrB,GAAE,CAACmB,IAEJ,OAAkBiF,EAAAA,EAAAA,aAA+C5H,GAA1D6H,GAAP,eAEA,GAAqBD,EAAAA,EAAAA,aAA+C9H,GAA7DgI,GAAP,eAEMC,EAAY,mCAAG,sGAAOC,EAAP,0CACEvB,GADF,4DACNrG,EADM,WAER4H,GAAiBA,GAAgB5H,EAAKuF,SAF9B,iCAGHkC,EAAQ,CAACI,UAAW,CAACC,OAAQ9H,EAAKQ,GAAI+E,SAAS,KAH5C,OAITQ,GAASgC,EAAAA,EAAAA,IAAW,CAACvH,GAAIR,EAAKQ,MAJrB,uMAAH,qDASZwH,EAAS,mCAAG,WAAOF,GAAP,iFACRL,EAAQ,CAACI,UAAW,CAACC,OAAAA,EAAQvC,SAAS,KAD9B,OAEdQ,GAASgC,EAAAA,EAAAA,IAAW,CAACvH,GAAIsH,KAFX,2CAAH,sDAKT/I,EAAQ,mCAAG,WAAO+I,GAAP,iFACPJ,EAAW,CAACG,UAAW,CAACC,OAAAA,KADjB,2CAAH,sDAIRG,EAAQ,CACV,CACIC,SAAUlK,EAAE,qBACZmK,OAAQ,kBACJ,SAACC,EAAA,OAAD,WACI,SAAC,EAAD,CACIhG,eAAgB,CACZ,KACA,QACA,aACA,aACA,UACA,YACA,mBACA,uBACA,YAEJD,SAAO,EACPE,WAAY,SAAArC,GAAI,OACZA,EAAKkE,SAAWC,EAAAA,GAAAA,eACV,EAAC,SAAC,EAAD,CAAYpF,SAAUA,EAAUiB,KAAMA,KACvC,EAHM,EAKhBwC,QAASA,IAAY2D,EACrB5D,MAAO4D,KArBX,GA0BZ,CACI+B,SAAUlK,EAAE,mBACZmK,OAAQ,kBACJ,SAACC,EAAA,OAAD,WACI,SAAC,EAAD,CACIhG,eAAgB,CACZ,KACA,QACA,aACA,aACA,UACA,YACA,aACA,cACA,mBACA,uBACA,WACA,WAEJC,WAAY,SAAArC,GAAI,wBACNA,EAAKqI,KACL,EACI,SAAC/I,EAAA,EAAD,CACIgJ,OAAK,EACLC,MAAM,OAEN9I,KAAK,WACL+I,KAAMxI,EAAKqI,KAAKI,KAFZ,kBAKZ,IAXM,EAYZ,SAAC,EAAD,CAAYzH,SAAUgH,EAAWhI,KAAMA,KAZ3B,EAchBwC,QAASA,IAAY6D,EACrB9D,MAAO8D,EACP/D,UAAW,EACP,SAACoG,EAAD,CACI5K,eAAgBE,EAAE,4BAClB2C,MAAO3C,EAAE,oBAET4C,YAAa+G,GADT,eAGR,SAACe,EAAD,CACI5K,eAAgBE,EAAE,qCAClB2C,MAAO3C,EAAE,yBAET4C,YAAa,kBAAM+G,GAAa,EAAnB,GADT,uBA3ChB,IAqDhB,OACI,iCACI,UAAC/B,EAAD,CAAO7E,KAAK,QAAZ,WACI,SAACsE,EAAA,EAAD,CAAMC,KAAK,UACVtH,EAAE,kBAEW,qBAAVqG,GAAwB,mCAAWA,EAAMsE,YAAe,SAACP,EAAA,EAAD,CAAKH,MAAOA,MAGvF,EC7MD,K","sources":["components/shared/ConfirmedButton/index.ts","components/shared/ConfirmedButton/ConfirmedButton.tsx","components/shared/DeleteButton/DeleteButton.tsx","components/shared/DeleteButton/index.ts","queries/tasks/cancelTask.ts","queries/tasks/deleteTask.ts","queries/tasks/getTasks.ts","queries/tasks/subTaskUpdates.ts","components/shared/CancelButton/CancelButton.tsx","components/shared/CancelButton/index.ts","components/tasks/CancelTask/index.ts","components/tasks/CancelTask/CancelTask.tsx","components/tasks/DeleteAllTasks/index.ts","components/tasks/DeleteAllTasks/DeleteAllTask.tsx","components/tasks/DeleteTask/index.ts","components/tasks/DeleteTask/DeleteTask.tsx","components/tasks/TasksList/TasksList.tsx","components/tasks/TasksList/index.ts","components/tasks/Tasks/Tasks.tsx","components/tasks/Tasks/index.ts"],"sourcesContent":["// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ConfirmedButton from './ConfirmedButton';\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Confirm} from 'semantic-ui-react';\n\ninterface IConfirmedButtonProps {\n    actionButton?: React.ReactElement<any>;\n    action: (param?: any) => void;\n    confirmMessage: string;\n    children: JSX.Element;\n}\n\nconst ConfirmedButton = (props: IConfirmedButtonProps): JSX.Element => {\n    const {confirmMessage, children} = props;\n    const {t} = useTranslation();\n    const [showConfirm, setShowConfirm] = useState<boolean>(false);\n\n    const _disableClick = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    const _openConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(true);\n    };\n\n    const _closeConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(false);\n    };\n\n    const _runAction = (e: React.SyntheticEvent) => {\n        _closeConfirm(e);\n        props.action();\n    };\n\n    const clickableButton = React.cloneElement(children, {onClick: _openConfirm});\n\n    return (\n        <div onClick={_disableClick}>\n            {clickableButton}\n            <Confirm\n                open={showConfirm}\n                content={confirmMessage}\n                onCancel={_closeConfirm}\n                onConfirm={_runAction}\n                cancelButton={t('admin.cancel')}\n                closeOnDocumentClick={false}\n                closeOnDimmerClick={false}\n            />\n        </div>\n    );\n};\n\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Button} from 'semantic-ui-react';\n\ninterface IDeleteButtonProps {\n    disabled: boolean;\n    onClick?: (event: React.SyntheticEvent) => void;\n}\n\nfunction DeleteButton({disabled, onClick}: IDeleteButtonProps): JSX.Element {\n    return (\n        <Button aria-label=\"delete\" className=\"delete\" circular icon=\"trash\" disabled={disabled} onClick={onClick} />\n    );\n}\n\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteButton from './DeleteButton';\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const cancelTaskMutation = gql`\n    mutation CANCEL_TASK($taskId: ID!) {\n        cancelTask(taskId: $taskId)\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const deleteTaskMutation = gql`\n    mutation DELETE_TASK($taskId: ID!, $archive: Boolean!) {\n        deleteTask(taskId: $taskId, archive: $archive)\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\nimport {recordIdentityFragment} from '../records/recordIdentityFragment';\n\nexport const getTasks = gql`\n    ${recordIdentityFragment}\n    query GET_TASKS($filters: TaskFiltersInput) {\n        tasks(filters: $filters) {\n            totalCount\n            list {\n                id\n                label\n                modified_at\n                created_at\n                created_by {\n                    ...RecordIdentity\n                }\n                startAt\n                status\n                priority\n                progress {\n                    percent\n                    description\n                }\n                startedAt\n                completedAt\n                link {\n                    name\n                    url\n                }\n                canceledBy {\n                    ...RecordIdentity\n                }\n                archive\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gql} from '@apollo/client';\nimport {recordIdentityFragment} from '../records/recordIdentityFragment';\n\nexport const subTaskUpdates = gql`\n    ${recordIdentityFragment}\n    subscription SUB_TASKS_UPDATE($filters: TaskFiltersInput) {\n        task(filters: $filters) {\n            id\n            label\n            modified_at\n            created_at\n            created_by {\n                ...RecordIdentity\n            }\n            startAt\n            status\n            priority\n            progress {\n                percent\n                description\n            }\n            startedAt\n            completedAt\n            link {\n                name\n                url\n            }\n            canceledBy {\n                ...RecordIdentity\n            }\n            archive\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Button} from 'semantic-ui-react';\n\ninterface ICancelButtonProps {\n    disabled: boolean;\n    onClick?: (event: React.SyntheticEvent) => void;\n}\n\nfunction CancelButton({disabled, onClick}: ICancelButtonProps): JSX.Element {\n    return (\n        <Button aria-label=\"cancel\" className=\"cancel\" circular icon=\"cancel\" disabled={disabled} onClick={onClick} />\n    );\n}\n\nexport default CancelButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport CancelButton from './CancelButton';\nexport default CancelButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport CancelTask from './CancelTask';\nexport default CancelTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {GET_TASKS_tasks_list} from '_gqlTypes/GET_TASKS';\nimport useUserData from '../../../hooks/useUserData';\nimport {PermissionsActions} from '../../../_gqlTypes/globalTypes';\nimport ConfirmedButton from '../../shared/ConfirmedButton';\nimport CancelButton from '../../shared/CancelButton';\nimport useLang from 'hooks/useLang';\nimport {localizedTranslation} from '@leav/utils';\n\ninterface ICancelTaskProps {\n    task: GET_TASKS_tasks_list;\n    onCancel: (taskId: string) => void;\n}\n\nconst CancelTask = ({task, onCancel}: ICancelTaskProps): JSX.Element | null => {\n    const {t} = useTranslation();\n    const userData = useUserData();\n    const lang = useLang().lang;\n\n    return userData.permissions[PermissionsActions.admin_cancel_task] ? (\n        <ConfirmedButton\n            action={() => onCancel(task.id)}\n            confirmMessage={t('tasks.confirm_cancel', {taskName: localizedTranslation(task.label, lang)})}\n        >\n            <CancelButton disabled={false} />\n        </ConfirmedButton>\n    ) : null;\n};\n\nexport default CancelTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteAllTask from './DeleteAllTask';\nexport default DeleteAllTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport useUserData from '../../../hooks/useUserData';\nimport {PermissionsActions} from '../../../_gqlTypes/globalTypes';\nimport ConfirmedButton from '../../shared/ConfirmedButton';\nimport {Button} from 'semantic-ui-react';\n\ninterface IDeleteTaskProps {\n    onDeleteAll: () => void;\n    confirmMessage: string;\n    label: string;\n}\n\nconst DeleteAllTask = ({onDeleteAll, confirmMessage, label}: IDeleteTaskProps): JSX.Element | null => {\n    const userData = useUserData();\n\n    return userData.permissions[PermissionsActions.admin_delete_task] ? (\n        <ConfirmedButton action={onDeleteAll} confirmMessage={confirmMessage}>\n            <Button secondary disabled={false} floated=\"right\" size=\"small\">\n                {label}\n            </Button>\n        </ConfirmedButton>\n    ) : null;\n};\n\nexport default DeleteAllTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteTask from './DeleteTask';\nexport default DeleteTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {GET_TASKS_tasks_list} from '_gqlTypes/GET_TASKS';\nimport useUserData from '../../../hooks/useUserData';\nimport {PermissionsActions} from '../../../_gqlTypes/globalTypes';\nimport DeleteButton from '../../shared/DeleteButton';\nimport ConfirmedButton from '../../shared/ConfirmedButton';\nimport useLang from 'hooks/useLang';\nimport {localizedTranslation} from '@leav/utils';\n\ninterface IDeleteTaskProps {\n    task: GET_TASKS_tasks_list;\n    onDelete: (taskId: string) => void;\n}\n\nconst DeleteTask = ({task, onDelete}: IDeleteTaskProps): JSX.Element | null => {\n    const {t} = useTranslation();\n    const userData = useUserData();\n    const lang = useLang().lang;\n\n    return userData.permissions[PermissionsActions.admin_delete_task] ? (\n        <ConfirmedButton\n            action={() => onDelete(task.id)}\n            confirmMessage={t('tasks.confirm_delete', {taskName: localizedTranslation(task.label, lang)})}\n        >\n            <DeleteButton disabled={false} />\n        </ConfirmedButton>\n    ) : null;\n};\n\nexport default DeleteTask;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useEffect, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Table, Progress, Icon} from 'semantic-ui-react';\nimport {GET_TASKS_tasks_list} from '_gqlTypes/GET_TASKS';\nimport {TaskStatus} from '_gqlTypes/globalTypes';\nimport Loading from '../../shared/Loading';\nimport moment from 'moment';\nimport {Column} from '../Tasks/Tasks';\nimport useLang from 'hooks/useLang';\nimport {localizedTranslation} from '@leav/utils';\n\ninterface ITasksListProps {\n    striped?: boolean;\n    enabledColumns: Column[];\n    actionsBtn?: (task: GET_TASKS_tasks_list) => JSX.Element[]; // buttons on the end of the row\n    footerBtn?: JSX.Element[]; // global buttons on bottom of the list\n    tasks: GET_TASKS_tasks_list[] | null;\n    loading?: boolean;\n}\n\nconst _getTaskDuration = (startedAt: number, completedAt: number): string => {\n    const d =\n        !startedAt || !completedAt ? moment.duration(0) : moment.duration(moment(completedAt).diff(moment(startedAt)));\n\n    return `${d.hours() + 'h'} ${d.minutes() + 'm'} ${d.seconds() + 's'}`;\n};\n\nconst _resolveColumn = (path, obj) => {\n    return path.split('.').reduce((prev, curr) => (prev ? prev[curr] : null), obj);\n};\n\nconst TasksList = ({\n    striped = false,\n    enabledColumns,\n    actionsBtn,\n    footerBtn,\n    tasks,\n    loading\n}: ITasksListProps): JSX.Element => {\n    const {t} = useTranslation();\n    const lang = useLang().lang;\n\n    const [maxNbBtnsInRow, setmaxNbBtnsInRow] = useState<number>(0);\n    const [sort, setSort] = useState<{column: string; direction: 'ascending' | 'descending'}>({\n        column: 'completedAt',\n        direction: 'descending'\n    });\n\n    useEffect(() => {\n        if (!!actionsBtn && tasks.length) {\n            setmaxNbBtnsInRow(\n                tasks.map(task => actionsBtn(task).length).reduce((prev, curr) => (curr > prev ? curr : prev), 0)\n            );\n        }\n    }, [actionsBtn]);\n\n    const onSort = (column: string) => {\n        setSort({column, direction: sort.direction === 'ascending' ? 'descending' : 'ascending'});\n    };\n\n    return (\n        <div style={{overflowX: 'scroll'}}>\n            <Table data-testid=\"TasksList\" compact sortable striped={striped}>\n                <Table.Header>\n                    <Table.Row>\n                        {enabledColumns.map(c => (\n                            <Table.HeaderCell\n                                key={`hc-${c}`}\n                                sorted={sort.column === c ? sort.direction : null}\n                                onClick={() => onSort(c)}\n                            >\n                                {t(`tasks.task-${c}`)}\n                            </Table.HeaderCell>\n                        ))}\n                        {[...Array(maxNbBtnsInRow)].map((_, i) => (\n                            <Table.HeaderCell width={1} key={`hc-btn${i}`} />\n                        ))}\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {loading ? (\n                        <Table.Row>\n                            <Table.Cell colSpan={6}>\n                                <Loading />\n                            </Table.Cell>\n                        </Table.Row>\n                    ) : (\n                        tasks &&\n                        tasks\n                            .sort((f, s) => {\n                                if (_resolveColumn(sort.column, f) < _resolveColumn(sort.column, s)) {\n                                    return sort.direction === 'ascending' ? -1 : 1;\n                                } else if (_resolveColumn(sort.column, f) > _resolveColumn(sort.column, s)) {\n                                    return sort.direction === 'ascending' ? 1 : -1;\n                                }\n\n                                return 0;\n                            })\n                            .map(task => {\n                                const actions = !!actionsBtn ? actionsBtn(task) : null;\n\n                                return (\n                                    <Table.Row\n                                        {...((task.status === TaskStatus.PENDING_CANCEL ||\n                                            task.status === TaskStatus.CANCELED) && {warning: true})}\n                                        {...(task.status === TaskStatus.FAILED && {error: true})}\n                                        key={`row${task.id}`}\n                                        data-testid=\"TableRow\"\n                                    >\n                                        {enabledColumns.includes('id') && <Table.Cell>{task.id}</Table.Cell>}\n                                        {enabledColumns.includes('label') && (\n                                            <Table.Cell>{localizedTranslation(task.label, lang)}</Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('created_by') && (\n                                            <Table.Cell>{task.created_by.whoAmI.label}</Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('created_at') && (\n                                            <Table.Cell>{new Date(task.created_at * 1000).toLocaleString()}</Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('startAt') && (\n                                            <Table.Cell>{new Date(task.startAt * 1000).toLocaleString()}</Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('startedAt') && (\n                                            <Table.Cell>\n                                                {task.startedAt ? new Date(task.startedAt * 1000).toLocaleString() : ''}\n                                            </Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('canceledBy') && (\n                                            <Table.Cell>{task.canceledBy?.whoAmI.label}</Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('completedAt') && (\n                                            <Table.Cell>\n                                                {new Date(task.completedAt * 1000).toLocaleString()}\n                                            </Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('progress.percent') && (\n                                            <Table.Cell textAlign=\"center\">\n                                                <Progress\n                                                    percent={task.progress?.percent || 0}\n                                                    progress\n                                                    {...(task.status === TaskStatus.DONE && {success: true})}\n                                                    {...((task.status === TaskStatus.CANCELED ||\n                                                        task.status === TaskStatus.PENDING_CANCEL) && {warning: true})}\n                                                    {...(task.status === TaskStatus.FAILED && {error: true})}\n                                                >\n                                                    {t(`tasks.task-statuses.${task.status}`)}\n                                                </Progress>\n                                            </Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('progress.description') && (\n                                            <Table.Cell>\n                                                {task.progress?.description\n                                                    ? localizedTranslation(task.progress?.description, lang)\n                                                    : ''}\n                                            </Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('duration') && (\n                                            <Table.Cell>\n                                                {_getTaskDuration(task.startedAt, task.completedAt)}\n                                            </Table.Cell>\n                                        )}\n                                        {enabledColumns.includes('archive') && (\n                                            <Table.Cell>\n                                                <Icon name={task.archive ? 'check' : 'close'} />\n                                            </Table.Cell>\n                                        )}\n                                        {!!actions &&\n                                            [...Array(maxNbBtnsInRow)].map((_, i) => {\n                                                const idx =\n                                                    actions.length === maxNbBtnsInRow\n                                                        ? i\n                                                        : maxNbBtnsInRow - actions.length - i;\n\n                                                return (\n                                                    <Table.Cell key={`actionBtn${idx}${task.id}`} textAlign=\"center\">\n                                                        {actions[idx]}\n                                                    </Table.Cell>\n                                                );\n                                            })}\n                                    </Table.Row>\n                                );\n                            })\n                    )}\n                </Table.Body>\n                {!!footerBtn && (\n                    <Table.Footer>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan={enabledColumns.length + maxNbBtnsInRow}>\n                                {footerBtn.map(b => b)}\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                )}\n            </Table>\n        </div>\n    );\n};\n\nTasksList.defaultProps = {\n    loading: false,\n    tasks: [],\n    filters: {}\n};\n\nexport default TasksList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport TasksList from './TasksList';\n\nexport default TasksList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useMutation, useQuery, useSubscription} from '@apollo/client';\nimport {cancelTaskMutation} from 'queries/tasks/cancelTask';\nimport {deleteTaskMutation} from 'queries/tasks/deleteTask';\nimport React, {useEffect, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useAppDispatch, useAppSelector} from 'redux/store';\nimport {addTask, deleteTask} from 'redux/tasks/tasks';\nimport {Button, Header, Icon, Tab} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {CANCEL_TASK, CANCEL_TASKVariables} from '_gqlTypes/CANCEL_TASK';\nimport {DELETE_TASK, DELETE_TASKVariables} from '_gqlTypes/DELETE_TASK';\nimport {GET_TASKS_tasks_list} from '_gqlTypes/GET_TASKS';\nimport useUserData from '../../../hooks/useUserData';\nimport {getTasks} from '../../../queries/tasks/getTasks';\nimport {subTaskUpdates} from '../../../queries/tasks/subTaskUpdates';\nimport {TaskStatus} from '../../../_gqlTypes/globalTypes';\nimport CancelTask from '../CancelTask';\nimport DeleteAllTasks from '../DeleteAllTasks';\nimport DeleteTask from '../DeleteTask';\nimport TasksList from '../TasksList';\n\nconst Title = styled(Header)`\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n`;\n\nexport type Column =\n    | 'id'\n    | 'label'\n    | 'created_by'\n    | 'created_at'\n    | 'startAt'\n    | 'startedAt'\n    | 'canceledBy'\n    | 'completedAt'\n    | 'progress.percent'\n    | 'progress.description'\n    | 'duration'\n    | 'archive';\n\nconst Tasks = (): JSX.Element => {\n    const {t} = useTranslation();\n    const userData = useUserData();\n\n    const dispatch = useAppDispatch();\n    const {tasks} = useAppSelector(state => state.tasks);\n\n    const [inProgressTasks, setInProgressTasks] = useState<GET_TASKS_tasks_list[]>([]);\n    const [completedTasks, setCompletedTasks] = useState<GET_TASKS_tasks_list[]>([]);\n\n    const {loading, error} = useQuery(getTasks, {\n        skip: !userData,\n        onCompleted: tasksData => {\n            for (const task of tasksData.tasks.list) {\n                dispatch(addTask(task));\n            }\n        }\n    });\n\n    useSubscription(subTaskUpdates, {\n        onSubscriptionData: subData => {\n            const task = {...subData.subscriptionData.data.task};\n            dispatch(addTask(task));\n        }\n    });\n\n    const _isInProgressTask = (task: GET_TASKS_tasks_list) =>\n        task.status === TaskStatus.CREATED ||\n        task.status === TaskStatus.PENDING ||\n        task.status === TaskStatus.RUNNING ||\n        task.status === TaskStatus.PENDING_CANCEL;\n    const _isCompletedTask = (task: GET_TASKS_tasks_list) =>\n        task.status === TaskStatus.CANCELED || task.status === TaskStatus.DONE || task.status === TaskStatus.FAILED;\n\n    useEffect(() => {\n        if (!!tasks) {\n            setInProgressTasks(\n                Object.values(tasks)\n                    .filter(_isInProgressTask)\n                    .sort((a, b) => a.startAt - b.startAt)\n            );\n\n            setCompletedTasks(\n                Object.values(tasks)\n                    .filter(_isCompletedTask)\n                    .sort((a, b) => b.completedAt - a.completedAt)\n            );\n        }\n    }, [tasks]);\n\n    const [delTask] = useMutation<DELETE_TASK, DELETE_TASKVariables>(deleteTaskMutation);\n\n    const [cancelTask] = useMutation<CANCEL_TASK, CANCEL_TASKVariables>(cancelTaskMutation);\n\n    const _onDeleteAll = async (archivesOnly: boolean = false) => {\n        for (const task of completedTasks) {\n            if (!archivesOnly || (archivesOnly && task.archive)) {\n                await delTask({variables: {taskId: task.id, archive: false}});\n                dispatch(deleteTask({id: task.id}));\n            }\n        }\n    };\n\n    const _onDelete = async (taskId: string) => {\n        await delTask({variables: {taskId, archive: false}});\n        dispatch(deleteTask({id: taskId}));\n    };\n\n    const onCancel = async (taskId: string) => {\n        await cancelTask({variables: {taskId}});\n    };\n\n    const panes = [\n        {\n            menuItem: t('tasks.in_progress'),\n            render: () => (\n                <Tab.Pane>\n                    <TasksList\n                        enabledColumns={[\n                            'id',\n                            'label',\n                            'created_by',\n                            'created_at',\n                            'startAt',\n                            'startedAt',\n                            'progress.percent',\n                            'progress.description',\n                            'duration'\n                        ]}\n                        striped\n                        actionsBtn={task =>\n                            task.status !== TaskStatus.PENDING_CANCEL\n                                ? [<CancelTask onCancel={onCancel} task={task} />]\n                                : []\n                        }\n                        loading={loading || !inProgressTasks}\n                        tasks={inProgressTasks}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: t('tasks.completed'),\n            render: () => (\n                <Tab.Pane>\n                    <TasksList\n                        enabledColumns={[\n                            'id',\n                            'label',\n                            'created_by',\n                            'created_at',\n                            'startAt',\n                            'startedAt',\n                            'canceledBy',\n                            'completedAt',\n                            'progress.percent',\n                            'progress.description',\n                            'duration',\n                            'archive'\n                        ]}\n                        actionsBtn={task => [\n                            ...(!!task.link\n                                ? [\n                                      <Button\n                                          basic\n                                          color=\"blue\"\n                                          key=\"download-file\"\n                                          icon=\"download\"\n                                          href={task.link.url}\n                                      />\n                                  ]\n                                : []),\n                            <DeleteTask onDelete={_onDelete} task={task} />\n                        ]}\n                        loading={loading || !completedTasks}\n                        tasks={completedTasks}\n                        footerBtn={[\n                            <DeleteAllTasks\n                                confirmMessage={t('tasks.confirm_delete_all')}\n                                label={t('tasks.delete_all')}\n                                key=\"btn-delAll\"\n                                onDeleteAll={_onDeleteAll}\n                            />,\n                            <DeleteAllTasks\n                                confirmMessage={t('tasks.confirm_delete_all_archives')}\n                                label={t('tasks.delete_archives')}\n                                key=\"btn-delArchives\"\n                                onDeleteAll={() => _onDeleteAll(true)}\n                            />\n                        ]}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    return (\n        <>\n            <Title size=\"large\">\n                <Icon name=\"tasks\" />\n                {t('tasks.title')}\n            </Title>\n            {typeof error !== 'undefined' ? <p>Error: {error.message}</p> : <Tab panes={panes} />}\n        </>\n    );\n};\n\nexport default Tasks;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport Tasks from './Tasks';\nexport default Tasks;\n"],"names":["props","confirmMessage","children","t","useTranslation","useState","showConfirm","setShowConfirm","_closeConfirm","e","preventDefault","stopPropagation","clickableButton","React","onClick","Confirm","open","content","onCancel","onConfirm","action","cancelButton","closeOnDocumentClick","closeOnDimmerClick","disabled","Button","className","circular","icon","cancelTaskMutation","gql","deleteTaskMutation","getTasks","recordIdentityFragment","subTaskUpdates","task","userData","useUserData","lang","useLang","permissions","PermissionsActions","ConfirmedButton","id","taskName","localizedTranslation","label","onDeleteAll","secondary","floated","size","onDelete","DeleteButton","_getTaskDuration","startedAt","completedAt","d","moment","diff","hours","minutes","seconds","_resolveColumn","path","obj","split","reduce","prev","curr","TasksList","striped","enabledColumns","actionsBtn","footerBtn","tasks","loading","maxNbBtnsInRow","setmaxNbBtnsInRow","column","direction","sort","setSort","useEffect","length","map","style","overflowX","Table","compact","sortable","c","sorted","Array","_","i","width","colSpan","Loading","f","s","actions","status","TaskStatus","warning","error","key","includes","created_by","whoAmI","Date","created_at","toLocaleString","startAt","canceledBy","textAlign","Progress","percent","progress","success","description","Icon","name","archive","idx","b","defaultProps","filters","Title","styled","Header","dispatch","useAppDispatch","useAppSelector","state","inProgressTasks","setInProgressTasks","completedTasks","setCompletedTasks","useQuery","skip","onCompleted","tasksData","list","addTask","useSubscription","onSubscriptionData","subData","subscriptionData","data","_isInProgressTask","_isCompletedTask","Object","values","filter","a","useMutation","delTask","cancelTask","_onDeleteAll","archivesOnly","variables","taskId","deleteTask","_onDelete","panes","menuItem","render","Tab","link","basic","color","href","url","DeleteAllTasks","message"],"sourceRoot":""}
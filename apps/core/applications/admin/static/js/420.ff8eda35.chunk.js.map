{"version":3,"file":"static/js/420.ff8eda35.chunk.js","mappings":"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","sources":["queries/attributes/deleteAttributeMutation.ts","components/attributes/DeleteAttribute/DeleteAttribute.tsx","components/attributes/DeleteAttribute/index.ts","components/attributes/Attributes/Attributes.tsx","components/attributes/Attributes/index.ts","components/attributes/AttributesList/index.ts","components/attributes/AttributesList/AttributesList.tsx","components/shared/ConfirmedButton/index.ts","components/shared/ConfirmedButton/ConfirmedButton.tsx","components/shared/DeleteButton/DeleteButton.tsx","components/shared/DeleteButton/index.ts","queries/attributes/getAttributesQuery.ts"],"sourcesContent":["// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const deleteAttrQuery = gql`\n    mutation DELETE_ATTRIBUTE($attrId: ID!) {\n        deleteAttribute(id: $attrId) {\n            id\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {StoreObject, useMutation} from '@apollo/client';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {deleteFromCache} from 'utils';\nimport {DELETE_ATTRIBUTE, DELETE_ATTRIBUTEVariables} from '_gqlTypes/DELETE_ATTRIBUTE';\nimport useLang from '../../../hooks/useLang';\nimport {deleteAttrQuery} from '../../../queries/attributes/deleteAttributeMutation';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport ConfirmedButton from '../../shared/ConfirmedButton';\nimport DeleteButton from '../../shared/DeleteButton';\n\ninterface IDeleteAttributeProps {\n    attribute?: GET_ATTRIBUTES_attributes_list;\n    filters?: any;\n}\n\nconst DeleteAttribute = (props: IDeleteAttributeProps): JSX.Element => {\n    const {attribute, filters} = props;\n    const {t} = useTranslation();\n    const {lang} = useLang();\n    const [deleteAttr] = useMutation<DELETE_ATTRIBUTE, DELETE_ATTRIBUTEVariables>(deleteAttrQuery, {\n        update: (cache, {data: {deleteAttribute}}) => {\n            deleteFromCache(cache, (deleteAttribute as unknown) as StoreObject);\n        }\n    });\n\n    const onDelete = async () =>\n        deleteAttr({\n            variables: {attrId: attribute.id}\n        });\n\n    const attrLabel =\n        attribute.label !== null ? attribute.label.fr || attribute.label.en || attribute.id : attribute.id;\n\n    return attribute ? (\n        <ConfirmedButton action={onDelete} confirmMessage={t('attributes.confirm_delete', {attrLabel})}>\n            <DeleteButton disabled={attribute.system} />\n        </ConfirmedButton>\n    ) : (\n        <></>\n    );\n};\n\nexport default DeleteAttribute;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteAttribute from './DeleteAttribute';\nexport default DeleteAttribute;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport {History} from 'history';\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {BiSpreadsheet} from 'react-icons/bi';\nimport {Link} from 'react-router-dom';\nimport {Button, Grid, Header, Icon} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport useUserData from '../../../hooks/useUserData';\nimport {getAttributesQuery} from '../../../queries/attributes/getAttributesQuery';\nimport {addWildcardToFilters} from '../../../utils/utils';\nimport {GET_ATTRIBUTES, GET_ATTRIBUTESVariables} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport {PermissionsActions} from '../../../_gqlTypes/globalTypes';\nimport AttributesList from '../AttributesList';\nimport DeleteAttribute from '../DeleteAttribute';\n\nconst Title = styled(Header)`\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n`;\n\ninterface IAttributesProps {\n    history: History;\n}\n\ninterface IAttributesFilters {\n    id?: string;\n    label?: string;\n    multiple_values?: boolean;\n    isSystem?: boolean;\n}\n\nconst Attributes = (props: IAttributesProps): JSX.Element => {\n    const {t} = useTranslation();\n    const {history} = props;\n    const [filters, setFilters] = useState<IAttributesFilters>({});\n    const userData = useUserData();\n\n    const {loading, error, data} = useQuery<GET_ATTRIBUTES, GET_ATTRIBUTESVariables>(getAttributesQuery, {\n        variables: {...addWildcardToFilters(filters)}\n    });\n\n    const _onFiltersUpdate = (filterElem: any) => {\n        const newElemState =\n            filterElem.type === 'checkbox'\n                ? filterElem.indeterminate\n                    ? undefined\n                    : filterElem.checked\n                : filterElem.value;\n\n        setFilters({\n            ...filters,\n            [filterElem.name]: newElemState\n        });\n    };\n\n    const _onRowClick = attribute => history.push('/attributes/edit/' + attribute.id);\n\n    return (\n        <div>\n            <Grid>\n                <Grid.Column textAlign=\"left\" floated=\"left\" width={8} verticalAlign=\"middle\">\n                    <Title size=\"large\">\n                        <BiSpreadsheet size={30} />\n                        {t('attributes.title')}\n                    </Title>\n                </Grid.Column>\n                {userData.permissions[PermissionsActions.admin_create_attribute] && (\n                    <Grid.Column floated=\"right\" width={6} textAlign=\"right\" verticalAlign=\"middle\">\n                        <Button primary icon labelPosition=\"left\" size=\"medium\" as={Link} to={'/attributes/edit/'}>\n                            <Icon name=\"plus\" />\n                            {t('attributes.new')}\n                        </Button>\n                    </Grid.Column>\n                )}\n            </Grid>\n            {!error ? (\n                <AttributesList\n                    loading={loading || !data}\n                    attributes={data && data.attributes ? data.attributes.list : []}\n                    onRowClick={_onRowClick}\n                    onFiltersUpdate={_onFiltersUpdate}\n                    filters={filters}\n                    actions={\n                        userData.permissions[PermissionsActions.admin_delete_attribute] ? (\n                            <DeleteAttribute key=\"delete_attr\" filters={filters} />\n                        ) : (\n                            <></>\n                        )\n                    }\n                />\n            ) : (\n                <p>Error: {error.message}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Attributes;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport Attributes from './Attributes';\nexport default Attributes;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AttributesList from './AttributesList';\nexport default AttributesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Checkbox, Dropdown, Input, Table} from 'semantic-ui-react';\nimport useLang from '../../../hooks/useLang';\nimport {localizedLabel} from '../../../utils/utils';\nimport {GET_ATTRIBUTES_attributes_list} from '../../../_gqlTypes/GET_ATTRIBUTES';\nimport {AttributeFormat, AttributeType} from '../../../_gqlTypes/globalTypes';\nimport Loading from '../../shared/Loading';\n\ninterface IAttributesListProps {\n    attributes: GET_ATTRIBUTES_attributes_list[] | null;\n    onRowClick: (attribute: GET_ATTRIBUTES_attributes_list) => void;\n    onFiltersUpdate?: (filters: any) => void;\n    loading: boolean;\n    withFilters?: boolean;\n    filters?: any;\n    actions?: JSX.Element;\n}\n\nconst AttributesList = ({\n    attributes = [],\n    loading = false,\n    withFilters = true,\n    filters = {},\n    onRowClick,\n    actions,\n    onFiltersUpdate\n}: IAttributesListProps): JSX.Element => {\n    const _handleFilterChange = (e: React.SyntheticEvent, d: any) => {\n        // If a checkbox was not checked and is clicked, go back to indeterminate state\n        if (d.type === 'checkbox' && filters[d.name] === false && d.checked) {\n            d.indeterminate = true;\n            d.checked = false;\n        }\n\n        if (onFiltersUpdate) {\n            onFiltersUpdate(d);\n        }\n    };\n\n    // const {onRowClick, children} = props;\n    const {t} = useTranslation();\n    const availableLanguages = useLang().lang;\n    const actionsList: React.ReactNode[] = actions ? (!Array.isArray(actions) ? [actions] : actions) : [];\n    const types = Object.keys(AttributeType).map(type => ({\n        key: type,\n        value: type,\n        text: t('attributes.types.' + type)\n    }));\n\n    const formats = Object.keys(AttributeFormat).map(format => ({\n        key: format,\n        value: format,\n        text: t('attributes.formats.' + format)\n    }));\n\n    return (\n        <Table selectable striped>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell width={4}>{t('attributes.label')}</Table.HeaderCell>\n                    <Table.HeaderCell width={4}>{t('attributes.ID')}</Table.HeaderCell>\n                    <Table.HeaderCell width={3}>{t('attributes.type')}</Table.HeaderCell>\n                    <Table.HeaderCell width={3}>{t('attributes.format')}</Table.HeaderCell>\n                    <Table.HeaderCell width={1}>{t('attributes.multiple_values')}</Table.HeaderCell>\n                    <Table.HeaderCell width={1}>{t('attributes.isSystem')}</Table.HeaderCell>\n                    <Table.HeaderCell width={1} />\n                </Table.Row>\n                {withFilters && (\n                    <Table.Row className=\"filters\">\n                        <Table.HeaderCell>\n                            <Input\n                                size=\"small\"\n                                fluid\n                                placeholder={t('attributes.label') + '...'}\n                                name=\"label\"\n                                value={filters.label || ''}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                            <Input\n                                size=\"small\"\n                                fluid\n                                placeholder={t('attributes.ID') + '...'}\n                                name=\"id\"\n                                value={filters.id || ''}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                            <Dropdown\n                                fluid\n                                multiple\n                                search\n                                selection\n                                options={types}\n                                placeholder={t('attributes.type') + '...'}\n                                name=\"type\"\n                                value={filters.type || []}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                            <Dropdown\n                                fluid\n                                multiple\n                                search\n                                selection\n                                options={formats}\n                                placeholder={t('attributes.format') + '...'}\n                                name=\"format\"\n                                value={filters.format || []}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                            <Checkbox\n                                indeterminate={typeof filters.multiple_values === 'undefined'}\n                                name=\"multiple_values\"\n                                checked={filters.multiple_values}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                            <Checkbox\n                                indeterminate={typeof filters.system === 'undefined'}\n                                name=\"system\"\n                                checked={filters.system}\n                                onChange={_handleFilterChange}\n                            />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell />\n                    </Table.Row>\n                )}\n            </Table.Header>\n            <Table.Body>\n                {loading ? (\n                    <Table.Row>\n                        <Table.Cell colSpan={6}>\n                            <Loading />\n                        </Table.Cell>\n                    </Table.Row>\n                ) : (\n                    !!attributes &&\n                    attributes.map(a => {\n                        const onClick = () => onRowClick(a);\n                        const attrLabel = localizedLabel(a.label, availableLanguages);\n                        return (\n                            <Table.Row key={a.id} onClick={onClick}>\n                                <Table.Cell>{attrLabel}</Table.Cell>\n                                <Table.Cell>{a.id}</Table.Cell>\n                                <Table.Cell>{t('attributes.types.' + a.type)}</Table.Cell>\n                                <Table.Cell>{a.format ? t('attributes.formats.' + a.format) : ''}</Table.Cell>\n                                <Table.Cell width={1}>\n                                    <Checkbox readOnly checked={a.multiple_values} />\n                                </Table.Cell>\n                                <Table.Cell width={1}>\n                                    <Checkbox readOnly checked={a.system} />\n                                </Table.Cell>\n                                <Table.Cell textAlign=\"right\" width={1} className=\"actions\">\n                                    {actionsList.map(child =>\n                                        React.cloneElement(child as React.ReactElement<any>, {attribute: a})\n                                    )}\n                                </Table.Cell>\n                            </Table.Row>\n                        );\n                    })\n                )}\n            </Table.Body>\n        </Table>\n    );\n};\n\nexport default AttributesList;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport ConfirmedButton from './ConfirmedButton';\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Confirm} from 'semantic-ui-react';\n\ninterface IConfirmedButtonProps {\n    actionButton?: React.ReactElement<any>;\n    action: (param?: any) => void;\n    confirmMessage: string;\n    children: JSX.Element;\n}\n\nconst ConfirmedButton = (props: IConfirmedButtonProps): JSX.Element => {\n    const {confirmMessage, children} = props;\n    const {t} = useTranslation();\n    const [showConfirm, setShowConfirm] = useState<boolean>(false);\n\n    const _disableClick = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    const _openConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(true);\n    };\n\n    const _closeConfirm = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setShowConfirm(false);\n    };\n\n    const _runAction = (e: React.SyntheticEvent) => {\n        _closeConfirm(e);\n        props.action();\n    };\n\n    const clickableButton = React.cloneElement(children, {onClick: _openConfirm});\n\n    return (\n        <div onClick={_disableClick}>\n            {clickableButton}\n            <Confirm\n                open={showConfirm}\n                content={confirmMessage}\n                onCancel={_closeConfirm}\n                onConfirm={_runAction}\n                cancelButton={t('admin.cancel')}\n                closeOnDocumentClick={false}\n                closeOnDimmerClick={false}\n            />\n        </div>\n    );\n};\n\nexport default ConfirmedButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport React from 'react';\nimport {Button} from 'semantic-ui-react';\n\ninterface IDeleteButtonProps {\n    disabled: boolean;\n    onClick?: (event: React.SyntheticEvent) => void;\n}\n\nfunction DeleteButton({disabled, onClick}: IDeleteButtonProps): JSX.Element {\n    return (\n        <Button aria-label=\"delete\" className=\"delete\" circular icon=\"trash\" disabled={disabled} onClick={onClick} />\n    );\n}\n\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport DeleteButton from './DeleteButton';\nexport default DeleteButton;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport gql from 'graphql-tag';\n\nexport const getAttributesQuery = gql`\n    query GET_ATTRIBUTES(\n        $id: ID\n        $label: String\n        $type: [AttributeType]\n        $format: [AttributeFormat]\n        $system: Boolean\n        $multiple_values: Boolean\n        $versionable: Boolean\n        $libraries: [String!]\n    ) {\n        attributes(\n            filters: {\n                id: $id\n                label: $label\n                type: $type\n                format: $format\n                system: $system\n                multiple_values: $multiple_values\n                versionable: $versionable\n                libraries: $libraries\n            }\n        ) {\n            totalCount\n            list {\n                id\n                label\n                type\n                format\n                system\n                multiple_values\n                ... on StandardAttribute {\n                    unique\n                }\n                ... on LinkAttribute {\n                    linked_library {\n                        id\n                    }\n                    reverse_link\n                }\n                ... on TreeAttribute {\n                    linked_tree {\n                        id\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["deleteAttrQuery","gql","props","attribute","t","filters","useTranslation","useLang","lang","useMutation","update","cache","deleteAttribute","data","deleteFromCache","deleteAttr","onDelete","variables","attrId","id","attrLabel","label","fr","en","ConfirmedButton","action","confirmMessage","DeleteButton","disabled","system","Title","styled","Header","history","useState","setFilters","userData","useUserData","useQuery","getAttributesQuery","addWildcardToFilters","loading","error","Grid","textAlign","floated","width","verticalAlign","size","permissions","PermissionsActions","Button","primary","icon","labelPosition","as","Link","to","Icon","name","message","AttributesList","attributes","list","onRowClick","push","onFiltersUpdate","filterElem","newElemState","type","indeterminate","undefined","checked","value","actions","withFilters","_handleFilterChange","e","d","availableLanguages","actionsList","Array","isArray","types","Object","keys","AttributeType","map","key","text","formats","AttributeFormat","format","Table","selectable","striped","className","Input","fluid","placeholder","onChange","Dropdown","multiple","search","selection","options","Checkbox","multiple_values","colSpan","Loading","a","localizedLabel","onClick","readOnly","child","React","children","showConfirm","setShowConfirm","_closeConfirm","preventDefault","stopPropagation","clickableButton","Confirm","open","content","onCancel","onConfirm","cancelButton","closeOnDocumentClick","closeOnDimmerClick","circular"],"sourceRoot":""}
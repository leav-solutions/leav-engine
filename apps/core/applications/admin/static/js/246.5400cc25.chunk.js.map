{"version":3,"file":"static/js/246.5400cc25.chunk.js","mappings":"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","sources":["queries/versionProfiles/getVersionProfileByIdQuery.ts","queries/versionProfiles/saveVersionProfileMutation.ts","components/versionProfiles/EditVersionProfile/InfoForm/LinkedAttributes/LinkedAttributes.tsx","components/versionProfiles/EditVersionProfile/InfoForm/LinkedAttributes/index.ts","components/versionProfiles/EditVersionProfile/InfoForm/InfoForm.tsx","components/versionProfiles/EditVersionProfile/InfoForm/index.ts","components/versionProfiles/EditVersionProfile/EditVersionProfile.tsx","components/versionProfiles/EditVersionProfile/index.ts","../../../node_modules/lodash/_baseUnset.js","../../../node_modules/lodash/_customOmitClone.js","../../../node_modules/lodash/_parent.js","../../../node_modules/lodash/last.js","../../../node_modules/lodash/omit.js"],"sourcesContent":["// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gql} from '@apollo/client';\n\nexport const getVersionProfileByIdQuery = gql`\n    query GET_VERSION_PROFILE_BY_ID($id: ID!) {\n        versionProfiles(filters: {id: $id}) {\n            list {\n                id\n                label\n                description\n                trees {\n                    id\n                    label\n                }\n                linkedAttributes {\n                    id\n                    label\n                }\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gql} from '@apollo/client';\n\nexport const saveVersionProfileMutation = gql`\n    mutation SAVE_VERSION_PROFILE($versionProfile: VersionProfileInput!) {\n        saveVersionProfile(versionProfile: $versionProfile) {\n            id\n            label\n            description\n            trees {\n                id\n                label\n            }\n        }\n    }\n`;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useApolloClient, useMutation} from '@apollo/client';\nimport {localizedTranslation} from '@leav/utils';\nimport AttributesSelectionModal from 'components/attributes/AttributesSelectionModal';\nimport EditAttributeModal from 'components/attributes/EditAttributeModal';\nimport ConfirmedButton from 'components/shared/ConfirmedButton';\nimport SimplisticButton from 'components/shared/SimplisticButton';\nimport useLang from 'hooks/useLang';\nimport {saveAttributeQuery} from 'queries/attributes/saveAttributeMutation';\nimport {getVersionProfileByIdQuery} from 'queries/versionProfiles/getVersionProfileByIdQuery';\nimport React, {SyntheticEvent, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Icon, Input, Table} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {borderColorBase, borderRadiusBase, greyBackground} from 'themingVar';\nimport {\n    GET_VERSION_PROFILE_BY_ID_versionProfiles_list,\n    GET_VERSION_PROFILE_BY_ID_versionProfiles_list_linkedAttributes\n} from '_gqlTypes/GET_VERSION_PROFILE_BY_ID';\nimport {AttributeType} from '_gqlTypes/globalTypes';\nimport {SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables} from '_gqlTypes/SAVE_ATTRIBUTE';\n\nconst Wrapper = styled.div`\n    &&& {\n        margin-top: 1rem;\n    }\n`;\n\nconst ListWrapper = styled.div`\n    max-height: 20rem;\n    overflow-y: auto;\n    border-top-left-radius: ${borderRadiusBase};\n    border-top-right-radius: ${borderRadiusBase};\n\n    && > table {\n        border-radius: 0;\n        border-bottom: none;\n        border-top: none;\n    }\n`;\n\nconst AttributeRow = styled(Table.Row)`\n    cursor: pointer;\n`;\n\nconst AttributeIdWrapper = styled.span`\n    color: rgba(0, 0, 0, 0.4);\n    font-size: 0.9rem;\n    margin-left: 0.5rem;\n`;\n\nconst SearchWrapper = styled.div`\n    padding: 0.5rem 1rem;\n    border: 1px solid ${borderColorBase};\n    border-radius: ${borderRadiusBase};\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    background: ${greyBackground};\n`;\n\nconst Footer = styled.div<{$hasAttributes: boolean}>`\n    padding: 0.5rem 1rem;\n    border: 1px solid ${borderColorBase};\n    border-radius: ${borderRadiusBase};\n    background: ${greyBackground};\n\n    ${props =>\n        props.$hasAttributes &&\n        `\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    `}\n`;\n\ninterface ILinkedAttributesProps {\n    profile: GET_VERSION_PROFILE_BY_ID_versionProfiles_list;\n    readonly: boolean;\n}\n\nfunction LinkedAttributes({readonly, profile}: ILinkedAttributesProps): JSX.Element {\n    const {lang} = useLang();\n    const {t} = useTranslation();\n\n    const [attributeModalDisplay, setAttributeModalDisplay] = useState<{visible: boolean; attribute?: string}>({\n        visible: false\n    });\n    const [saveAttribute] = useMutation<SAVE_ATTRIBUTE, SAVE_ATTRIBUTEVariables>(saveAttributeQuery);\n    const apolloClient = useApolloClient();\n\n    const [showAttributeSelector, setShowAttributeSelector] = React.useState(false);\n    const [search, setSearch] = React.useState('');\n\n    const _handleOpenAddAttribute = (e: SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        setShowAttributeSelector(true);\n    };\n\n    const _handleCloseAddAttribute = () => {\n        setShowAttributeSelector(false);\n    };\n\n    const _handleSubmitAddAttribute = async (selectedAttributes: string[]) => {\n        try {\n            const savedAttributes = await Promise.all(\n                selectedAttributes.map(attributeId =>\n                    saveAttribute({\n                        variables: {\n                            attrData: {\n                                id: attributeId,\n                                versions_conf: {\n                                    versionable: true,\n                                    profile: profile.id\n                                }\n                            }\n                        }\n                    })\n                )\n            );\n\n            _handleCloseAddAttribute();\n\n            // Update apollo cache\n            apolloClient.writeQuery({\n                query: getVersionProfileByIdQuery,\n                variables: {\n                    id: profile.id\n                },\n                data: {\n                    versionProfiles: {\n                        __typename: 'VersionProfileList',\n                        list: [\n                            {\n                                ...profile,\n                                linkedAttributes: [\n                                    ...profile.linkedAttributes,\n                                    ...savedAttributes.map(a => a.data.saveAttribute)\n                                ]\n                            }\n                        ]\n                    }\n                }\n            });\n        } catch (e) {\n            // Exception is handled in Apollo Client\n        }\n    };\n\n    const _handleUnlinkAttribute = (attributeId: string) => async () => {\n        await saveAttribute({\n            variables: {\n                attrData: {\n                    id: attributeId,\n                    versions_conf: {\n                        versionable: true,\n                        profile: null\n                    }\n                }\n            }\n        });\n\n        // Update apollo cache\n        apolloClient.writeQuery({\n            query: getVersionProfileByIdQuery,\n            variables: {\n                id: profile.id\n            },\n            data: {\n                versionProfiles: {\n                    __typename: 'VersionProfileList',\n                    list: [\n                        {\n                            ...profile,\n                            linkedAttributes: [...profile.linkedAttributes.filter(a => a.id !== attributeId)]\n                        }\n                    ]\n                }\n            }\n        });\n    };\n\n    const _handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(e.target.value);\n    };\n\n    const _handleRowClick = (attribute: GET_VERSION_PROFILE_BY_ID_versionProfiles_list_linkedAttributes) => () => {\n        setAttributeModalDisplay({visible: true, attribute: attribute.id});\n    };\n\n    const _handleCloseAttributeModal = () => setAttributeModalDisplay({visible: false});\n\n    const attributesList = profile.linkedAttributes.filter(\n        a =>\n            !search ||\n            a.id.match(new RegExp(`${search}`, 'i')) ||\n            Object.values(a.label).some(langLabel => langLabel.match(new RegExp(`${search}`, 'i')))\n    );\n\n    return (\n        <Wrapper className=\"field\">\n            <label>{t('version_profiles.linked_attributes')}</label>\n            {!!profile.linkedAttributes.length && (\n                <SearchWrapper>\n                    <Input\n                        icon=\"search\"\n                        size=\"small\"\n                        onChange={_handleSearchChange}\n                        placeholder={t('admin.search_placeholder')}\n                    />\n                </SearchWrapper>\n            )}\n            <ListWrapper>\n                <Table>\n                    <Table.Body>\n                        {attributesList.map(attribute => {\n                            const attributeLabel = localizedTranslation(attribute.label, lang);\n                            return (\n                                <AttributeRow key={attribute.id} onClick={_handleRowClick(attribute)}>\n                                    <Table.Cell>\n                                        {attributeLabel}\n                                        <AttributeIdWrapper>{attribute.id}</AttributeIdWrapper>\n                                    </Table.Cell>\n                                    <Table.Cell width={1}>\n                                        <ConfirmedButton\n                                            action={_handleUnlinkAttribute(attribute.id)}\n                                            confirmMessage={t('version_profiles.unlink_attribute_confirm', {\n                                                attributeLabel\n                                            })}\n                                        >\n                                            <SimplisticButton icon=\"cancel\" name=\"unlink\" aria-label=\"unlink\" />\n                                        </ConfirmedButton>\n                                    </Table.Cell>\n                                </AttributeRow>\n                            );\n                        })}\n                    </Table.Body>\n                </Table>\n            </ListWrapper>\n            {!readonly && (\n                <Footer $hasAttributes={!!profile.linkedAttributes.length}>\n                    <SimplisticButton basic labelPosition=\"left\" onClick={_handleOpenAddAttribute}>\n                        <Icon name=\"plus\" />\n                        {t('version_profiles.link_attributes')}\n                    </SimplisticButton>\n                </Footer>\n            )}\n            {showAttributeSelector && (\n                <AttributesSelectionModal\n                    openModal={showAttributeSelector}\n                    onClose={_handleCloseAddAttribute}\n                    onSubmit={_handleSubmitAddAttribute}\n                    filter={{type: [AttributeType.advanced, AttributeType.advanced_link, AttributeType.tree]}}\n                    selection={profile.linkedAttributes.map(a => a.id)}\n                />\n            )}\n            {attributeModalDisplay.visible && (\n                <EditAttributeModal\n                    open={true}\n                    onClose={_handleCloseAttributeModal}\n                    attribute={attributeModalDisplay.attribute}\n                />\n            )}\n        </Wrapper>\n    );\n}\n\nexport default LinkedAttributes;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport LinkedAttributes from './LinkedAttributes';\nexport default LinkedAttributes;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {ErrorTypes} from '@leav/utils';\nimport FormFieldWrapper from 'components/shared/FormFieldWrapper';\nimport TreesSelector from 'components/trees/TreesSelector';\nimport {Formik, FormikProps} from 'formik';\nimport useLang from 'hooks/useLang';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Form, FormProps, Icon, Message} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {formatIDString, getFieldError} from 'utils';\nimport * as yup from 'yup';\nimport {GET_VERSION_PROFILE_BY_ID_versionProfiles_list} from '_gqlTypes/GET_VERSION_PROFILE_BY_ID';\nimport {VersionProfileInput} from '_gqlTypes/globalTypes';\nimport {IFormError} from '_types/errors';\nimport LinkedAttributes from './LinkedAttributes';\n\nconst FormWrapper = styled(({isNewProfile, ...props}: {isNewProfile: boolean} & FormProps) => <Form {...props} />)`\n    && {\n        position: unset;\n        display: grid;\n        grid-template-rows: ${props => (props.isNewProfile ? 'auto 6rem' : 'auto')};\n    }\n`;\n\nconst FormBody = styled.div``;\n\nconst FormFooter = styled.div`\n    border-top: 1px solid #dddddd;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    padding: 1em;\n    text-align: right;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n`;\n\ninterface IInfoFormProps {\n    profile?: GET_VERSION_PROFILE_BY_ID_versionProfiles_list;\n    onSubmit?: (profile: VersionProfileInput) => void;\n    onCheckIdUniqueness?: (id: string) => Promise<boolean>;\n    readonly: boolean;\n    loading: boolean;\n    errors?: IFormError;\n}\n\nfunction InfoForm({readonly, loading, profile, onSubmit, errors, onCheckIdUniqueness}: IInfoFormProps): JSX.Element {\n    const {t} = useTranslation();\n    const {availableLangs, defaultLang} = useLang();\n    const isReadOnly = readonly || loading;\n\n    const defaultApplicationData: VersionProfileInput = {\n        id: '',\n        label: availableLangs.reduce((acc, cur) => {\n            acc[cur] = '';\n            return acc;\n        }, {}),\n        description: availableLangs.reduce((acc, cur) => {\n            acc[cur] = '';\n            return acc;\n        }, {}),\n        trees: []\n    };\n\n    const isNewProfile = !profile;\n    const initialValues: VersionProfileInput = {\n        ...defaultApplicationData,\n        ...profile,\n        trees: (profile?.trees ?? []).map(tree => tree.id)\n    };\n\n    const _handleSubmit = (values: VersionProfileInput) => {\n        onSubmit(values);\n    };\n\n    const serverValidationErrors =\n        errors && errors.extensions.code === ErrorTypes.VALIDATION_ERROR ? errors.extensions.fields : {};\n\n    let idValidator = yup\n        .string()\n        .required()\n        .matches(/^[a-z0-9_]+$/);\n\n    if (isNewProfile) {\n        // TODO: ID unicity validation is not debounced. As it's not trivial to implement, check future implementation\n        // in formik (https://github.com/jaredpalmer/formik/pull/1597)\n        idValidator = idValidator.test('isIdUnique', t('admin.validation_errors.id_exists'), onCheckIdUniqueness);\n    }\n\n    const validationSchema = yup.object().shape({\n        id: idValidator,\n        label: yup.object().shape({\n            [defaultLang]: yup.string().required()\n        }),\n        description: yup\n            .object()\n            .shape({\n                [defaultLang]: yup.string()\n            })\n            .nullable(),\n        trees: yup.array(yup.string())\n    });\n\n    const _renderForm = ({\n        handleSubmit,\n        handleBlur,\n        setFieldValue,\n        errors: inputErrors,\n        values,\n        touched,\n        submitForm\n    }: FormikProps<VersionProfileInput>) => {\n        const _handleLabelChange = (e, data) => {\n            _handleChange(e, data);\n\n            const {name, value} = data;\n            const [field, subfield] = name.split('.');\n\n            // On new attribute, automatically generate an ID based on label\n            if (isNewProfile && field === 'label' && subfield === defaultLang) {\n                setFieldValue('id', formatIDString(value));\n            }\n        };\n\n        const _handleChange = async (e, data) => {\n            const isCheckbox = data.type === 'checkbox';\n            const value = isCheckbox ? data.checked : data.value;\n            const name: string = data.name;\n\n            await setFieldValue(name, value);\n        };\n\n        const _handleChangeWithSubmit = async (e, data) => {\n            await _handleChange(e, data);\n\n            if (!isNewProfile) {\n                submitForm();\n            }\n        };\n\n        const _getErrorByField = (fieldName: string): string =>\n            getFieldError<VersionProfileInput>(fieldName, touched, serverValidationErrors || {}, inputErrors);\n\n        const _handleBlur = (e: React.FocusEvent) => {\n            if (isNewProfile) {\n                handleBlur(e);\n            } else {\n                submitForm();\n            }\n        };\n\n        const _handleKeyPress = (e: React.KeyboardEvent) => {\n            if (e.key === 'Enter') {\n                submitForm();\n            }\n        };\n\n        const _onSubmit = () => {\n            return handleSubmit();\n        };\n\n        return (\n            <FormWrapper onSubmit={_onSubmit} aria-label=\"infos-form\" isNewProfile={isNewProfile}>\n                <FormBody>\n                    <Form.Group grouped>\n                        <label>{t('admin.label')}</label>\n                        {availableLangs.map(lang => (\n                            <FormFieldWrapper key={lang} error={_getErrorByField(`label.${lang}`)}>\n                                <Form.Input\n                                    required={lang === defaultLang}\n                                    label={lang}\n                                    width=\"4\"\n                                    name={`label.${lang}`}\n                                    aria-label={`label.${lang}`}\n                                    disabled={isReadOnly}\n                                    onChange={_handleLabelChange}\n                                    onBlur={_handleBlur}\n                                    onKeyPress={_handleKeyPress}\n                                    value={values.label?.[lang] ?? ''}\n                                />\n                            </FormFieldWrapper>\n                        ))}\n                    </Form.Group>\n                    <Form.Group grouped>\n                        <label>{t('admin.description')}</label>\n                        {availableLangs.map(lang => (\n                            <FormFieldWrapper key={lang} error={_getErrorByField(`description.${lang}`)}>\n                                <Form.Input\n                                    label={lang}\n                                    value={values.description?.[lang] ?? ''}\n                                    width=\"4\"\n                                    name={`description.${lang}`}\n                                    aria-label={`description.${lang}`}\n                                    disabled={isReadOnly}\n                                    onChange={_handleChange}\n                                    onBlur={_handleBlur}\n                                    onKeyPress={_handleKeyPress}\n                                />\n                            </FormFieldWrapper>\n                        ))}\n                    </Form.Group>\n                    <FormFieldWrapper error={_getErrorByField('id')}>\n                        <Form.Input\n                            required\n                            label={t('admin.id')}\n                            width=\"4\"\n                            disabled={!isNewProfile || isReadOnly}\n                            name=\"id\"\n                            aria-label=\"id\"\n                            onChange={_handleChange}\n                            onBlur={_handleBlur}\n                            value={values.id}\n                        />\n                    </FormFieldWrapper>\n                    <FormFieldWrapper error={_getErrorByField('trees')}>\n                        <TreesSelector\n                            label={t('version_profiles.trees')}\n                            placeholder={t('version_profiles.select_trees')}\n                            fluid\n                            selection\n                            multiple\n                            width=\"4\"\n                            disabled={isReadOnly}\n                            name=\"trees\"\n                            aria-label=\"id\"\n                            onChange={_handleChangeWithSubmit}\n                            onBlur={_handleBlur}\n                            value={values.trees}\n                        />\n                    </FormFieldWrapper>\n                    {!isNewProfile && <LinkedAttributes profile={profile} readonly={readonly} />}\n                </FormBody>\n                {!readonly && isNewProfile && (\n                    <FormFooter>\n                        <Form.Button\n                            type=\"submit\"\n                            primary\n                            icon\n                            loading={loading}\n                            data-test-id=\"attribute-infos-submit-btn\"\n                            style={{float: 'right'}}\n                            labelPosition=\"left\"\n                        >\n                            <Icon name=\"save outline\" />\n                            {t('admin.submit')}\n                        </Form.Button>\n                    </FormFooter>\n                )}\n            </FormWrapper>\n        );\n    };\n\n    return (\n        <>\n            {errors?.extensions.code === ErrorTypes.PERMISSION_ERROR && (\n                <Message negative>\n                    <Message.Header>\n                        <Icon name=\"ban\" /> {errors.message}\n                        <Icon aria-label=\"ban\" /> {errors.message}\n                    </Message.Header>\n                </Message>\n            )}\n            <Formik\n                initialValues={initialValues}\n                onSubmit={_handleSubmit}\n                validateOnChange\n                validationSchema={validationSchema}\n            >\n                {_renderForm}\n            </Formik>\n        </>\n    );\n}\n\nexport default InfoForm;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport InfoForm from './InfoForm';\nexport default InfoForm;","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useApolloClient,useMutation,useQuery} from '@apollo/client';\nimport {localizedTranslation} from '@leav/utils';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport Loading from 'components/shared/Loading';\nimport useLang from 'hooks/useLang';\nimport useUserData from 'hooks/useUserData';\nimport omit from 'lodash/omit';\nimport {getVersionProfileByIdQuery} from 'queries/versionProfiles/getVersionProfileByIdQuery';\nimport {getVersionProfilesQuery} from 'queries/versionProfiles/getVersionProfilesQuery';\nimport {saveVersionProfileMutation} from 'queries/versionProfiles/saveVersionProfileMutation';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {match,useHistory} from 'react-router';\nimport {Divider,Header} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {GET_VERSION_PROFILES,GET_VERSION_PROFILESVariables} from '_gqlTypes/GET_VERSION_PROFILES';\nimport {GET_VERSION_PROFILE_BY_ID,GET_VERSION_PROFILE_BY_IDVariables} from '_gqlTypes/GET_VERSION_PROFILE_BY_ID';\nimport {PermissionsActions,VersionProfileInput} from '_gqlTypes/globalTypes';\nimport {SAVE_VERSION_PROFILE,SAVE_VERSION_PROFILEVariables} from '_gqlTypes/SAVE_VERSION_PROFILE';\nimport {IFormError} from '_types/errors';\nimport InfoForm from './InfoForm';\n\nexport interface IEditVersionProfileMatchParams {\n    id?: string;\n}\n\ninterface IEditVersionProfileProps {\n    match?: match<IEditVersionProfileMatchParams>;\n}\n\nconst Wrapper = styled.div`\n    display: grid;\n    grid-template-rows: auto 1fr;\n`;\n\nfunction EditVersionProfile({match: routerMatch}: IEditVersionProfileProps): JSX.Element {\n    const apolloClient = useApolloClient();\n    const history = useHistory();\n    const {t} = useTranslation();\n    const {lang} = useLang();\n    const userData = useUserData();\n    const profileId = routerMatch.params?.id ?? null;\n    const isNewProfile = !profileId;\n\n    const {loading, error, data} = useQuery<GET_VERSION_PROFILE_BY_ID, GET_VERSION_PROFILE_BY_IDVariables>(\n        getVersionProfileByIdQuery,\n        {\n            variables: {id: profileId},\n            skip: isNewProfile\n        }\n    );\n\n    const [saveVersionProfile, {loading: saveLoading, error: saveError}] = useMutation<\n        SAVE_VERSION_PROFILE,\n        SAVE_VERSION_PROFILEVariables\n    >(saveVersionProfileMutation, {\n        // Prevents Apollo from throwing an exception on error state. Errors are managed with the error variable\n        onCompleted: res => {\n            if (isNewProfile) {\n                // Redirect to new app editing\n                history.push(`/version_profiles/edit/${res.saveVersionProfile.id}`);\n            }\n        },\n        update: cache => {\n            // We created a new profile, invalidate all version profiles list cache\n            if (isNewProfile) {\n                cache.evict({fieldName: 'versionProfiles'});\n            }\n        }\n    });\n\n    const _handleSubmit = async (profileData: VersionProfileInput) => {\n        try {\n            await saveVersionProfile({\n                variables: {\n                    versionProfile: {\n                        id: profileData.id,\n                        description: profileData.description,\n                        label: profileData.label,\n                        trees: profileData.trees\n                    }\n                }\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const _handleCheckIdIsUnique = async (value: string): Promise<boolean> => {\n        if (!value) {\n            return true;\n        }\n\n        try {\n            // Using apolloClient.query to be able to await query result\n            const res = await apolloClient.query<GET_VERSION_PROFILES, GET_VERSION_PROFILESVariables>({\n                query: getVersionProfilesQuery,\n                variables: {filters: {id: value}},\n                errorPolicy: 'all'\n            });\n\n            // No result means id is unique\n            return !res?.data?.versionProfiles?.list.length;\n        } catch (err) {\n            return true;\n        }\n    };\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (error) {\n        return <ErrorDisplay message={error.message} />;\n    }\n\n    if (!isNewProfile && !data?.versionProfiles?.list.length) {\n        return <ErrorDisplay message={t('version_profiles.not_found')} />;\n    }\n\n    const profile = data?.versionProfiles?.list.length ? omit(data?.versionProfiles?.list?.[0], '__typename') : null;\n\n    const isReadOnly = !userData?.permissions?.[PermissionsActions.admin_edit_version_profile] ?? false;\n    const formErrors = error?.graphQLErrors?.length ? error.graphQLErrors[0] : null;\n    const headerLabel = profile?.label ? localizedTranslation(profile.label, lang) : t('version_profiles.new');\n\n    return (\n        <>\n            <Header>\n                <Header.Content>{headerLabel}</Header.Content>\n                <Divider />\n            </Header>\n            <InfoForm\n                profile={profile}\n                readonly={isReadOnly}\n                loading={saveLoading}\n                errors={(formErrors as unknown) as IFormError}\n                onCheckIdUniqueness={_handleCheckIdIsUnique}\n                onSubmit={_handleSubmit}\n            />\n        </>\n    );\n}\n\nexport default EditVersionProfile;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport EditVersionProfile from './EditVersionProfile';\nexport default EditVersionProfile;","var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n","var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n","var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"],"names":["getVersionProfileByIdQuery","gql","saveVersionProfileMutation","Wrapper","styled","ListWrapper","borderRadiusBase","AttributeRow","Table","AttributeIdWrapper","SearchWrapper","borderColorBase","greyBackground","Footer","props","$hasAttributes","readonly","profile","lang","useLang","t","useTranslation","useState","visible","attributeModalDisplay","setAttributeModalDisplay","useMutation","saveAttributeQuery","saveAttribute","apolloClient","useApolloClient","React","showAttributeSelector","setShowAttributeSelector","search","setSearch","_handleCloseAddAttribute","_handleSubmitAddAttribute","selectedAttributes","Promise","all","map","attributeId","variables","attrData","id","versions_conf","versionable","savedAttributes","writeQuery","query","data","versionProfiles","__typename","list","linkedAttributes","a","_handleRowClick","attribute","attributesList","filter","match","RegExp","Object","values","label","some","langLabel","className","length","Input","icon","size","onChange","e","target","value","placeholder","attributeLabel","localizedTranslation","onClick","width","ConfirmedButton","action","confirmMessage","SimplisticButton","name","basic","labelPosition","preventDefault","stopPropagation","Icon","AttributesSelectionModal","openModal","onClose","onSubmit","type","AttributeType","selection","EditAttributeModal","open","FormWrapper","isNewProfile","Form","FormBody","FormFooter","loading","errors","onCheckIdUniqueness","availableLangs","defaultLang","isReadOnly","defaultApplicationData","reduce","acc","cur","description","trees","initialValues","tree","serverValidationErrors","extensions","code","ErrorTypes","fields","idValidator","yup","required","matches","test","validationSchema","shape","nullable","Message","negative","message","validateOnChange","handleSubmit","handleBlur","setFieldValue","inputErrors","touched","submitForm","_handleLabelChange","_handleChange","split","field","subfield","formatIDString","isCheckbox","checked","_handleChangeWithSubmit","_getErrorByField","fieldName","getFieldError","_handleBlur","_handleKeyPress","key","grouped","FormFieldWrapper","error","disabled","onBlur","onKeyPress","TreesSelector","fluid","multiple","primary","style","float","routerMatch","history","useHistory","userData","useUserData","profileId","params","useQuery","skip","onCompleted","res","push","saveVersionProfile","update","cache","evict","saveLoading","_handleSubmit","profileData","versionProfile","console","_handleCheckIdIsUnique","getVersionProfilesQuery","filters","errorPolicy","Loading","ErrorDisplay","omit","permissions","PermissionsActions","formErrors","graphQLErrors","headerLabel","Header","Divider","castPath","require","last","parent","toKey","module","exports","object","path","isPlainObject","undefined","baseGet","baseSlice","array","arrayMap","baseClone","baseUnset","copyObject","customOmitClone","flatRest","getAllKeysIn","paths","result","isDeep","CLONE_DEEP_FLAG"],"sourceRoot":""}
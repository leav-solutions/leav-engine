{"version":3,"file":"static/js/591.a11191be.chunk.js","mappings":"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","sources":["queries/stats/getStatsQuery.ts","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticGroup.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticLabel.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/Statistic.js","components/app/Dashboard/Stats/Stats.tsx","components/app/Dashboard/Stats/index.ts","components/app/Dashboard/Dashboard.tsx","components/app/Dashboard/index.ts"],"sourcesContent":["// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {gql} from '@apollo/client';\n\nexport const getStatsQuery = gql`\n    query GET_STATS {\n        libraries(pagination: {offset: 0, limit: 1}) {\n            totalCount\n        }\n        attributes(pagination: {offset: 0, limit: 1}) {\n            totalCount\n        }\n        trees(pagination: {offset: 0, limit: 1}) {\n            totalCount\n        }\n        applications(pagination: {offset: 0, limit: 1}) {\n            totalCount\n        }\n    }\n`;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Statistic from './Statistic';\n/**\n * A group of statistics.\n */\n\nfunction StatisticGroup(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      items = props.items,\n      size = props.size,\n      widths = props.widths;\n  var classes = cx('ui', color, size, useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useWidthProp(widths), 'statistics', className);\n  var rest = getUnhandledProps(StatisticGroup, props);\n  var ElementType = getElementType(StatisticGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(items, function (item) {\n    return Statistic.create(item);\n  }));\n}\n\nStatisticGroup.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"horizontal\", \"inverted\", \"items\", \"size\", \"widths\"];\nStatisticGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic group can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic group can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic group can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Array of props for Statistic. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A statistic group can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** A statistic group can have its items divided evenly. */\n  widths: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default StatisticGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A statistic can contain a label to help provide context for the presented value.\n */\n\nfunction StatisticLabel(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('label', className);\n  var rest = getUnhandledProps(StatisticLabel, props);\n  var ElementType = getElementType(StatisticLabel, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticLabel.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nStatisticLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nStatisticLabel.create = createShorthandFactory(StatisticLabel, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticLabel;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticValue.handledProps = [\"as\", \"children\", \"className\", \"content\", \"text\"];\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useValueAndKey } from '../../lib';\nimport StatisticGroup from './StatisticGroup';\nimport StatisticLabel from './StatisticLabel';\nimport StatisticValue from './StatisticValue';\n/**\n * A statistic emphasizes the current value of an attribute.\n */\n\nfunction Statistic(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      floated = props.floated,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      label = props.label,\n      size = props.size,\n      text = props.text,\n      value = props.value;\n  var classes = cx('ui', color, size, useValueAndKey(floated, 'floated'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), 'statistic', className);\n  var rest = getUnhandledProps(Statistic, props);\n  var ElementType = getElementType(Statistic, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), StatisticValue.create(value, {\n    defaultProps: {\n      text: text\n    },\n    autoGenerateKey: false\n  }), StatisticLabel.create(label, {\n    autoGenerateKey: false\n  }));\n}\n\nStatistic.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"floated\", \"horizontal\", \"inverted\", \"label\", \"size\", \"text\", \"value\"];\nStatistic.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic can sit to the left or right of other content. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A statistic can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Label content of the Statistic. */\n  label: customPropTypes.contentShorthand,\n\n  /** A statistic can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool,\n\n  /** Value content of the Statistic. */\n  value: customPropTypes.contentShorthand\n} : {};\nStatistic.Group = StatisticGroup;\nStatistic.Label = StatisticLabel;\nStatistic.Value = StatisticValue;\nStatistic.create = createShorthandFactory(Statistic, function (content) {\n  return {\n    content: content\n  };\n});\nexport default Statistic;","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport {useQuery} from '@apollo/client';\nimport ErrorDisplay from 'components/shared/ErrorDisplay';\nimport Loading from 'components/shared/Loading';\nimport useMenuItems from 'hooks/useMenuItems';\nimport {IMenuItem} from 'hooks/useMenuItems/useMenuItems';\nimport {getStatsQuery} from 'queries/stats/getStatsQuery';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {Statistic} from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport {GET_STATS} from '_gqlTypes/GET_STATS';\n\nconst StatsGroup = styled(Statistic.Group)`\n    && {\n        display: flex;\n        justify-content: center;\n        gap: 2rem;\n        flex-direction: row;\n        flex-wrap: wrap;\n        margin: 0;\n        ::after {\n            content: none;\n        }\n    }\n`;\n\nconst StatItem = styled(Statistic)`\n    &&&& {\n        border: 1px solid #ccc;\n        padding: 1rem;\n        width: 13rem;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 1rem;\n        cursor: pointer;\n        box-shadow: 1px 1px 4px #ccc;\n        margin: 0;\n    }\n`;\n\nconst StatLabel = styled(Statistic.Label)`\n    &&&&& {\n        text-transform: none;\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n    }\n`;\n\nfunction Stats(): JSX.Element {\n    const {loading, error, data} = useQuery<GET_STATS>(getStatsQuery);\n    const {t} = useTranslation();\n    const menuItems = useMenuItems({size: 'small'});\n    const history = useHistory();\n\n    const itemsByKey: {[key: string]: IMenuItem} = menuItems.reduce((acc, item) => {\n        acc[item.id] = item;\n        return acc;\n    }, {});\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (error) {\n        return <ErrorDisplay />;\n    }\n\n    const statsParts = [\n        {\n            label: t('libraries.title'),\n            route: 'libraries',\n            value: data?.libraries?.totalCount ?? 0,\n            icon: itemsByKey.libraries.icon\n        },\n        {\n            label: t('attributes.title'),\n            route: 'attributes',\n            value: data?.attributes?.totalCount ?? 0,\n            icon: itemsByKey.attributes.icon\n        },\n        {label: t('trees.title'), route: 'trees', value: data?.trees?.totalCount ?? 0, icon: itemsByKey.trees.icon},\n        {\n            label: t('applications.title'),\n            route: 'applications',\n            value: data?.applications?.totalCount ?? 0,\n            icon: itemsByKey.applications.icon\n        }\n    ];\n\n    const _handleItemClick = (route: string) => () => {\n        history.push(`/${route}`);\n    };\n\n    return (\n        <StatsGroup>\n            {statsParts.map(stat => (\n                <StatItem key={stat.label} onClick={_handleItemClick(stat.route)} title={stat.label}>\n                    <StatLabel>\n                        {stat.icon} {stat.label}\n                    </StatLabel>\n                    <Statistic.Value>{stat.value}</Statistic.Value>\n                </StatItem>\n            ))}\n        </StatsGroup>\n    );\n}\n\nexport default Stats;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport Stats from './Stats';\nexport default Stats;","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport AppIcon from 'components/shared/AppIcon';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport styled from 'styled-components';\nimport Stats from './Stats';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 5rem;\n`;\n\nconst TitleWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nfunction Dashboard(): JSX.Element {\n    const {t} = useTranslation();\n\n    return (\n        <Wrapper>\n            <TitleWrapper>\n                <h3 className=\"title\">{t('dashboard.title')}</h3>\n                <AppIcon size=\"small\" />\n            </TitleWrapper>\n            <Stats />\n        </Wrapper>\n    );\n}\n\nexport default Dashboard;\n","// Copyright LEAV Solutions 2017\n// This file is released under LGPL V3\n// License text available at https://www.gnu.org/licenses/lgpl-3.0.txt\nimport Dashboard from './Dashboard';\nexport default Dashboard;"],"names":["getStatsQuery","gql","StatisticGroup","props","children","className","color","content","horizontal","inverted","items","size","widths","classes","cx","useKeyOnly","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","childrenUtils","React","_extends","_map","item","Statistic","handledProps","propTypes","StatisticLabel","create","createShorthandFactory","StatisticValue","text","floated","label","value","useValueAndKey","defaultProps","autoGenerateKey","Group","Label","Value","StatsGroup","styled","StatItem","StatLabel","useQuery","loading","error","data","t","useTranslation","menuItems","useMenuItems","history","useHistory","itemsByKey","reduce","acc","id","Loading","ErrorDisplay","statsParts","route","libraries","totalCount","icon","attributes","trees","applications","map","stat","onClick","push","title","Wrapper","TitleWrapper","AppIcon"],"sourceRoot":""}